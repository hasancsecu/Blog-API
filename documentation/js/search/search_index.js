var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.992,1,2.467]],["body/guards/AccessTokenGuard.html",[1,3.053,2,2.826,3,0.109,4,0.096,5,0.096,6,4.694,7,4.102,8,3.127,9,0.253,10,1.191,11,1.745,12,5.64,13,1.88,14,5.097,15,1.271,16,2.826,17,5.599,18,4.309,19,4.371,20,0.622,21,3.583,22,1.341,23,0.013,24,1.175,25,0.396,26,0.955,27,4.448,28,4.694,29,3.583,30,3.447,31,1.152,32,2.753,33,5.097,34,4.374,35,3.583,36,1.271,37,2.753,38,0.323,39,1.126,40,0.606,41,3.765,42,0.556,43,1.621,44,2.146,45,2.826,46,2.602,47,2.146,48,2.826,49,2.423,50,2.826,51,3.583,52,0.109,53,0.087,54,2.423,55,1.358,56,2.602,57,4.021,58,3.583,59,2.925,60,3.583,61,4.251,62,3.583,63,3.583,64,2.131,65,1.715,66,1.557,67,4.021,68,1.126,69,3.127,70,3.583,71,3.127,72,1.557,73,1.191,74,1.764,75,3.583,76,3.583,77,0.008,78,0.008]],["title/interfaces/ActiveUserData.html",[79,2.225,80,2.225]],["body/interfaces/ActiveUserData.html",[3,0.165,4,0.147,5,0.147,9,0.385,23,0.013,25,0.45,36,1.825,52,0.165,77,0.01,78,0.01,79,2.941,80,3.638,81,3.683,82,3.683,83,1.885,84,4.753,85,1.626,86,3.345,87,5.55,88,6.737,89,6.737,90,2.462,91,2.712]],["title/controllers/AppController.html",[92,1.541,93,2.992]],["body/controllers/AppController.html",[3,0.18,4,0.16,5,0.16,23,0.013,38,0.314,42,0.921,52,0.18,53,0.144,55,1.579,77,0.011,78,0.011,92,2.653,93,5.152,94,2.386,95,5.174,96,4.818,97,5.174,98,4.009]],["title/modules/AppModule.html",[99,1.487,100,2.992]],["body/modules/AppModule.html",[1,2.579,3,0.086,4,0.077,5,0.077,7,1.807,23,0.013,25,0.19,38,0.359,39,0.895,42,0.442,43,1.288,44,1.705,47,1.705,52,0.086,53,0.069,59,1.288,74,1.402,77,0.006,78,0.006,83,1.11,93,3.771,94,1.733,96,4.15,97,2.485,99,1.874,100,5.853,101,1.343,102,1.343,103,1.467,104,1.467,105,1.343,106,2.675,107,1.467,108,2.485,109,2.485,110,2.485,111,4.15,112,4.422,113,4.422,114,4.15,115,4.422,116,4.15,117,4.422,118,3.917,119,2.218,120,1.467,121,1.402,122,2.246,123,2.948,124,3.758,125,4.306,126,1.925,127,3.397,128,3.287,129,2.847,130,2.068,131,2.847,132,2.847,133,3.127,134,2.847,135,3.127,136,2.847,137,2.246,138,2.847,139,2.246,140,1.402,141,1.616,142,2.847,143,2.847,144,2.847,145,1.538,146,2.847,147,2.847,148,1.807,149,1.065,150,2.847,151,2.579,152,2.847,153,2.847,154,2.847,155,2.847,156,4.306,157,2.847,158,4.306,159,2.847,160,4.306,161,2.847,162,2.847,163,2.246,164,2.847,165,4.566,166,2.485,167,2.847,168,2.847,169,4.306,170,2.847,171,2.847,172,2.847,173,2.847,174,2.847,175,2.485,176,2.847,177,2.847,178,2.847,179,2.485,180,2.847,181,2.847,182,2.847,183,1.705,184,2.847,185,2.485,186,2.847,187,2.847,188,2.847,189,1.538,190,2.847,191,2.485,192,2.485,193,3.758,194,3.758]],["title/injectables/AppService.html",[40,0.49,96,2.614]],["body/injectables/AppService.html",[3,0.188,4,0.167,5,0.167,23,0.012,38,0.274,40,0.866,42,0.962,52,0.188,53,0.151,77,0.011,78,0.011,96,4.619,195,1.82,196,5.403]],["title/controllers/AuthController.html",[92,1.541,197,2.992]],["body/controllers/AuthController.html",[3,0.128,4,0.114,5,0.114,9,0.298,10,1.334,13,1.162,15,1.053,20,0.599,22,1.291,23,0.013,24,1.131,25,0.381,26,0.919,31,1.291,38,0.33,42,0.656,52,0.128,53,0.103,55,1.124,73,1.334,77,0.009,78,0.009,92,1.579,94,1.699,197,4.148,198,3.684,199,2.528,200,3.335,201,4.506,202,1.904,203,4.506,204,3.33,205,4.741,206,1.472,207,4.221,208,4.506,209,4.221,210,3.33,211,4.741,212,5.712,213,4.221,214,4.221,215,2.28,216,4.221,217,3.684,218,1.327,219,4.108,220,3.684,221,3.33,222,3.684,223,2.528,224,3.684,225,2.855,226,3.33,227,2.855,228,4.221,229,2.079,230,3.066,231,5.712,232,4.148,233,4.221,234,4.221,235,4.221,236,2.528,237,3.684,238,4.221,239,4.221,240,4.221]],["title/modules/AuthModule.html",[99,1.487,111,2.614]],["body/modules/AuthModule.html",[3,0.112,4,0.099,5,0.099,23,0.013,38,0.355,42,0.572,43,1.668,44,2.208,47,2.208,52,0.112,53,0.09,77,0.008,78,0.008,94,2.093,99,2.175,101,1.738,102,1.738,103,1.899,104,1.899,105,1.738,106,3.104,107,3.104,111,5.154,118,3.115,119,2.679,120,1.899,121,1.815,123,2.093,127,2.907,128,2.093,139,2.907,191,3.216,192,3.216,193,3.216,194,3.216,197,4.376,219,5.02,220,3.216,241,3.216,242,3.216,243,3.216,244,4.269,245,4.067,246,4.546,247,4.546,248,4.546,249,3.685,250,4.376,251,2.953,252,3.685,253,3.517,254,3.685,255,3.685,256,3.517,257,3.685,258,3.685,259,3.685,260,3.216,261,3.216,262,3.685,263,3.685,264,3.685,265,3.216,266,2.907]],["title/injectables/AuthService.html",[40,0.49,219,2.614]],["body/injectables/AuthService.html",[3,0.119,4,0.106,5,0.106,9,0.278,10,1.271,11,2.15,13,1.717,15,1.357,20,0.654,22,1.41,23,0.013,24,1.235,25,0.416,26,1.004,31,1.23,38,0.323,39,1.961,40,0.647,42,0.61,52,0.119,53,0.096,55,1.661,68,1.71,73,1.271,77,0.008,78,0.008,195,1.156,201,4.291,202,2.15,203,4.291,204,4.291,205,4.485,210,4.291,211,4.485,219,3.452,221,3.1,226,3.1,227,2.658,229,1.936,247,4.848,248,4.848,251,2.232,256,2.658,260,3.43,267,3.43,268,2.854,269,3.535,270,3.93,271,3.93,272,1.963,273,3.93,274,3.93,275,2.494,276,3.1,277,2.854,278,2.658,279,3.93,280,3.93]],["title/guards/AuthenticationGuard.html",[0,2.992,133,2.992]],["body/guards/AuthenticationGuard.html",[0,2.481,1,4.312,2,4.557,3,0.103,4,0.092,5,0.092,7,2.168,9,0.241,10,1.151,11,1.699,12,6.283,13,1.922,15,1.229,20,0.516,22,1.114,23,0.013,24,0.975,25,0.385,26,0.793,27,4.299,28,4.593,30,2.31,31,1.114,32,2.66,38,0.309,40,0.586,41,3.126,42,0.53,45,2.694,46,2.481,52,0.103,53,0.083,54,2.31,55,1.86,59,2.862,64,1.428,65,1.658,68,1.074,73,0.798,74,2.845,77,0.007,78,0.007,83,1.27,85,0.825,126,2.31,130,2.481,133,3.577,200,1.759,223,2.046,225,2.31,236,2.95,281,2.981,282,5.777,283,4.926,284,4.926,285,3.416,286,6.984,287,3.416,288,3.416,289,3.886,290,2.694,291,3.886,292,2.481,293,3.416,294,4.926,295,1.19,296,2.981,297,3.416,298,3.416,299,4.299,300,3.416,301,3.416,302,3.416,303,3.416,304,3.416,305,3.416,306,3.416,307,2.644,308,2.981,309,3.416,310,3.416,311,3.416,312,2.981,313,2.981,314,3.416,315,2.31,316,3.416,317,3.416,318,2.481,319,3.416,320,2.981,321,3.416,322,2.046,323,2.981,324,3.416,325,3.416,326,3.416,327,3.416]],["title/injectables/BcryptProvider.html",[40,0.49,253,2.786]],["body/injectables/BcryptProvider.html",[3,0.133,4,0.118,5,0.118,9,0.309,10,1.367,11,2.22,20,0.613,22,1.323,23,0.013,24,1.159,25,0.391,26,0.942,31,1.323,32,3.802,36,1.979,38,0.292,40,0.696,42,0.68,52,0.133,53,0.107,54,2.96,59,1.981,68,1.376,73,1.367,77,0.009,78,0.009,195,1.287,202,2.22,244,3.323,253,3.958,328,3.82,329,5.755,330,5.108,331,3.82,332,6.589,333,6.143,334,4.377,335,4.185,336,5.108,337,4.377,338,4.617,339,3.82,340,2.622,341,6.594,342,4.377,343,4.377,344,4.377]],["title/classes/CreateGoogleUserDto.html",[53,0.1,345,3.25]],["body/classes/CreateGoogleUserDto.html",[3,0.14,4,0.124,5,0.124,9,0.326,20,0.753,23,0.012,25,0.48,26,1.157,36,1.977,38,0.204,52,0.14,53,0.148,77,0.009,78,0.009,85,1.463,86,2.83,206,1.853,345,4.781,346,1.5,347,5.422,348,4.239,349,3.351,350,4.054,351,4.054,352,4.054,353,4.026,354,4.026,355,4.026,356,4.026,357,4.026,358,4.613,359,4.026,360,4.026,361,4.781,362,3.39,363,2.985,364,4.081,365,3.351,366,2.928,367,3.12,368,1.607,369,4.781,370,5.906]],["title/injectables/CreateGoogleUserProvider.html",[40,0.49,371,2.614]],["body/injectables/CreateGoogleUserProvider.html",[3,0.128,4,0.114,5,0.114,9,0.299,10,1.337,11,1.906,13,1.165,15,1.427,20,0.6,22,1.294,23,0.013,24,1.133,25,0.382,26,0.921,31,0.957,38,0.321,39,1.331,40,0.68,42,0.657,52,0.128,53,0.103,55,1.127,59,1.915,64,1.77,65,1.926,66,1.84,68,1.331,72,1.84,73,0.989,77,0.009,78,0.009,83,1.671,86,1.77,149,1.583,195,1.245,202,1.906,272,1.528,295,1.475,307,1.77,348,3.681,350,2.535,351,2.535,352,2.535,371,3.632,372,4.708,373,3.339,374,4.994,375,2.862,376,3.276,377,4.233,378,4.384,379,4.994,380,4.906,381,3.694,382,2.862,383,1.475,384,2.403,385,2.085,386,3.694,387,3.694,388,2.862,389,3.694,390,4.233,391,4.233,392,4.233,393,4.233,394,4.233,395,3.339,396,1.475]],["title/classes/CreateManyUsersDto.html",[53,0.1,397,2.467]],["body/classes/CreateManyUsersDto.html",[3,0.149,4,0.132,5,0.132,9,0.347,20,0.514,23,0.013,25,0.508,38,0.326,52,0.149,53,0.17,74,3.434,77,0.009,78,0.009,83,1.265,85,1.523,206,1.265,295,1.71,346,1.596,347,4.582,362,2.976,368,1.71,397,3.779,398,4.004,399,4.283,400,3.959,401,3.791,402,4.283,403,5.506,404,4.977,405,5.506,406,4.908,407,4.283,408,4.908,409,5.506,410,5.506,411,4.266,412,1.903,413,2.94,414,2.651,415,4.283]],["title/classes/CreatePostDto.html",[53,0.1,416,2.467]],["body/classes/CreatePostDto.html",[3,0.066,4,0.058,5,0.058,9,0.153,20,0.707,23,0.013,25,0.499,26,1.131,30,2.35,36,1.72,38,0.282,52,0.066,53,0.106,74,2.456,77,0.005,78,0.005,85,1.051,90,1.169,140,1.711,206,1.74,218,2.244,307,1.453,346,0.703,362,2.751,363,3.019,364,2.831,365,1.571,366,1.373,367,1.463,368,0.754,383,0.754,396,2.487,403,3.032,404,2.741,405,3.032,407,1.888,409,3.032,410,3.032,411,3.694,412,0.839,414,1.168,415,3.032,416,2.081,417,5.441,418,1.463,419,4.601,420,3.801,421,3.435,422,5.028,423,3.801,424,3.163,425,3.694,426,2.945,427,3.466,428,5.35,429,4.309,430,4.784,431,2.163,432,2.163,433,3.474,434,2.741,435,4.629,436,2.163,437,2.163,438,2.456,439,2.741,440,2.163,441,4.309,442,1.877,443,2.163,444,2.163,445,3.474,446,4.352,447,4.987,448,2.081,449,3.032,450,2.163,451,2.163,452,2.987,453,3.801,454,3.474,455,3.474,456,2.163,457,2.163,458,3.474,459,4.352,460,3.474,461,3.474,462,2.163,463,2.163,464,2.163,465,2.163,466,1.888,467,3.435,468,2.163,469,4.352,470,3.934,471,2.741,472,3.032,473,3.032,474,3.032,475,2.741,476,2.741,477,2.163,478,2.163,479,4.309,480,3.032,481,3.032,482,3.032,483,2.163,484,2.163,485,2.741,486,2.163,487,2.163,488,2.163,489,2.163,490,2.163,491,4.452,492,2.35,493,2.163,494,2.163,495,2.523,496,2.741,497,3.032,498,2.163,499,2.163,500,1.463,501,1.571,502,1.373,503,1.706,504,1.706,505,2.163,506,1.888,507,1.888,508,2.163,509,1.888,510,2.741,511,1.888,512,2.163,513,1.888,514,1.888,515,2.163,516,2.163,517,2.163,518,2.163,519,2.163,520,1.888,521,2.163,522,1.228,523,1.706,524,2.523,525,2.163]],["title/classes/CreatePostMetaOptionsDto.html",[53,0.1,438,2.029]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.168,4,0.149,5,0.149,9,0.392,20,0.581,23,0.012,25,0.37,36,1.699,38,0.245,52,0.168,53,0.166,77,0.01,78,0.01,85,1.644,140,3.354,206,1.429,218,2.142,346,1.803,362,3.213,364,3.148,366,3.518,368,1.932,438,3.354,496,5.373,500,4.606,524,5.355,526,3.509,527,4.374,528,5.544,529,4.838]],["title/classes/CreatePostMetaOptionsDto-1.html",[53,0.084,438,1.695,522,1.954]],["body/classes/CreatePostMetaOptionsDto-1.html",[3,0.166,4,0.147,5,0.147,9,0.386,20,0.573,23,0.013,25,0.451,38,0.299,52,0.166,53,0.164,77,0.01,78,0.01,85,1.63,206,1.409,218,2.123,346,1.778,362,3.185,364,3.833,368,1.904,402,4.77,411,4.566,412,2.12,438,3.325,441,4.312,500,4.566,524,5.321,526,3.478,530,4.77,531,5.465,532,5.465]],["title/classes/CreatePostMetaOptionsDto-2.html",[53,0.084,438,1.695,523,2.715]],["body/classes/CreatePostMetaOptionsDto-2.html",[3,0.162,4,0.144,5,0.144,9,0.378,20,0.698,23,0.012,25,0.445,36,1.662,38,0.237,52,0.162,53,0.162,77,0.01,78,0.01,85,1.609,140,3.574,206,1.718,218,2.282,346,1.74,357,4.67,362,3.583,364,3.784,368,1.865,417,5.725,438,3.282,527,4.222,529,4.67,533,5.725,534,5.271,535,5.351]],["title/injectables/CreatePostProvider.html",[40,0.49,536,2.614]],["body/injectables/CreatePostProvider.html",[3,0.101,4,0.09,5,0.09,9,0.236,10,1.133,11,1.678,13,1.57,15,1.209,20,0.508,22,1.096,23,0.013,24,0.96,25,0.323,26,0.78,31,0.755,37,2.618,38,0.324,39,1.524,40,0.577,42,0.519,52,0.101,53,0.081,55,1.52,64,2.386,65,1.92,66,2.108,68,1.794,72,2.108,73,1.133,77,0.007,78,0.007,80,3.381,82,2.26,83,1.613,145,1.805,149,1.25,189,1.805,195,0.983,202,1.678,215,1.805,218,2.09,229,1.646,230,2.427,268,2.427,269,3.27,272,1.206,275,2.121,295,1.988,307,2.027,315,2.26,376,2.953,382,2.26,383,1.164,385,1.646,395,3.825,396,1.164,400,1.897,416,4.152,425,2.26,427,4.218,485,2.636,536,3.077,537,4.979,538,2.916,539,5.463,540,4.159,541,3.341,542,4.231,543,3.341,544,2.26,545,1.576,546,2.427,547,2.636,548,2.916,549,2.26,550,2.916,551,4.827,552,3.279,553,2.636,554,3.341,555,3.341,556,3.341,557,3.341,558,2.916,559,3.341,560,3.341,561,2.916,562,2.636,563,2.427,564,3.341]],["title/classes/CreateTagDto.html",[53,0.1,502,2.614]],["body/classes/CreateTagDto.html",[3,0.122,4,0.108,5,0.108,9,0.284,20,0.746,23,0.013,24,1.248,25,0.475,36,1.966,38,0.244,52,0.122,53,0.134,77,0.008,78,0.008,85,1.332,206,1.835,346,1.305,362,2.974,363,3.344,364,3.856,365,2.914,366,2.546,367,2.713,368,1.398,369,3.165,396,2.197,411,4.264,412,1.556,424,4.58,425,4.815,430,3.501,467,3.165,469,5.927,470,5.357,471,4.352,472,4.815,473,4.815,474,4.815,475,4.352,476,4.352,491,4.932,496,4.352,497,4.815,502,3.501,503,5.804,509,3.501,513,3.501,514,3.501,520,3.501,565,3.501,566,5.503,567,4.012,568,4.012,569,4.012,570,4.012,571,4.012,572,4.012,573,4.012,574,4.012,575,4.012,576,4.012,577,4.012]],["title/classes/CreateUserDto.html",[53,0.1,401,2.122]],["body/classes/CreateUserDto.html",[3,0.129,4,0.115,5,0.115,9,0.301,20,0.729,23,0.012,25,0.464,26,0.925,36,1.942,38,0.188,52,0.129,53,0.14,77,0.009,78,0.009,85,1.387,86,2.718,90,1.933,183,3.894,206,1.794,322,4.485,346,1.384,347,5.278,349,3.091,350,3.894,352,3.894,353,3.714,354,3.714,355,3.714,356,3.714,359,3.714,360,3.714,361,4.531,362,3.283,363,2.829,364,3.952,365,3.091,366,2.701,367,2.878,368,1.483,369,4.531,370,6.074,401,2.959,471,4.531,578,4.256,579,6.96,580,5.744,581,5.744,582,5.744,583,5.744,584,5.744,585,5.744,586,5.744,587,5.744,588,4.256,589,3.714,590,4.256]],["title/injectables/CreateUserProvider.html",[40,0.49,591,2.614]],["body/injectables/CreateUserProvider.html",[3,0.094,4,0.084,5,0.084,9,0.22,10,1.075,11,1.61,13,1.507,15,1.148,20,0.482,22,1.04,23,0.013,24,0.911,25,0.307,26,0.741,31,0.703,34,2.756,37,1.681,38,0.318,39,1.722,40,0.547,42,0.483,52,0.094,53,0.076,55,1.226,64,2.53,65,2.173,66,2.807,68,1.902,72,2.38,73,0.727,77,0.007,78,0.007,83,1.559,86,2.289,149,1.164,183,1.864,189,1.681,195,0.915,202,1.61,229,1.532,244,4.077,251,1.767,253,2.104,272,1.123,278,2.104,295,1.084,307,2.7,315,3.112,318,3.342,338,2.455,372,3.977,373,2.455,375,2.104,376,2.854,378,3.703,381,2.716,383,1.084,384,1.767,385,1.532,388,2.104,389,2.716,396,1.603,401,3.482,413,1.864,544,3.112,545,1.468,591,2.92,592,4.016,593,4.557,594,4.016,595,3.112,596,3.112,597,3.109,598,3.112,599,3.112,600,2.716,601,5.476,602,4.016,603,3.112,604,3.112,605,3.112,606,2.455,607,2.716,608,3.63,609,2.716,610,3.112,611,3.63,612,3.63,613,3.63,614,3.977,615,3.63,616,2.716,617,3.112,618,3.977,619,3.112,620,3.112,621,2.716,622,3.112,623,2.26]],["title/injectables/CreateUsersManyProvoder.html",[40,0.49,624,3.25]],["body/injectables/CreateUsersManyProvoder.html",[3,0.112,4,0.099,5,0.099,9,0.26,10,1.215,11,1.772,15,0.919,20,0.545,22,1.176,23,0.013,24,1.029,25,0.347,26,0.837,31,0.833,38,0.305,40,0.618,42,0.572,52,0.112,53,0.09,55,0.982,64,2.519,65,2.028,66,2.62,68,2.252,72,2.62,73,0.861,77,0.008,78,0.008,83,1.687,98,2.492,189,1.99,195,1.084,202,1.772,272,1.33,307,2.519,372,4.376,382,2.492,383,1.284,384,2.093,396,1.812,397,4.135,398,2.339,400,3.421,401,1.899,413,2.208,545,2.453,597,2.093,618,2.677,624,4.102,625,3.216,626,4.102,627,3.216,628,5.651,629,3.685,630,4.102,631,3.685,632,2.677,633,4.538,634,3.216,635,3.216,636,3.216,637,3.216,638,4.538,639,3.685,640,3.216,641,3.216,642,3.216,643,3.216,644,3.216,645,3.685,646,3.685,647,5.259,648,3.216,649,3.685,650,3.216,651,3.216,652,3.216,653,3.216,654,4.538,655,4.538,656,4.538,657,4.538,658,3.216]],["title/injectables/DataResponseInterceptor.html",[40,0.49,135,2.992]],["body/injectables/DataResponseInterceptor.html",[3,0.141,4,0.125,5,0.125,9,0.329,10,1.424,15,1.161,20,0.639,22,1.378,23,0.013,24,1.207,25,0.407,26,0.981,28,5.238,30,3.148,31,1.052,38,0.301,40,0.725,42,0.723,43,2.107,45,5.363,46,3.381,52,0.141,53,0.113,54,3.148,55,1.24,73,1.088,77,0.009,78,0.009,98,3.148,128,4.362,135,4.428,137,5.363,195,1.369,335,3.869,659,5.933,660,4.063,661,6.096,662,4.063,663,4.655,664,6.096,665,5.363,666,7.213,667,4.655,668,6.096,669,4.655,670,4.655,671,4.655,672,4.655,673,4.655,674,4.655]],["title/injectables/FindOneByGoogleIdProvider.html",[40,0.49,675,2.614]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.14,4,0.125,5,0.125,9,0.327,10,1.419,11,1.993,13,1.274,15,1.515,20,0.636,22,1.373,23,0.013,24,1.202,25,0.405,26,0.978,31,1.046,36,1.691,38,0.318,39,1.455,40,0.722,42,0.719,52,0.14,53,0.113,55,1.232,68,1.455,73,1.081,77,0.009,78,0.009,83,1.193,149,1.731,195,1.361,202,1.993,272,1.67,322,4.06,348,3.848,351,3.637,375,3.129,376,3.394,378,4.584,383,1.612,384,2.627,385,2.279,388,3.129,675,3.854,676,5.347,677,4.038,678,5.299,679,4.627,680,5.299,681,4.627,682,3.65]],["title/injectables/FindOneUserByEmailProvider.html",[40,0.49,683,2.614]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.125,4,0.111,5,0.111,9,0.293,10,1.317,11,1.885,13,1.14,15,1.406,20,0.591,22,1.275,23,0.013,24,1.116,25,0.376,26,0.908,31,0.936,36,1.599,37,3.045,38,0.304,39,1.302,40,0.671,41,2.628,42,0.643,52,0.125,53,0.101,55,1.103,64,2.357,65,1.898,66,1.8,68,1.302,72,1.8,73,1.317,77,0.008,78,0.008,83,2.063,86,2.68,149,1.549,195,1.218,202,1.885,272,1.495,307,1.732,322,3.84,375,2.801,376,3.246,378,4.335,383,1.443,384,2.352,385,2.04,388,2.801,396,1.443,439,3.267,597,2.352,602,3.615,623,3.008,676,5.057,682,3.267,683,3.578,684,3.615,685,4.921,686,4.142,687,4.921,688,4.142,689,3.008,690,3.615,691,4.142]],["title/injectables/GenerateTokensProvider.html",[40,0.49,245,2.339]],["body/injectables/GenerateTokensProvider.html",[3,0.106,4,0.094,5,0.094,9,0.247,10,1.169,11,2.069,13,1.378,15,1.249,16,2.756,17,5.718,18,4.64,19,4.321,20,0.613,22,1.444,23,0.013,24,1.158,25,0.426,26,0.942,31,1.132,38,0.311,39,1.839,40,0.595,42,0.543,43,1.581,44,2.092,47,2.092,52,0.106,53,0.085,55,1.333,56,2.537,59,1.581,61,2.998,67,5.04,68,1.574,73,1.169,77,0.008,78,0.008,80,1.887,83,1.814,86,2.446,87,2.537,90,2.369,195,1.027,202,2.069,245,2.842,266,2.756,272,1.807,276,2.756,291,2.756,313,4.369,340,2.998,475,2.756,549,2.362,692,5.04,693,2.756,694,5.006,695,5.006,696,3.493,697,5.006,698,3.493,699,5.006,700,6.389,701,5.04,702,3.493,703,3.949,704,3.493,705,2.537,706,3.048,707,3.493,708,3.048,709,3.048,710,3.048,711,3.048,712,3.048,713,3.048,714,4.369,715,3.493,716,3.493,717,3.493,718,3.493,719,3.048,720,3.493,721,3.493]],["title/classes/GetPostsBaseDto.html",[53,0.1,722,2.467]],["body/classes/GetPostsBaseDto.html",[3,0.149,4,0.132,5,0.132,9,0.347,20,0.661,23,0.013,25,0.465,26,1.185,38,0.326,52,0.149,53,0.179,77,0.009,78,0.009,85,1.523,206,1.626,346,1.596,363,3.434,368,1.71,412,1.903,414,2.651,418,3.319,452,4.408,492,4.715,722,4.176,723,4.715,724,6.085,725,5.064,726,6.309,727,4.908,728,4.908,729,4.582,730,3.582,731,3.115,732,3.319,733,2.651,734,2.94]],["title/classes/GetPostsBaseDto-1.html",[53,0.084,522,1.954,722,2.062]],["body/classes/GetPostsBaseDto-1.html",[3,0.152,4,0.135,5,0.135,9,0.354,20,0.669,23,0.013,25,0.426,26,1.193,36,1.849,38,0.311,52,0.152,53,0.171,77,0.01,78,0.01,85,1.542,206,1.646,346,1.627,363,3.465,368,1.743,412,1.941,492,4.758,722,4.214,723,4.758,725,5.11,729,4.639,730,3.627,731,3.175,732,3.384,733,2.702,734,2.997,735,3.947,736,6.14,737,6.387,738,5.003,739,5.003]],["title/classes/GetPostsDto.html",[53,0.1,733,2.225]],["body/classes/GetPostsDto.html",[3,0.161,4,0.143,5,0.143,23,0.013,25,0.355,38,0.335,52,0.161,53,0.185,77,0.01,78,0.01,346,1.728,363,3.563,368,1.852,412,2.061,414,2.87,418,3.594,452,3.974,492,4.892,722,4.333,723,3.594,724,4.638,725,3.86,729,5.254,730,4.108,731,3.373,732,3.594,733,3.583,734,3.974]],["title/classes/GetPostsDto-1.html",[53,0.084,522,1.954,733,1.859]],["body/classes/GetPostsDto-1.html",[3,0.164,4,0.146,5,0.146,23,0.013,36,1.677,38,0.323,52,0.164,53,0.178,77,0.01,78,0.01,346,1.765,363,3.597,368,1.891,412,2.105,492,4.939,722,4.374,723,3.67,725,3.941,729,5.304,730,4.147,731,3.444,732,3.67,733,3.63,734,4.026,735,4.281,736,4.736]],["title/classes/GetUsersParamDto.html",[53,0.1,740,2.786]],["body/classes/GetUsersParamDto.html",[3,0.155,4,0.138,5,0.138,9,0.362,20,0.537,23,0.013,25,0.475,26,1.043,38,0.315,52,0.155,53,0.173,77,0.01,78,0.01,83,1.671,85,1.565,90,2.394,91,3.104,206,1.32,346,1.665,363,3.192,368,1.784,396,1.784,400,3.68,412,1.986,414,2.765,429,4.039,430,4.113,491,4.707,495,4.707,740,4.383,741,5.113,742,4.468,743,5.656,744,5.12,745,5.12,746,4.468]],["title/classes/GetUsersParamsDto.html",[53,0.1,747,3.25]],["body/classes/GetUsersParamsDto.html",[3,0.155,4,0.138,5,0.138,9,0.362,20,0.537,23,0.013,25,0.475,26,1.043,38,0.315,52,0.155,53,0.173,77,0.01,78,0.01,83,1.671,85,1.565,90,2.394,91,3.104,206,1.32,346,1.665,363,3.192,368,1.784,396,1.784,400,3.68,412,1.986,414,2.765,429,4.039,430,4.113,491,4.707,495,4.707,741,5.113,743,5.656,746,4.468,747,5.113,748,4.468,749,5.12,750,5.12]],["title/controllers/GoogleAuthenticationController.html",[92,1.541,250,2.992]],["body/controllers/GoogleAuthenticationController.html",[3,0.144,4,0.128,5,0.128,9,0.337,10,1.447,13,1.313,15,1.19,20,0.5,22,1.079,23,0.013,24,0.944,25,0.318,26,0.768,31,1.079,38,0.334,39,1.5,42,0.741,52,0.144,53,0.116,55,1.271,73,1.115,77,0.009,78,0.009,92,1.784,94,1.92,199,2.858,200,2.458,206,1.23,215,2.577,218,2.163,222,4.164,223,2.858,224,4.164,225,3.226,227,3.226,232,3.465,246,4.621,250,4.499,265,4.164,751,5.406,752,4.164,753,4.771,754,6.194,755,5.406,756,4.164,757,5.23,758,4.771,759,4.771,760,4.164,761,4.771,762,4.771,763,4.771]],["title/injectables/GoogleAuthenticationService.html",[40,0.49,246,2.614]],["body/injectables/GoogleAuthenticationService.html",[3,0.091,4,0.081,5,0.081,9,0.212,10,1.047,11,1.576,13,1.836,15,1.118,18,4.318,19,4.02,20,0.623,22,1.013,23,0.013,24,0.887,25,0.358,26,0.721,31,1.013,38,0.321,39,1.686,40,0.533,41,1.905,42,0.466,43,1.359,47,1.798,48,2.369,52,0.091,53,0.073,54,2.03,55,1.428,56,2.181,57,2.369,59,3.019,61,2.684,64,1.874,65,1.804,66,1.305,67,2.369,68,2,72,1.305,73,1.047,77,0.007,78,0.007,83,1.782,85,1.082,86,2.242,87,2.181,91,1.209,149,1.123,189,1.622,195,0.883,200,1.547,208,3.535,227,2.03,229,1.479,245,4.035,246,2.844,251,1.705,256,2.03,268,2.181,269,3.261,272,1.084,275,1.905,277,2.181,278,2.03,295,1.046,307,1.255,323,2.62,340,2.684,348,3.044,350,3.211,351,3.561,352,3.211,385,1.479,552,2.03,608,2.369,618,2.181,689,2.181,692,2.369,705,2.181,755,3.911,756,3.911,757,4.301,760,2.62,764,5.551,765,2.62,766,5.361,767,6.671,768,4.481,769,3.002,770,3.002,771,2.369,772,5.361,773,2.62,774,3.002,775,3.002,776,4.481,777,3.002,778,3.002,779,3.002,780,2.62,781,3.002,782,3.002,783,3.002,784,3.002,785,3.002,786,3.002,787,3.002,788,3.002,789,2.181,790,3.002,791,2.369,792,3.002,793,3.002,794,3.002,795,2.62]],["title/classes/GoogleTokenDto.html",[53,0.1,757,2.786]],["body/classes/GoogleTokenDto.html",[3,0.174,4,0.154,5,0.154,9,0.405,20,0.601,23,0.012,25,0.382,36,1.734,38,0.253,52,0.174,53,0.169,61,4.481,77,0.01,78,0.01,85,1.678,206,1.477,346,1.864,362,3.529,366,3.636,368,1.997,757,4.7,796,6.065,797,4.52,798,5.73]],["title/interfaces/GoogleUser.html",[79,2.225,380,2.786]],["body/interfaces/GoogleUser.html",[3,0.164,4,0.146,5,0.146,9,0.384,23,0.012,25,0.509,36,2.093,52,0.164,77,0.01,78,0.01,79,2.931,81,3.67,85,1.623,86,3.191,350,4.572,351,4.572,352,4.572,380,4.546,799,4.736,800,4.736]],["title/injectables/HashingProvider.html",[40,0.49,244,2.339]],["body/injectables/HashingProvider.html",[3,0.147,4,0.13,5,0.13,9,0.343,10,1.462,20,0.656,22,1.415,23,0.013,24,1.239,25,0.418,26,1.007,31,1.415,32,3.956,36,2.018,38,0.214,40,0.744,42,0.753,52,0.147,53,0.118,77,0.009,78,0.009,195,1.425,244,3.553,329,6.048,330,5.461,331,4.229,332,6.777,333,6.048,335,4.398,336,5.461,801,4.229,802,7.901,803,4.846,804,4.846]],["title/modules/MailModule.html",[99,1.487,112,2.786]],["body/modules/MailModule.html",[3,0.127,4,0.113,5,0.113,11,1.234,23,0.013,38,0.33,39,1.32,42,0.652,43,1.9,52,0.127,53,0.102,65,1.413,74,2.067,77,0.009,78,0.009,83,1.082,99,2.33,101,1.98,102,1.98,103,2.163,104,2.163,105,1.98,106,3.326,107,3.326,112,5.158,119,2.931,120,2.163,121,2.067,123,2.384,128,3.665,175,3.664,179,3.664,185,3.664,200,2.163,435,3.049,442,3.073,593,5.132,805,3.664,806,3.664,807,3.664,808,4.198,809,5.691,810,5.691,811,4.133,812,4.198,813,4.198,814,4.198,815,3.312,816,3.664,817,2.839,818,4.198,819,3.664,820,4.198,821,4.198,822,4.198,823,4.198,824,4.198,825,4.198,826,4.198,827,4.198,828,3.664,829,4.198,830,4.198,831,4.198,832,4.198,833,4.198,834,3.664,835,4.198]],["title/injectables/MailService.html",[40,0.49,593,2.614]],["body/injectables/MailService.html",[3,0.137,4,0.122,5,0.122,9,0.32,10,1.399,11,1.973,15,1.13,20,0.628,22,1.354,23,0.013,24,1.328,25,0.4,26,0.964,30,4.051,31,1.025,32,3.235,38,0.297,40,0.712,42,0.704,52,0.137,53,0.11,68,1.425,77,0.009,78,0.009,83,1.913,86,2.504,98,3.065,195,1.333,236,2.715,435,3.291,593,3.801,705,3.291,719,5.227,811,4.35,815,3.575,828,5.855,836,3.955,837,5.99,838,4.532,839,7.624,840,4.532,841,5.99,842,4.532,843,4.532,844,4.532,845,4.532,846,4.532,847,4.532,848,5.99,849,3.955,850,3.955,851,4.532,852,4.532,853,4.532,854,4.532,855,4.532,856,4.532]],["title/entities/MetaOption.html",[857,2.029,858,2.339]],["body/entities/MetaOption.html",[3,0.128,4,0.114,5,0.114,9,0.298,20,0.76,23,0.013,25,0.498,36,1.425,38,0.253,52,0.128,53,0.103,77,0.009,78,0.009,85,1.379,90,1.922,91,2.606,141,4.242,151,2.528,206,1.868,218,2.476,383,1.471,442,3.085,452,4.155,459,4.985,524,4.702,526,3.848,857,2.813,858,3.243,859,3.684,860,5.107,861,5.107,862,5.107,863,4.221,864,4.378,865,4.221,866,2.855,867,3.863,868,4.221,869,3.684,870,5.712,871,4.985,872,4.221,873,4.221,874,5.107,875,4.221,876,3.863,877,3.33,878,5.712,879,4.985,880,3.33,881,3.33]],["title/controllers/MetaOptionsController.html",[92,1.541,882,2.992]],["body/controllers/MetaOptionsController.html",[3,0.144,4,0.128,5,0.128,9,0.335,10,1.441,11,2.017,13,1.305,15,1.183,20,0.497,22,1.072,23,0.013,24,0.939,25,0.316,26,0.763,31,1.072,38,0.303,39,1.491,42,0.736,52,0.144,53,0.115,55,1.263,73,1.108,77,0.009,78,0.009,92,1.773,94,1.909,140,3.038,141,3.503,199,2.84,202,2.017,206,1.222,215,3.332,218,2.284,272,1.711,295,2.39,438,3.802,501,3.443,526,3.178,545,2.236,834,5.384,882,4.481,883,4.138,884,4.138,885,4.741,886,4.61,887,4.138,888,4.138,889,4.741,890,4.741]],["title/modules/MetaOptionsModule.html",[99,1.487,113,2.786]],["body/modules/MetaOptionsModule.html",[3,0.147,4,0.131,5,0.131,23,0.013,38,0.336,42,0.755,52,0.147,53,0.118,77,0.009,78,0.009,94,2.524,99,2.505,101,2.293,102,2.293,103,2.504,104,2.504,105,2.293,106,3.576,107,3.576,113,5.347,119,3.23,120,2.504,121,2.394,123,2.76,140,3.088,141,2.76,148,3.085,149,1.818,526,2.504,858,2.76,882,5.041,886,5.247,887,4.242,888,4.242,891,4.242,892,4.242,893,4.242,894,4.861,895,3.287,896,4.861,897,4.861]],["title/injectables/MetaOptionsService.html",[40,0.49,886,2.614]],["body/injectables/MetaOptionsService.html",[3,0.136,4,0.121,5,0.121,9,0.318,10,1.394,11,1.967,13,1.24,15,1.488,20,0.625,22,1.349,23,0.013,24,1.181,25,0.398,26,0.96,31,1.019,38,0.328,40,0.709,42,0.7,52,0.136,53,0.11,68,1.417,73,1.053,77,0.009,78,0.009,140,2.938,149,1.685,195,1.325,202,1.967,218,1.417,229,2.219,272,1.626,295,2.079,376,3.494,383,1.57,385,2.219,421,3.554,438,3.749,501,3.272,526,3.446,545,2.125,858,3.388,884,5.207,886,3.786,895,3.047,898,5.838,899,3.932,900,4.505,901,4.505,902,5.207,903,4.505,904,3.932,905,4.505,906,4.505]],["title/interfaces/Paginated.html",[79,2.225,907,2.786]],["body/interfaces/Paginated.html",[3,0.157,4,0.139,5,0.139,9,0.366,23,0.012,25,0.535,36,1.929,52,0.157,77,0.01,78,0.01,79,2.793,81,3.497,85,1.575,90,2.525,140,3.695,163,4.08,335,4.762,665,4.08,701,5.636,907,4.411,908,4.513,909,6.548,910,7.503,911,4.513,912,4.513,913,4.513,914,4.513,915,4.513,916,4.513,917,4.513]],["title/modules/PaginationModule.html",[99,1.487,114,2.614]],["body/modules/PaginationModule.html",[3,0.16,4,0.143,5,0.143,23,0.012,38,0.293,42,0.823,52,0.16,53,0.129,77,0.01,78,0.01,99,2.607,101,2.498,102,2.498,103,2.728,104,2.728,105,2.498,106,3.721,107,3.721,114,5.116,119,3.411,120,2.728,121,2.608,918,4.622,919,4.622,920,4.622,921,5.308,922,5.296,923,5.296]],["title/injectables/PaginationProvider.html",[40,0.49,921,2.614]],["body/injectables/PaginationProvider.html",[3,0.101,4,0.089,5,0.089,9,0.235,10,1.127,11,1.672,13,0.914,15,1.418,20,0.506,22,1.285,23,0.013,24,0.955,25,0.379,26,0.777,31,0.75,32,2.606,34,4.536,38,0.323,39,1.787,40,0.574,42,0.516,49,2.245,52,0.101,53,0.081,55,0.884,59,3.13,65,1.117,68,1.517,73,0.776,77,0.009,78,0.007,126,2.245,140,1.635,163,2.619,195,0.976,202,1.672,295,1.157,335,2.107,376,3.367,383,1.681,448,1.988,467,3.807,522,3.543,665,2.619,701,2.619,730,3.543,732,2.245,907,2.245,909,2.897,911,2.897,912,4.961,913,2.897,914,4.961,915,2.897,916,2.897,917,2.897,921,3.062,924,2.897,925,5.685,926,3.32,927,3.32,928,4.211,929,3.32,930,3.32,931,4.825,932,3.32,933,3.32,934,3.32,935,3.32,936,3.32,937,2.897,938,7.312,939,6.629,940,2.897,941,3.32,942,4.825,943,3.32,944,3.32,945,3.32,946,3.32,947,3.32,948,3.32,949,3.32,950,4.825,951,3.32,952,3.32,953,4.825,954,3.32,955,3.32,956,3.32,957,3.32,958,3.32]],["title/classes/PaginationQueryDto.html",[53,0.1,730,2.339]],["body/classes/PaginationQueryDto.html",[3,0.148,4,0.131,5,0.131,9,0.345,20,0.659,23,0.013,25,0.464,26,1.182,38,0.278,52,0.148,53,0.169,73,1.139,77,0.009,78,0.009,85,1.517,90,2.618,206,1.619,236,3.763,346,1.586,363,3.423,368,1.699,414,2.634,448,4.164,522,3.567,534,4.563,730,3.567,731,4.412,937,4.256,959,4.256,960,5.484,961,5.483,962,6.283,963,4.877,964,4.877,965,6.951,966,5.483,967,3.847]],["title/classes/PatchPostDto.html",[53,0.1,968,2.786]],["body/classes/PatchPostDto.html",[3,0.157,4,0.14,5,0.14,9,0.367,20,0.544,23,0.013,25,0.346,38,0.317,52,0.157,53,0.159,77,0.01,78,0.01,85,1.578,90,2.2,91,3.117,206,1.337,218,2.055,295,1.808,346,1.688,362,3.083,368,1.808,396,1.808,411,4.42,412,2.013,416,3.108,418,3.509,466,4.528,495,4.747,546,3.769,734,3.915,968,4.42,969,5.705,970,6.536,971,6.536,972,5.189,973,5.189,974,4.093,975,4.528]],["title/classes/PatchUserDto.html",[53,0.1,976,2.614]],["body/classes/PatchUserDto.html",[3,0.18,4,0.16,5,0.16,23,0.012,38,0.314,52,0.18,53,0.144,77,0.011,78,0.011,83,1.528,295,2.066,346,1.928,401,3.054,412,2.299,413,3.551,734,4.249,974,4.677,976,4.502,977,4.677,978,5.174,979,6.191]],["title/classes/PatchUserDto-1.html",[53,0.084,522,1.954,976,2.184]],["body/classes/PatchUserDto-1.html",[3,0.18,4,0.16,5,0.16,23,0.012,38,0.314,52,0.18,53,0.145,77,0.011,78,0.011,295,2.074,346,1.936,349,4.322,401,3.066,412,2.308,413,3.565,734,4.259,974,4.695,976,4.512,977,4.695,979,6.205]],["title/entities/Post.html",[218,1.295,857,2.029]],["body/entities/Post.html",[3,0.077,4,0.068,5,0.068,9,0.179,20,0.766,23,0.013,25,0.524,26,1.177,36,1.763,37,2.123,38,0.288,52,0.077,53,0.062,74,3.792,77,0.006,78,0.006,83,1.608,85,0.949,90,1.323,91,1.942,140,1.936,141,1.436,145,3.369,151,1.515,206,1.885,218,1.517,236,3.259,383,0.881,419,3.805,420,4.21,421,4.649,422,5.311,423,4.21,424,3.503,425,3.262,426,3.262,427,3.061,428,4.21,438,1.245,442,3.636,452,2.355,479,4.649,500,1.71,501,1.837,506,2.207,507,2.207,510,5.311,526,1.303,551,3.503,563,2.855,705,1.837,857,1.936,858,3.089,864,3.262,866,4.553,867,5.166,869,2.207,876,4.676,879,3.431,881,3.102,895,1.71,980,2.207,981,2.529,982,3.932,983,6.239,984,2.529,985,4.748,986,2.529,987,4.531,988,4.531,989,3.102,990,2.529,991,2.529,992,3.932,993,2.529,994,2.529,995,3.431,996,2.529,997,2.529,998,3.431,999,2.529,1000,2.529,1001,2.207,1002,3.932,1003,2.529,1004,2.529,1005,3.431,1006,2.529,1007,3.932,1008,3.431,1009,3.932,1010,2.529,1011,2.529,1012,2.529,1013,2.529,1014,2.529]],["title/controllers/PostsController.html",[92,1.541,1015,2.992]],["body/controllers/PostsController.html",[3,0.09,4,0.08,5,0.08,9,0.211,10,1.041,13,0.82,15,0.743,20,0.621,22,1.339,23,0.013,24,1.172,25,0.395,26,0.953,31,1.339,36,1.331,38,0.314,42,0.463,52,0.09,53,0.073,55,0.793,65,1.499,73,1.384,77,0.007,78,0.007,80,3.198,82,2.015,83,1.634,90,1.796,91,1.793,92,1.114,94,1.199,199,1.784,202,2.231,206,1.526,215,2.406,218,2.229,229,1.467,230,2.164,237,5.168,396,2.063,412,1.156,416,3.985,426,3.013,435,4.301,545,1.405,546,3.876,549,2.015,703,4.21,733,3.198,968,4.499,975,3.888,1015,3.236,1016,2.6,1017,3.236,1018,5.336,1019,4.455,1020,5.336,1021,4.455,1022,2.979,1023,4.455,1024,4.455,1025,4.455,1026,5.922,1027,4.455,1028,2.979,1029,2.979,1030,2.979,1031,3.609,1032,2.979,1033,2.979,1034,4.657,1035,4.455,1036,2.979,1037,2.979,1038,3.888,1039,4.455,1040,5.168,1041,2.979,1042,2.979,1043,2.6,1044,3.515,1045,3.888,1046,3.236,1047,3.387,1048,2.6,1049,4.21,1050,4.657,1051,2.6,1052,2.35,1053,2.164,1054,3.515,1055,2.35,1056,2.979,1057,2.979,1058,2.979,1059,2.979,1060,2.979,1061,2.979,1062,3.515,1063,3.888,1064,2.979,1065,2.979,1066,2.979,1067,2.979,1068,2.979,1069,2.979]],["title/modules/PostsModule.html",[99,1.487,115,2.786]],["body/modules/PostsModule.html",[3,0.127,4,0.113,5,0.113,23,0.013,38,0.352,42,0.654,52,0.127,53,0.103,77,0.009,78,0.009,94,2.295,99,2.333,101,1.986,102,1.986,103,2.169,104,2.169,105,1.986,106,3.33,107,2.169,114,4.737,115,5.537,116,4.737,118,4.471,119,2.937,120,2.169,121,2.073,123,3.237,141,2.39,148,2.672,149,1.574,218,1.324,261,3.674,526,2.169,536,4.737,547,3.321,858,3.237,895,2.847,1015,4.695,1047,4.737,1048,3.674,1070,3.674,1071,3.674,1072,4.21,1073,4.21,1074,4.21,1075,4.21,1076,4.21,1077,3.674,1078,3.674,1079,4.21]],["title/injectables/PostsService.html",[40,0.49,1047,2.614]],["body/injectables/PostsService.html",[3,0.062,4,0.055,5,0.055,9,0.144,10,0.774,11,2.032,13,1.459,15,0.827,20,0.556,22,1.198,23,0.013,24,1.049,25,0.354,26,0.853,31,1.198,32,1.79,34,2.507,36,1.044,37,1.79,38,0.316,39,1.666,40,0.394,42,0.317,52,0.062,53,0.05,55,1.412,64,2.216,65,2.098,66,2.469,68,1.785,72,1.819,73,1.238,74,1.004,77,0.005,78,0.005,80,2.603,82,1.379,83,1.366,85,0.492,90,1.622,91,1.94,141,1.158,145,1.102,149,0.763,189,2.26,195,0.6,202,2.032,215,1.102,218,2.083,269,0.962,272,1.51,275,1.294,295,1.458,307,2.374,315,1.379,318,3.04,376,2.823,383,0.711,385,1.004,396,1.458,416,3.175,427,3.957,439,1.609,448,1.222,485,1.609,526,1.051,536,3.957,539,3.652,540,3.54,542,2.892,544,2.241,545,0.962,546,3.04,547,1.609,548,1.78,549,1.379,550,1.78,552,2.241,558,1.78,561,1.78,562,1.609,597,2.736,606,1.609,611,3.302,612,3.302,613,3.302,614,3.5,615,3.302,689,1.481,703,3.302,733,2.603,858,1.158,895,1.379,902,4.205,904,1.78,907,1.379,921,3.957,960,1.609,968,3.584,1017,3.5,1031,2.241,1034,2.892,1047,2.103,1052,1.609,1053,1.481,1078,1.78,1080,1.78,1081,3.652,1082,4.185,1083,2.04,1084,2.04,1085,2.04,1086,3.314,1087,2.614,1088,2.04,1089,2.04,1090,2.04,1091,3.314,1092,2.04,1093,2.04,1094,2.04,1095,2.04,1096,2.04,1097,2.04,1098,2.04,1099,2.04,1100,2.04,1101,1.609,1102,2.04,1103,2.04,1104,2.04,1105,2.892,1106,2.04,1107,2.04,1108,1.78,1109,3.314,1110,2.04,1111,3.314,1112,2.04,1113,3.314,1114,2.04,1115,3.314,1116,2.04,1117,3.314,1118,2.04,1119,3.314,1120,2.04,1121,3.314,1122,2.04,1123,2.04,1124,1.78,1125,2.04,1126,2.04,1127,2.04,1128,1.78]],["title/classes/RefreshTokenDto.html",[53,0.1,205,2.614]],["body/classes/RefreshTokenDto.html",[3,0.173,4,0.154,5,0.154,9,0.403,20,0.598,23,0.012,25,0.381,36,1.73,38,0.252,52,0.173,53,0.169,77,0.01,78,0.01,85,1.674,205,4.401,206,1.471,346,1.857,362,3.271,364,3.937,368,1.989,714,6.518,797,4.503,1129,6.051,1130,5.709,1131,5.709]],["title/injectables/RefreshTokensProvider.html",[40,0.49,247,2.614]],["body/injectables/RefreshTokensProvider.html",[3,0.108,4,0.096,5,0.096,9,0.251,10,1.183,11,1.736,13,1.771,15,1.263,16,2.8,17,5.873,18,4.674,19,4.352,20,0.531,22,1.145,23,0.013,24,1.002,25,0.338,26,0.815,31,0.802,38,0.329,39,2.024,40,0.602,41,2.253,42,0.551,43,1.606,44,2.126,47,2.126,52,0.108,53,0.086,55,1.714,56,2.578,59,2.291,61,2.126,64,1.484,65,1.195,66,1.543,68,1.856,69,3.098,72,1.543,73,0.829,77,0.008,78,0.008,80,1.917,83,1.521,87,2.578,189,1.917,195,1.044,201,3.994,202,1.736,204,3.994,205,4.319,208,2.8,226,2.8,227,2.4,229,1.748,245,4.227,247,3.213,251,2.015,256,2.4,266,2.8,269,3.512,272,1.281,275,2.253,276,2.8,277,2.578,278,2.4,307,1.484,340,3.033,549,2.4,690,3.098,693,2.8,706,3.098,708,3.098,709,3.098,710,3.098,711,3.098,712,3.098,713,3.098,780,3.098,789,2.578,791,2.8,795,3.098,1132,5.151,1133,3.549,1134,3.549,1135,3.549,1136,3.549]],["title/classes/SignInDto.html",[53,0.1,211,2.614]],["body/classes/SignInDto.html",[3,0.165,4,0.147,5,0.147,9,0.385,20,0.706,23,0.013,25,0.45,36,1.906,38,0.241,52,0.165,53,0.164,77,0.01,78,0.01,85,1.626,86,3.058,183,4.381,206,1.736,211,4.275,346,1.771,361,5.315,362,3.45,367,3.683,368,1.898,589,4.753,1137,4.753,1138,5.446,1139,5.446,1140,5.446,1141,5.446]],["title/injectables/SignInProvider.html",[40,0.49,248,2.614]],["body/injectables/SignInProvider.html",[3,0.11,4,0.098,5,0.098,9,0.257,10,1.205,11,1.76,13,1.648,15,1.286,20,0.54,22,1.166,23,0.013,24,1.021,25,0.344,26,0.83,31,0.823,38,0.304,39,1.882,40,0.613,41,2.311,42,0.566,52,0.11,53,0.089,55,1.595,61,2.181,64,2.503,65,1.736,66,1.583,68,1.882,72,1.583,73,0.851,77,0.008,78,0.008,83,1.543,86,1.523,91,1.466,183,3.089,195,1.071,202,1.76,203,4.068,210,4.068,211,4.361,221,2.873,229,1.794,244,4.256,245,4.256,248,3.273,251,2.068,256,2.463,268,2.645,269,3.461,272,1.314,275,2.311,277,2.645,278,2.463,291,2.873,307,1.523,339,3.178,340,3.089,396,1.269,442,1.967,552,2.463,597,2.068,608,2.873,623,2.645,689,2.645,791,2.873,1142,5.225,1143,3.178,1144,3.642,1145,3.642,1146,3.642,1147,3.642,1148,3.642,1149,3.642,1150,3.642,1151,3.178,1152,5.987,1153,3.642,1154,5.157,1155,3.642,1156,3.642,1157,3.642,1158,3.642,1159,3.642,1160,3.642]],["title/entities/Tag.html",[145,2.225,857,2.029]],["body/entities/Tag.html",[3,0.098,4,0.087,5,0.087,9,0.228,20,0.788,23,0.013,24,1.106,25,0.528,36,1.876,38,0.209,52,0.098,53,0.078,74,3.704,77,0.007,78,0.007,85,1.14,90,1.589,91,2.249,145,2.55,151,1.93,206,1.938,218,2.152,383,1.123,396,1.947,424,4.059,425,3.779,442,3.323,452,4.1,563,4.469,566,4.877,857,2.325,860,4.408,861,4.408,862,4.408,864,3.779,866,4.43,867,5.086,871,4.121,874,4.408,876,4.782,877,4.408,880,2.542,881,3.725,985,5.37,987,4.971,988,4.971,989,3.725,998,4.121,1001,2.812,1005,4.121,1008,4.121,1017,4.059,1031,2.179,1124,4.121,1161,2.812,1162,5.588,1163,3.222,1164,3.222,1165,3.222,1166,3.222,1167,3.222,1168,3.222,1169,3.222,1170,3.222,1171,3.222,1172,3.222,1173,3.222,1174,3.222,1175,3.222,1176,3.222,1177,3.222,1178,3.222]],["title/controllers/TagsController.html",[92,1.541,1179,2.992]],["body/controllers/TagsController.html",[3,0.125,4,0.111,5,0.111,9,0.291,10,1.312,13,1.134,15,1.028,20,0.67,22,1.445,23,0.013,24,1.266,25,0.427,26,1.029,31,1.445,38,0.283,39,1.295,42,0.64,52,0.125,53,0.1,55,1.097,73,1.494,77,0.008,78,0.008,90,2.496,91,2.764,92,1.541,94,1.658,199,2.467,202,2.304,206,1.648,215,2.225,218,2.01,295,1.957,427,2.614,502,4.707,504,3.25,540,3.899,545,1.943,1031,5.133,1044,5.043,1046,2.992,1087,3.25,1179,4.08,1180,3.595,1181,5.618,1182,3.595,1183,4.119,1184,4.119,1185,4.119,1186,5.618,1187,4.119,1188,3.595,1189,4.119,1190,4.119,1191,4.119,1192,4.119,1193,4.119,1194,4.119,1195,4.119]],["title/modules/TagsModule.html",[99,1.487,116,2.614]],["body/modules/TagsModule.html",[3,0.15,4,0.133,5,0.133,23,0.013,38,0.337,42,0.767,52,0.15,53,0.12,77,0.01,78,0.01,94,2.55,99,2.524,101,2.33,102,2.33,103,2.544,104,2.544,105,2.33,106,3.603,107,3.603,116,5.037,119,3.263,120,2.544,121,2.432,123,2.804,145,2.668,148,3.135,149,1.847,540,4.705,1179,5.079,1188,4.31,1196,4.31,1197,4.31,1198,4.31,1199,4.939,1200,4.31,1201,4.939,1202,4.939]],["title/injectables/TagsService.html",[40,0.49,540,2.339]],["body/injectables/TagsService.html",[3,0.107,4,0.095,5,0.095,9,0.25,10,1.179,11,2.308,13,0.972,15,1.259,20,0.712,22,1.536,23,0.013,24,1.345,25,0.453,26,1.094,31,1.452,38,0.3,39,1.111,40,0.6,42,0.549,52,0.107,53,0.086,55,0.941,68,2.019,73,1.5,74,2.485,77,0.01,78,0.008,90,2.547,91,2.734,145,2.726,149,1.321,195,1.039,202,2.308,272,2.318,295,1.759,376,3.03,383,1.231,385,1.74,427,2.242,502,4.311,504,2.787,540,2.866,545,1.667,1031,3.413,1087,3.981,1128,3.083,1182,4.404,1200,3.083,1203,3.083,1204,5.047,1205,5.047,1206,3.533,1207,3.533,1208,5.888,1209,3.533,1210,3.533,1211,5.047,1212,3.533,1213,5.047,1214,3.533,1215,3.533,1216,3.533,1217,3.533,1218,3.533,1219,3.533,1220,3.533,1221,3.533,1222,3.533]],["title/entities/Upload.html",[857,2.029,1223,2.467]],["body/entities/Upload.html",[3,0.108,4,0.096,5,0.096,9,0.252,20,0.781,23,0.013,24,1.171,25,0.539,36,1.859,37,1.926,38,0.225,52,0.108,53,0.087,77,0.008,78,0.008,85,1.226,90,2.171,91,2.382,151,2.136,206,1.921,236,3.043,383,1.242,442,4.155,452,3.863,510,5.088,817,4.002,857,2.502,860,4.668,861,4.668,862,4.668,864,4.002,866,4.61,867,5.203,874,4.668,876,4.792,877,2.813,987,5.414,988,5.414,989,5.59,1223,3.043,1224,3.112,1225,4.668,1226,4.668,1227,3.566,1228,3.566,1229,5.08,1230,3.566,1231,3.566,1232,3.566,1233,3.566,1234,4.668,1235,3.566,1236,3.566,1237,3.112,1238,3.112,1239,3.112]],["title/interfaces/UploadFile.html",[79,2.225,1240,2.786]],["body/interfaces/UploadFile.html",[3,0.159,4,0.142,5,0.142,9,0.372,23,0.012,24,1.494,25,0.548,36,2.085,52,0.159,77,0.01,78,0.01,79,2.841,81,3.557,85,1.591,90,2.424,817,5.105,1225,5.955,1226,5.955,1240,4.458,1241,4.59,1242,4.59]],["title/injectables/UploadToAwsProvider.html",[40,0.49,1243,2.614]],["body/injectables/UploadToAwsProvider.html",[3,0.11,4,0.097,5,0.197,9,0.256,10,1.199,11,1.754,13,1.641,15,0.902,20,0.625,22,1.348,23,0.013,24,1.481,25,0.398,26,0.96,31,1.16,32,1.953,34,2.166,36,0.902,38,0.315,40,0.61,42,0.562,43,1.636,49,3.47,52,0.11,53,0.088,55,0.963,57,4.048,59,2.322,64,1.512,65,2.184,66,1.572,68,1.137,72,1.572,73,1.516,77,0.008,78,0.008,98,2.445,128,4.042,195,1.063,202,1.754,215,1.953,272,1.305,307,1.512,340,2.166,476,2.853,533,2.853,597,2.053,623,2.626,662,3.156,817,3.47,850,4.478,995,5.205,1223,2.166,1243,3.256,1244,5.664,1245,3.156,1246,5.131,1247,5.131,1248,3.616,1249,5.131,1250,5.616,1251,3.616,1252,5.131,1253,3.616,1254,5.664,1255,2.626,1256,3.156,1257,3.616,1258,3.616,1259,3.156,1260,3.616,1261,3.156,1262,3.616,1263,3.616,1264,3.616,1265,3.616,1266,3.156,1267,3.616,1268,3.616,1269,3.616,1270,3.616,1271,3.616,1272,3.616,1273,3.616,1274,3.616,1275,3.156,1276,3.616]],["title/controllers/UploadsController.html",[92,1.541,1277,2.992]],["body/controllers/UploadsController.html",[3,0.127,4,0.113,5,0.186,9,0.297,10,1.329,13,1.156,15,1.047,20,0.44,22,0.949,23,0.013,24,1.37,25,0.38,26,0.676,31,0.949,38,0.337,39,1.32,42,0.652,49,4.366,52,0.127,53,0.102,55,1.118,61,2.515,65,1.915,73,0.981,77,0.009,78,0.009,92,1.57,94,1.69,199,2.515,200,2.163,202,1.898,206,1.082,218,1.32,223,2.515,225,2.839,232,3.049,290,3.312,292,3.049,335,2.664,396,1.983,412,1.628,419,3.312,434,4.489,1049,4.489,1062,3.312,1223,3.409,1240,3.848,1250,5.093,1277,4.133,1278,3.664,1279,4.198,1280,3.664,1281,4.198,1282,4.198,1283,4.198,1284,4.198,1285,5.691,1286,4.198,1287,3.664,1288,4.198,1289,3.664,1290,4.392,1291,3.664,1292,4.198,1293,3.664,1294,4.198,1295,4.198,1296,4.198,1297,3.664,1298,3.664,1299,4.198,1300,4.198,1301,4.198]],["title/modules/UploadsModule.html",[99,1.487,117,2.786]],["body/modules/UploadsModule.html",[3,0.148,4,0.132,5,0.132,23,0.013,38,0.344,42,0.76,52,0.148,53,0.119,77,0.009,78,0.009,94,2.534,99,2.512,101,2.308,102,2.308,103,2.52,104,2.52,105,2.308,106,3.586,107,2.52,117,5.425,119,3.243,120,2.52,121,2.409,123,2.778,148,3.105,149,1.83,1223,2.93,1243,4.941,1277,5.056,1290,4.941,1291,4.269,1302,4.269,1303,4.269,1304,4.892,1305,4.269,1306,4.892,1307,4.269,1308,4.892,1309,4.892]],["title/injectables/UploadsService.html",[40,0.49,1290,2.614]],["body/injectables/UploadsService.html",[3,0.104,4,0.093,5,0.171,9,0.244,10,1.158,11,1.707,13,1.598,15,1.237,20,0.52,22,1.121,23,0.013,24,1.149,25,0.424,26,0.798,31,0.779,38,0.327,39,1.825,40,0.59,42,0.535,43,1.559,52,0.104,53,0.084,55,1.32,59,2.627,64,2.428,65,1.954,66,1.498,68,1.559,72,1.498,73,0.805,77,0.007,78,0.007,128,4.194,149,1.289,189,1.861,195,1.013,202,1.707,272,1.244,295,1.201,296,3.008,307,2.073,340,2.064,376,2.995,382,2.33,383,1.201,385,1.697,395,2.719,544,2.33,606,2.719,607,3.008,817,3.926,1223,4.196,1225,2.719,1226,2.719,1234,2.719,1237,3.008,1238,3.008,1239,3.008,1240,4.55,1243,4.581,1250,4.58,1254,3.008,1255,2.503,1261,3.008,1266,4.326,1280,4.326,1290,3.146,1305,3.008,1307,3.008,1310,3.008,1311,3.446,1312,6.35,1313,3.446,1314,3.446,1315,3.446,1316,3.446,1317,3.446,1318,3.446,1319,3.008,1320,3.446,1321,3.446,1322,3.446,1323,3.446,1324,3.446,1325,3.446,1326,3.446,1327,3.008,1328,3.446,1329,3.446,1330,3.446,1331,3.446]],["title/entities/User.html",[83,1.062,857,2.029]],["body/entities/User.html",[3,0.108,4,0.096,5,0.096,9,0.251,20,0.763,23,0.013,25,0.524,26,1.139,36,1.917,38,0.261,52,0.108,53,0.123,74,3.484,77,0.008,78,0.008,83,1.305,85,1.222,86,2.468,90,1.704,91,2.376,151,2.126,183,3.536,206,1.877,218,2.225,350,3.536,351,3.536,352,3.536,383,1.237,414,1.917,442,3.476,563,3.677,857,2.494,864,3.992,866,4.602,867,5.198,876,4.785,880,2.8,987,5.582,988,5.407,1017,4.287,1332,3.098,1333,7.445,1334,3.549,1335,3.549,1336,5.063,1337,3.549,1338,3.549,1339,3.549,1340,3.549,1341,3.549,1342,5.063,1343,3.549,1344,5.063,1345,5.903]],["title/controllers/UsersController.html",[92,1.541,1346,2.992]],["body/controllers/UsersController.html",[1,1.616,3,0.082,4,0.073,5,0.073,6,1.959,7,1.712,9,0.191,10,0.965,13,0.742,15,0.673,20,0.59,22,1.273,23,0.013,24,1.268,25,0.459,26,0.906,31,1.273,38,0.318,42,0.419,52,0.082,53,0.066,55,0.718,65,1.391,73,1.496,77,0.006,78,0.006,90,2.557,92,1.009,94,1.086,130,1.959,199,1.616,200,1.389,202,2.183,206,1.451,215,1.457,218,1.299,223,1.616,225,1.824,229,1.328,230,1.959,232,1.959,269,2.369,290,2.128,292,1.959,396,2.231,397,3.835,398,3.188,400,3.784,401,3.299,404,4.441,412,1.046,413,2.475,426,1.824,430,3.573,442,3.04,448,4.118,522,2.346,545,1.949,553,3.26,632,1.959,740,3.807,960,5.051,961,2.354,966,3.606,976,4.363,1040,3.606,1043,3.606,1044,3.962,1045,4.384,1046,4.089,1049,3.26,1050,3.606,1051,2.354,1052,2.128,1053,1.959,1062,2.128,1063,3.606,1287,2.354,1346,3.001,1347,2.354,1348,4.132,1349,4.132,1350,5.023,1351,4.132,1352,2.697,1353,4.132,1354,2.697,1355,2.697,1356,2.697,1357,2.697,1358,2.697,1359,2.697,1360,4.132,1361,4.132,1362,4.132,1363,2.697,1364,4.132,1365,2.697,1366,4.132,1367,4.132,1368,2.697,1369,4.132,1370,4.132,1371,3.606,1372,2.697,1373,3.606,1374,2.697,1375,2.697,1376,2.697,1377,2.697,1378,2.354,1379,2.354,1380,5.023,1381,2.697,1382,2.697,1383,2.697,1384,2.354,1385,2.697,1386,2.697,1387,2.697,1388,2.697,1389,2.697,1390,2.697,1391,2.354,1392,2.697,1393,2.697,1394,2.697,1395,2.697,1396,2.697,1397,2.697]],["title/injectables/UsersCreateManyProvider.html",[40,0.49,1398,2.614]],["body/injectables/UsersCreateManyProvider.html",[3,0.108,4,0.096,5,0.096,9,0.253,10,1.189,11,1.742,13,0.984,15,1.269,20,0.533,22,1.15,23,0.013,24,1.007,25,0.34,26,0.819,31,0.808,38,0.286,39,1.124,40,0.605,42,0.555,52,0.108,53,0.087,59,1.617,64,2.477,65,1.994,66,2.576,68,2.23,72,2.576,73,0.835,77,0.008,78,0.008,83,1.664,189,1.93,195,1.051,202,1.742,272,1.29,295,2.25,307,2.477,308,3.119,382,2.417,383,1.245,384,2.029,396,1.245,397,4.087,398,2.268,545,1.686,597,2.889,618,2.596,626,4.014,627,3.119,628,5.884,630,4.014,632,2.596,633,4.441,634,4.441,635,3.119,636,3.119,637,3.119,638,3.119,640,3.119,641,3.119,642,3.119,643,3.119,644,3.119,647,4.441,648,3.119,650,3.119,651,3.119,652,3.119,653,3.119,654,3.119,655,3.119,656,4.441,657,3.119,658,3.119,967,2.82,1046,4.303,1101,2.82,1398,3.229,1399,5.171,1400,3.119,1401,3.574,1402,3.574,1403,5.089,1404,5.089,1405,3.574,1406,3.574,1407,3.574,1408,3.574,1409,3.574,1410,3.574,1411,3.574]],["title/modules/UsersModule.html",[99,1.487,118,2.467]],["body/modules/UsersModule.html",[1,2.146,3,0.109,4,0.096,5,0.096,6,2.602,7,2.274,23,0.013,38,0.36,42,0.556,43,1.621,44,2.146,47,2.146,48,2.826,52,0.109,53,0.087,77,0.008,78,0.008,83,1.314,94,2.052,99,2.141,101,1.69,102,1.69,103,1.846,104,1.846,105,1.69,106,3.056,107,3.056,111,3.235,118,4.869,119,2.626,120,1.846,121,1.764,123,2.034,124,3.127,126,2.423,127,2.826,130,2.602,139,2.826,148,2.274,149,1.34,251,2.894,269,3.712,295,1.248,322,3.053,348,2.894,371,4.504,384,2.034,591,4.504,675,4.504,683,4.504,1077,4.448,1346,4.309,1379,3.127,1398,4.504,1412,3.127,1413,3.127,1414,3.127,1415,3.583,1416,3.583,1417,4.448,1418,5.097,1419,3.127,1420,3.583,1421,3.583,1422,3.127,1423,3.127,1424,3.127,1425,3.127,1426,3.583,1427,3.583]],["title/injectables/UsersService.html",[40,0.49,269,1.943]],["body/injectables/UsersService.html",[3,0.059,4,0.052,5,0.052,9,0.137,10,0.744,11,2.17,13,1.528,15,0.795,19,1.315,20,0.641,22,1.384,23,0.013,24,1.212,25,0.408,26,0.985,31,1.325,34,2.425,36,1.385,37,1.05,38,0.316,39,1.746,40,0.379,42,0.302,43,0.88,52,0.059,53,0.099,55,1.377,64,1.693,65,1.869,66,1.385,68,1.746,72,0.845,73,1.297,77,0.005,78,0.005,83,1.841,86,1.332,90,2.133,91,2.08,92,1.192,128,1.104,149,0.727,195,0.572,202,2.274,217,1.697,229,0.957,251,1.104,269,1.503,272,2.004,295,1.935,307,1.958,318,1.412,320,2.781,322,3.096,348,1.809,351,1.165,371,2.972,374,2.781,375,1.315,376,2.209,378,2.738,379,2.781,380,3.495,383,0.677,384,1.104,385,0.957,386,1.697,387,1.697,388,1.315,396,1.411,397,3.096,398,1.234,400,3.329,401,2.663,413,1.165,426,1.315,448,2.425,544,1.315,545,1.503,552,3.167,591,3.721,592,2.781,594,2.781,597,1.809,600,2.781,611,1.534,612,1.534,613,1.534,614,1.412,615,1.534,616,1.697,621,1.697,626,2.514,628,1.534,630,2.514,632,1.412,675,3.884,678,2.781,680,2.781,682,1.534,683,3.884,685,2.781,687,2.781,740,3.167,771,1.534,789,2.314,1053,1.412,1081,3.534,1105,3.534,1108,1.697,1151,4.846,1275,1.697,1371,4.087,1373,2.781,1378,1.697,1398,3.721,1417,2.781,1419,1.697,1422,1.697,1423,1.697,1424,1.697,1425,1.697,1428,1.697,1429,5.552,1430,3.187,1431,4.683,1432,1.944,1433,1.944,1434,1.944,1435,1.944,1436,1.944,1437,4.049,1438,1.944,1439,3.187,1440,3.187,1441,1.944,1442,1.944,1443,3.187,1444,1.944,1445,3.187,1446,1.944,1447,1.944,1448,3.187,1449,1.944,1450,1.944,1451,1.944,1452,1.944,1453,1.944,1454,1.944,1455,1.944,1456,1.944,1457,1.944,1458,1.944,1459,1.944,1460,1.944]],["title/coverage.html",[1461,4.432]],["body/coverage.html",[0,2.339,1,1.179,5,0.053,6,1.43,7,1.25,8,1.718,23,0.013,25,0.131,40,0.917,50,1.553,53,0.184,65,0.663,77,0.005,78,0.005,79,2.549,80,1.063,82,1.332,83,1.216,84,1.718,92,2.3,93,1.43,95,1.718,96,1.25,105,0.929,122,1.553,133,1.43,135,1.43,137,1.553,140,1.586,141,1.828,145,1.063,165,1.553,196,1.718,197,1.43,198,1.718,200,1.014,205,1.25,211,1.25,218,1.484,219,1.25,244,1.118,245,1.118,246,1.25,247,1.25,248,1.25,250,1.43,253,1.332,267,1.718,269,0.929,281,1.718,289,1.553,295,0.686,322,1.929,328,1.718,345,1.553,347,2.967,348,2.32,349,2.967,371,1.25,372,2.967,373,2.54,380,1.332,397,1.179,398,1.25,399,1.718,400,2.32,401,1.014,416,1.179,417,2.54,418,3.191,438,2.012,500,2.178,502,1.25,503,1.553,526,2.681,527,2.54,530,1.718,536,1.25,537,1.718,538,1.718,540,1.118,565,1.718,591,1.25,593,1.25,624,1.553,625,1.718,659,1.718,660,1.718,675,1.25,676,2.54,677,1.718,683,1.25,684,1.718,692,1.553,693,2.54,722,1.929,723,3.191,730,1.118,731,1.25,733,1.739,735,2.54,740,1.332,741,2.54,742,1.718,747,1.553,748,1.718,751,1.718,752,1.718,757,1.332,764,1.718,765,1.718,796,1.718,797,2.54,799,1.718,800,1.718,801,1.718,836,1.718,857,2.563,858,1.118,859,1.718,882,1.43,883,1.718,886,1.25,898,1.718,899,1.718,907,1.332,908,1.718,921,1.25,924,1.718,959,1.718,968,1.332,969,1.718,976,2.044,977,2.54,978,1.718,980,1.718,1015,1.43,1016,1.718,1047,1.25,1054,1.553,1055,1.553,1080,1.718,1129,1.718,1132,1.718,1137,1.718,1142,1.718,1143,1.718,1161,1.718,1179,1.43,1180,1.718,1203,1.718,1223,1.179,1224,1.718,1240,1.332,1241,1.718,1242,1.718,1243,1.25,1244,1.718,1245,1.718,1277,1.43,1278,1.718,1290,1.25,1310,1.718,1327,1.718,1332,1.718,1346,1.43,1347,1.718,1398,1.25,1399,1.718,1400,1.718,1428,1.718,1461,1.553,1462,1.718,1463,1.969,1464,1.969,1465,8.427,1466,7.71,1467,1.718,1468,4.719,1469,1.718,1470,6.365,1471,7.573,1472,1.718,1473,1.718,1474,2.81,1475,6.706,1476,5.586,1477,5.895,1478,1.969,1479,1.969,1480,1.969,1481,1.969,1482,1.718,1483,1.969,1484,1.969,1485,1.969,1486,4.085,1487,1.969,1488,1.969,1489,1.718,1490,1.553,1491,1.718,1492,1.718,1493,1.718,1494,1.718,1495,1.718,1496,4.118,1497,4.118,1498,4.118,1499,1.718,1500,1.718,1501,1.718,1502,1.718,1503,1.969]],["title/dependencies.html",[102,2.336,1504,3.004]],["body/dependencies.html",[23,0.013,42,0.76,43,2.214,44,2.93,46,3.553,49,3.308,53,0.153,77,0.009,78,0.009,102,2.308,126,3.308,149,1.83,200,2.52,338,3.859,348,2.778,368,1.705,383,1.705,412,1.897,414,2.642,773,4.269,811,3.553,815,3.859,849,4.269,1255,3.553,1256,4.269,1259,4.269,1289,4.269,1319,4.269,1505,4.892,1506,4.892,1507,4.892,1508,7.35,1509,4.892,1510,4.892,1511,4.892,1512,4.892,1513,4.892,1514,4.892,1515,4.892,1516,4.892,1517,4.892,1518,4.892,1519,4.892,1520,4.892,1521,4.892,1522,4.892,1523,4.892,1524,4.892,1525,4.892,1526,4.892,1527,4.892,1528,4.892,1529,4.892,1530,4.892,1531,4.892,1532,4.892,1533,4.892]],["title/miscellaneous/enumerations.html",[1534,2.184,1535,4.323]],["body/miscellaneous/enumerations.html",[9,0.322,23,0.013,77,0.009,78,0.009,218,2.249,223,3.602,292,3.311,422,5.644,434,4.744,448,4.285,449,6.243,453,6.243,479,5.644,480,6.243,481,6.243,482,6.243,511,6.243,534,6.078,1234,4.744,1297,3.979,1391,3.979,1534,2.893,1535,3.979,1536,4.559,1537,7.154,1538,4.559,1539,6.013,1540,6.013,1541,6.013,1542,4.559,1543,4.559,1544,4.559,1545,6.013,1546,4.559,1547,4.559]],["title/miscellaneous/functions.html",[1534,2.184,1548,4.323]],["body/miscellaneous/functions.html",[9,0.38,22,1.51,23,0.012,24,1.322,25,0.446,26,1.075,31,1.643,32,3.607,77,0.01,78,0.01,105,3.429,128,3.792,771,4.236,819,4.686,1467,4.686,1469,5.828,1482,4.686,1489,4.686,1490,5.268,1491,5.828,1492,6.343,1493,4.686,1494,5.828,1495,5.828,1534,3.408,1548,4.686,1549,5.37,1550,5.37,1551,5.37,1552,5.37,1553,5.37,1554,6.678,1555,5.37,1556,5.37]],["title/index.html",[9,0.243,1557,3.442,1558,3.442]],["body/index.html",[4,0.088,23,0.012,77,0.007,78,0.007,121,3.383,312,2.842,315,4.646,376,1.536,396,1.135,430,3.924,446,2.842,533,2.569,551,2.365,553,2.569,562,2.569,609,2.842,614,3.456,789,2.365,811,5.282,816,2.842,940,2.842,967,2.569,1038,2.842,1101,2.569,1255,3.456,1298,2.842,1384,5.996,1461,2.569,1462,4.153,1490,4.435,1559,3.257,1560,3.257,1561,5.622,1562,4.758,1563,3.257,1564,3.257,1565,3.257,1566,4.758,1567,3.257,1568,3.257,1569,6.184,1570,3.257,1571,7.274,1572,3.257,1573,7.095,1574,3.257,1575,3.257,1576,4.758,1577,3.257,1578,4.758,1579,3.257,1580,5.622,1581,3.257,1582,4.758,1583,3.257,1584,3.257,1585,3.257,1586,3.257,1587,3.257,1588,6.184,1589,4.758,1590,3.257,1591,3.257,1592,4.758,1593,6.184,1594,4.758,1595,3.257,1596,4.758,1597,6.87,1598,6.184,1599,3.257,1600,3.257,1601,3.257,1602,3.257,1603,3.257,1604,6.184,1605,3.257,1606,3.257,1607,3.257,1608,3.257,1609,4.758,1610,3.257,1611,3.257,1612,3.257,1613,3.257,1614,3.257,1615,4.758,1616,3.257,1617,3.257,1618,3.257,1619,4.758,1620,3.257,1621,3.257,1622,5.397,1623,3.257,1624,3.257,1625,3.257,1626,3.257,1627,3.257,1628,3.257,1629,3.257,1630,3.257,1631,4.758,1632,3.257,1633,3.257,1634,3.257,1635,3.257,1636,5.622,1637,3.257,1638,3.257,1639,3.257,1640,3.257,1641,4.758,1642,3.257,1643,3.257,1644,3.257,1645,3.257,1646,4.758,1647,3.257,1648,3.257,1649,3.257,1650,4.758,1651,4.758,1652,3.257,1653,3.257,1654,3.257,1655,3.257,1656,3.257,1657,3.257,1658,3.257,1659,3.257,1660,3.257,1661,3.257,1662,3.257,1663,3.257,1664,3.257,1665,3.257,1666,3.257,1667,2.842]],["title/modules.html",[101,2.65]],["body/modules.html",[23,0.01,77,0.01,78,0.01,100,4.012,101,2.606,111,3.506,112,3.736,113,3.736,114,3.506,115,3.736,116,3.506,117,3.736,118,3.309,1622,7.225,1668,8.279,1669,8.279,1670,8.279]],["title/overview.html",[1671,4.903]],["body/overview.html",[2,2.392,23,0.013,77,0.007,78,0.007,81,2.05,94,1.22,96,3.422,99,1.094,100,5.853,101,1.43,102,1.43,103,1.562,104,1.562,105,1.43,106,1.562,107,1.562,108,2.646,109,2.646,110,2.646,111,4.97,112,4.528,113,4.528,114,4.401,115,5.205,116,4.401,117,4.69,118,4.754,119,2.325,120,1.562,121,1.493,151,1.816,195,0.892,219,4.401,241,2.646,242,2.646,243,2.646,244,3.392,245,3.062,246,3.422,247,3.422,248,3.422,269,3.271,346,0.986,371,3.422,470,2.392,523,2.392,536,3.422,540,3.938,591,3.422,593,4.401,675,3.422,683,3.422,805,2.646,806,2.646,807,2.646,886,4.401,891,2.646,892,2.646,893,2.646,918,2.646,919,2.646,920,2.646,921,4.401,1047,3.422,1070,2.646,1071,2.646,1196,2.646,1197,2.646,1198,2.646,1243,3.422,1290,3.422,1302,2.646,1303,2.646,1398,3.422,1412,2.646,1413,2.646,1414,2.646,1671,2.646,1672,3.032,1673,3.032,1674,3.032,1675,3.032,1676,3.032]],["title/properties.html",[85,1.196,1504,3.004]],["body/properties.html",[23,0.012,77,0.011,78,0.011,85,1.525,396,2.201,551,4.588,1667,5.514,1677,6.318,1678,6.318,1679,6.318]],["title/miscellaneous/variables.html",[1534,2.184,1680,4.323]],["body/miscellaneous/variables.html",[9,0.272,23,0.013,25,0.484,28,2.79,34,2.301,36,1.336,37,2.075,50,4.224,59,2.423,71,3.353,73,0.898,77,0.008,78,0.008,80,2.892,83,1.718,86,2.577,122,3.031,165,4.224,166,3.353,183,3.691,200,2.758,223,3.207,236,4.622,289,4.224,299,4.673,350,3.691,352,3.993,441,5.259,534,5.604,928,3.353,1054,4.224,1055,3.031,1293,5.817,1472,3.353,1473,4.673,1474,3.353,1496,3.353,1497,6.117,1498,6.117,1499,4.673,1500,4.673,1501,4.673,1502,4.673,1534,2.438,1680,3.353,1681,3.842,1682,5.354,1683,6.666,1684,3.842,1685,3.842,1686,3.842,1687,3.842,1688,3.842,1689,3.842,1690,3.842,1691,3.842,1692,3.842,1693,3.842,1694,6.163,1695,6.666,1696,6.163,1697,6.163]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1465,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1678,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1520,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1531,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1533,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1519,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1466,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1483,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1475,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1471,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1476,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1477,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1486,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":455,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":522,"title":{"classes/CreatePostMetaOptionsDto-1.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto-1.html":{},"classes/PatchUserDto-1.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1506,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":1516,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1481,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1485,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":961,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1508,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1514,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1510,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":989,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["10})@apiquery({name",{"_index":1368,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":746,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":749,"title":{},"body":{"classes/GetUsersParamsDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":744,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["128",{"_index":1229,"title":{},"body":{"entities/Upload.html":{}}}],["16",{"_index":1484,"title":{},"body":{"coverage.html":{}}}],["16t07:46:32+0000",{"_index":521,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isdate()@isoptional",{"_index":456,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1524,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":523,"title":{"classes/CreatePostMetaOptionsDto-2.html":{}},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["2.0.2",{"_index":1507,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":1512,"title":{},"body":{"dependencies.html":{}}}],["2.1643.0",{"_index":1517,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1479,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1040,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["2024",{"_index":454,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["21",{"_index":1675,"title":{},"body":{"overview.html":{}}}],["24",{"_index":1674,"title":{},"body":{"overview.html":{}}}],["2525",{"_index":823,"title":{},"body":{"modules/MailModule.html":{}}}],["256",{"_index":998,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.1.10",{"_index":1521,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1509,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1480,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1676,"title":{},"body":{"overview.html":{}}}],["4/9",{"_index":1488,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1487,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1673,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1518,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":1005,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6.9.13",{"_index":1526,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1478,"title":{},"body":{"coverage.html":{}}}],["7.3.0",{"_index":1513,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1532,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1672,"title":{},"body":{"overview.html":{}}}],["8.11.5",{"_index":1528,"title":{},"body":{"dependencies.html":{}}}],["88",{"_index":1451,"title":{},"body":{"injectables/UsersService.html":{}}}],["9",{"_index":470,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"overview.html":{}}}],["9.11.0",{"_index":1522,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1333,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["above",{"_index":1147,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["abstract",{"_index":802,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["acces",{"_index":317,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["access",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["accesstoken",{"_index":313,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["activeuser",{"_index":1054,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":80,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":832,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":1175,"title":{},"body":{"entities/Tag.html":{}}}],["address",{"_index":89,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["allowing",{"_index":1610,"title":{},"body":{"index.html":{}}}],["already",{"_index":617,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["amazing",{"_index":1656,"title":{},"body":{"index.html":{}}}],["api",{"_index":1371,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["apiheaders",{"_index":1285,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apioperation",{"_index":1049,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1023,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":411,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@matches(/^[a",{"_index":575,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":571,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":466,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":445,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":488,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":402,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{}}}],["apipropertyoptional",{"_index":491,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":573,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":567,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":569,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{}}}],["apipropertyoptional({type",{"_index":440,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":1380,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":1050,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":1051,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":1058,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1382,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":673,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":1555,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["app_interceptor",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":93,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcreate",{"_index":1469,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["appcreate(app",{"_index":1553,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appended",{"_index":851,"title":{},"body":{"injectables/MailService.html":{}}}],["application",{"_index":1384,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1363,"title":{},"body":{"controllers/UsersController.html":{}}}],["application.helper.ts",{"_index":1491,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":1566,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":100,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":96,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":403,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["assign",{"_index":1123,"title":{},"body":{"injectables/PostsService.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":708,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["auth(authtype.none)@httpcode(httpstatus.ok)@post('refresh",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":753,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guards/access",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/bcrypt.provider",{"_index":596,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["auth_type_key",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":197,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":755,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":762,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":756,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":754,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":752,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:18",{"_index":758,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":765,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:19",{"_index":768,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:36",{"_index":770,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:42",{"_index":769,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":133,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":303,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":111,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":551,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":554,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["authorised",{"_index":323,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authorization",{"_index":1296,"title":{},"body":{"controllers/UploadsController.html":{}}}],["authservice",{"_index":219,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":298,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":282,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":299,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":304,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":852,"title":{},"body":{"injectables/MailService.html":{}}}],["available",{"_index":853,"title":{},"body":{"injectables/MailService.html":{}}}],["await",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1255,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"dependencies.html":{},"index.html":{}}}],["aws.provider",{"_index":1307,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["aws.provider.ts",{"_index":1245,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:11",{"_index":1248,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:14",{"_index":1251,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:33",{"_index":1253,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["backers",{"_index":1657,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":544,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('mime",{"_index":1324,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('please",{"_index":559,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["badrequestexception('the",{"_index":1108,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":553,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":942,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":338,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":344,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":342,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":343,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":253,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1297,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["blog",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":1649,"title":{},"body":{"index.html":{}}}],["body",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreatePostProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1153,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapnestapplication",{"_index":1492,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1670,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1668,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1261,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["buffer",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1562,"title":{},"body":{"index.html":{}}}],["calculate",{"_index":947,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["callhandler",{"_index":666,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["care",{"_index":1149,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["cascade",{"_index":881,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":872,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["catch((err",{"_index":326,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":1452,"title":{},"body":{"injectables/UsersService.html":{}}}],["changed",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["changes",{"_index":1408,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["channel",{"_index":1624,"title":{},"body":{"index.html":{}}}],["character",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":315,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["class",{"_index":53,"title":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":346,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1377,"title":{},"body":{"controllers/UsersController.html":{}}}],["clicks",{"_index":1609,"title":{},"body":{"index.html":{}}}],["clientid",{"_index":774,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":776,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cloud",{"_index":1595,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":805,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":807,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":806,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":891,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":893,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":892,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":918,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":919,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":920,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1070,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1072,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1071,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1196,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1197,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1198,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":1302,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":1303,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1412,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1413,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1414,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collect",{"_index":639,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["column",{"_index":876,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["column({type",{"_index":866,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["come",{"_index":1616,"title":{},"body":{"index.html":{}}}],["commit",{"_index":646,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["common/interceptors/data",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1154,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":329,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":331,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":653,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["completeuser",{"_index":1499,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["compodoc/compodoc",{"_index":1505,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":819,"title":{},"body":{"modules/MailModule.html":{},"miscellaneous/functions.html":{}}}],["config.get('appconfig.mailhost",{"_index":821,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtppassword",{"_index":826,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtpusername",{"_index":824,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["config/enviroment.validation",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["config/profile.config",{"_index":1425,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1427,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["configservice.get('database.autoloadentities",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UsersService.html":{}}}],["confirmation",{"_index":1127,"title":{},"body":{"injectables/PostsService.html":{}}}],["conflictexception",{"_index":382,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":652,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception(error",{"_index":395,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UploadsService.html":{}}}],["connect",{"_index":1404,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connecting",{"_index":615,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["connection",{"_index":657,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["console.log(user",{"_index":1064,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":310,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(request",{"_index":935,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(configservice",{"_index":662,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UploadToAwsProvider.html":{}}}],["constructor(datasource",{"_index":627,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(mailerservice",{"_index":838,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(metaoptionsrepository",{"_index":900,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(postsrepository",{"_index":1083,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["constructor(reflector",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":926,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":1206,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadtoawsprovider",{"_index":1311,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(usersrepository",{"_index":375,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["content",{"_index":419,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UploadsController.html":{}}}],["content'})@isstring()@isoptional",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["contenttype",{"_index":1265,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":302,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":301,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":92,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["controller('auth",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":761,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":889,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":1057,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1189,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('uploads",{"_index":1292,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controller('users",{"_index":1381,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["correct",{"_index":1104,"title":{},"body":{"injectables/PostsService.html":{}}}],["courses",{"_index":1630,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1461,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":1190,"title":{},"body":{"controllers/TagsController.html":{}}}],["create(createpostdto",{"_index":542,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":884,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":1182,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["created",{"_index":1027,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdate",{"_index":860,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["createdatecolumn",{"_index":862,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["creategoogleuser",{"_index":374,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuser(googleuser",{"_index":379,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuserdto",{"_index":345,"title":{"classes/CreateGoogleUserDto.html":{}},"body":{"classes/CreateGoogleUserDto.html":{},"coverage.html":{}}}],["creategoogleuserprovider",{"_index":371,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creategooogleuserprovider",{"_index":1431,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmany",{"_index":626,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createmanyusersdto",{"_index":630,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":1348,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1395,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1352,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":397,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUsersManyProvoder.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":640,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["createparamdecorator",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1018,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":1022,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":416,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.tags.length",{"_index":557,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostmetaoptionsdto",{"_index":438,"title":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createpostprovider",{"_index":536,"title":{"injectables/CreatePostProvider.html":{}},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":1024,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtagdto",{"_index":502,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":592,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":594,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":401,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":605,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":591,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1349,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":1393,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":1355,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusersmanyprovoder",{"_index":624,"title":{"injectables/CreateUsersManyProvoder.html":{}},"body":{"injectables/CreateUsersManyProvoder.html":{},"coverage.html":{}}}],["creating",{"_index":1086,"title":{},"body":{"injectables/PostsService.html":{}}}],["ctx",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":913,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":335,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{}}}],["data.interface",{"_index":549,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["data.interface.ts",{"_index":84,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["data.ts",{"_index":1498,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["database.helper.ts",{"_index":1494,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["databaseconfig",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":135,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":628,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["datbase",{"_index":621,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":452,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["date().gettime().tostring().trim",{"_index":1274,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["datetime",{"_index":1013,"title":{},"body":{"entities/Post.html":{}}}],["decalre",{"_index":309,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["declarations",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":306,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["decorartor",{"_index":1176,"title":{},"body":{"entities/Tag.html":{}}}],["decorator",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/Upload.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["deeper",{"_index":1626,"title":{},"body":{"index.html":{}}}],["deeppartial",{"_index":505,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["default",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/MailService.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"entities/Upload.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":284,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaults",{"_index":827,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultvaluepipe",{"_index":1376,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1388,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1386,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":1031,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete('soft",{"_index":1186,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":1192,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":1087,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":1128,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":1162,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":877,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["deletepost",{"_index":1019,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":1068,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1030,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleting",{"_index":1125,"title":{},"body":{"injectables/PostsService.html":{}}}],["dependencies",{"_index":102,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1588,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1599,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1592,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1608,"title":{},"body":{"index.html":{}}}],["description",{"_index":396,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":607,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UploadsService.html":{}}}],["development",{"_index":1574,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1637,"title":{},"body":{"index.html":{}}}],["dir",{"_index":829,"title":{},"body":{"modules/MailModule.html":{}}}],["discord",{"_index":1623,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1625,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1462,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":480,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dropdatabase",{"_index":1495,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dropdatabase(config",{"_index":1556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto.ts",{"_index":978,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["dtos/create",{"_index":545,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1053,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/google",{"_index":760,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/pagination",{"_index":934,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":1052,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/refresh",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin.dto",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["duplicate",{"_index":564,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["e2e",{"_index":1583,"title":{},"body":{"index.html":{}}}],["each",{"_index":415,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":983,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1563,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1591,"title":{},"body":{"index.html":{}}}],["eight",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejs",{"_index":849,"title":{},"body":{"injectables/MailService.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":810,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":86,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email.provider",{"_index":1419,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":684,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:11",{"_index":686,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:20",{"_index":688,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["enables",{"_index":1177,"title":{},"body":{"entities/Tag.html":{}}}],["encrypted",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddata",{"_index":736,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto-1.html":{}}}],["enddate",{"_index":724,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["endpoint",{"_index":1429,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":562,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["enterprise",{"_index":1640,"title":{},"body":{"index.html":{}}}],["entities",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":857,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":966,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["enum",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Upload.html":{}}}],["enumerations",{"_index":1535,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/file",{"_index":1237,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["enums/poststatus.enum",{"_index":506,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":507,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["enviromentvalidation",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":1102,"title":{},"body":{"injectables/PostsService.html":{}}}],["err",{"_index":327,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["error",{"_index":307,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["errors",{"_index":1406,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["even",{"_index":321,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["example",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":608,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["exclude",{"_index":1345,"title":{},"body":{"entities/User.html":{}}}],["execution",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1105,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1039,"title":{},"body":{"controllers/PostsController.html":{}}}],["existinguser",{"_index":601,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":602,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["experience",{"_index":1628,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":700,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1250,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["extends",{"_index":734,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{}}}],["extension",{"_index":850,"title":{},"body":{"injectables/MailService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["extracttokenfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["faker.internet.email",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.person.firstname",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.person.lastname",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":442,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":787,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fast",{"_index":1602,"title":{},"body":{"index.html":{}}}],["featured",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimage",{"_index":566,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":420,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1612,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":690,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["fetched",{"_index":1364,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1360,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1604,"title":{},"body":{"index.html":{}}}],["field",{"_index":1293,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1263,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.interface",{"_index":1316,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.interface.ts",{"_index":1242,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["file.mimetype",{"_index":1266,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["file.originalname.split('.')[0",{"_index":1269,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":1329,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fileinterceptor",{"_index":1288,"title":{},"body":{"controllers/UploadsController.html":{}}}],["filename",{"_index":1275,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["filetypes",{"_index":1234,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":1239,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["fileupload",{"_index":1246,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload(file",{"_index":1249,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["finally",{"_index":655,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["finalresponse",{"_index":953,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":552,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1081,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":1436,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(postquery",{"_index":1089,"title":{},"body":{"injectables/PostsService.html":{}}}],["findinbyemail",{"_index":1150,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["findmultipletags",{"_index":1204,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":1211,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":685,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":687,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid",{"_index":678,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid(googleid",{"_index":680,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleidprovider",{"_index":675,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyid",{"_index":1430,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1443,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyemailprovider",{"_index":683,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finds",{"_index":1457,"title":{},"body":{"injectables/UsersService.html":{}}}],["fired",{"_index":314,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":915,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":350,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["focus",{"_index":1611,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1643,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":689,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{}}}],["framework",{"_index":1561,"title":{},"body":{"index.html":{}}}],["full",{"_index":1639,"title":{},"body":{"index.html":{}}}],["function",{"_index":1468,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1548,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1607,"title":{},"body":{"index.html":{}}}],["generate",{"_index":340,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["generatefilename",{"_index":1247,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(file",{"_index":1252,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetokens",{"_index":694,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":697,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":245,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1383,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":1359,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":1035,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts",{"_index":1020,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":1033,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbasedto",{"_index":722,"title":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"coverage.html":{}}}],["getpostsdto",{"_index":733,"title":{"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getting",{"_index":1557,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":1373,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":1350,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":1358,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":740,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getusersparamsdto",{"_index":747,"title":{"classes/GetUsersParamsDto.html":{}},"body":{"classes/GetUsersParamsDto.html":{},"coverage.html":{}}}],["given_name",{"_index":786,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":809,"title":{},"body":{"modules/MailModule.html":{}}}],["google",{"_index":348,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":250,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":246,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":351,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["googletokendto",{"_index":757,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":785,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":380,"title":{"interfaces/GoogleUser.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["googleuser.email",{"_index":393,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["googleuser.firstname",{"_index":390,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["googleuser.googleid",{"_index":392,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["googleuser.lastname",{"_index":391,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["graph",{"_index":1633,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1653,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handle",{"_index":616,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":1440,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":1627,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1617,"title":{},"body":{"index.html":{}}}],["hash",{"_index":1155,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":339,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":244,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":330,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":336,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["help",{"_index":1631,"title":{},"body":{"index.html":{}}}],["here",{"_index":312,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["host",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3000",{"_index":856,"title":{},"body":{"injectables/MailService.html":{}}}],["httpcode",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1445,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://${this.configservice.get('appconfig.awscloudfronturl')}/${path",{"_index":1328,"title":{},"body":{"injectables/UploadsService.html":{}}}],["https://nestjs.com",{"_index":1664,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":1173,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":462,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1448,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":91,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id.provider",{"_index":1423,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":677,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:16",{"_index":681,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":679,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["identifier",{"_index":1463,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":485,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["idtoken",{"_index":784,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["image",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["image/gif",{"_index":1320,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpeg",{"_index":1321,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpg",{"_index":1322,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/png'].includes",{"_index":1323,"title":{},"body":{"injectables/UploadsService.html":{}}}],["implements",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["importing",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":1219,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.provider",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1143,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:14",{"_index":1144,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:31",{"_index":1145,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1554,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":609,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["infrastructure",{"_index":1614,"title":{},"body":{"index.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":195,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":385,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":904,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":550,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":1215,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(upload",{"_index":1317,"title":{},"body":{"injectables/UploadsService.html":{}}}],["injectrepository(user",{"_index":388,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["inlinecssenabled",{"_index":833,"title":{},"body":{"modules/MailModule.html":{}}}],["install",{"_index":1606,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1572,"title":{},"body":{"index.html":{}}}],["instance",{"_index":308,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["instance.canactivate(context",{"_index":325,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instantiated",{"_index":1411,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["interact",{"_index":1634,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":661,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":664,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":79,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"coverage.html":{}}}],["interfaces",{"_index":81,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"overview.html":{}}}],["interfaces/active",{"_index":706,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["interfaces/google",{"_index":386,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["interfaces/paginated.interface",{"_index":933,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interfaces/upload",{"_index":1315,"title":{},"body":{"injectables/UploadsService.html":{}}}],["intersectiontype",{"_index":729,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{}}}],["isarray",{"_index":409,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isdate",{"_index":492,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{}}}],["isdate()@isoptional",{"_index":726,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":361,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1138,"title":{},"body":{"classes/SignInDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":353,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum",{"_index":493,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":1152,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":495,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":494,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":496,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":362,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":528,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":1130,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isoptional",{"_index":363,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@isdate",{"_index":737,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{}}}],["isoptional()@isjson",{"_index":464,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":962,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":965,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":364,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isstring()@isnotempty",{"_index":357,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostMetaOptionsDto-2.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":355,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":578,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":359,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["issuer",{"_index":710,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isurl",{"_index":497,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":405,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":911,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1646,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1648,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1523,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":816,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":830,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":878,"title":{},"body":{"entities/MetaOption.html":{}}}],["jointable",{"_index":1007,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":459,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwtconfig",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"modules/UsersModule.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtmodule",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["kamil",{"_index":1661,"title":{},"body":{"index.html":{}}}],["key",{"_index":533,"title":{},"body":{"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/UploadToAwsProvider.html":{},"index.html":{}}}],["keyof",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":917,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":352,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["later",{"_index":318,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":1620,"title":{},"body":{"index.html":{}}}],["legend",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":988,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["lets",{"_index":1407,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["letter",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":473,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["library",{"_index":773,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1667,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1651,"title":{},"body":{"index.html":{}}}],["limit",{"_index":960,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["limt",{"_index":1437,"title":{},"body":{"injectables/UsersService.html":{}}}],["linenumber",{"_index":1450,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":1645,"title":{},"body":{"index.html":{}}}],["links",{"_index":909,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1361,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":910,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3000/posts/:userid",{"_index":1059,"title":{},"body":{"controllers/PostsController.html":{}}}],["loginticket",{"_index":782,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":788,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":855,"title":{},"body":{"injectables/MailService.html":{}}}],["looking",{"_index":1594,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1642,"title":{},"body":{"index.html":{}}}],["made",{"_index":1409,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["mail/mail.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":814,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":818,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":839,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":112,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":593,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["makes",{"_index":1600,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1613,"title":{},"body":{"index.html":{}}}],["manually",{"_index":1410,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many",{"_index":398,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUsersManyProvoder.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["many.provider",{"_index":1422,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":1400,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:12",{"_index":1401,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:20",{"_index":1402,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provoder.ts",{"_index":625,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"coverage.html":{}}}],["many.provoder.ts:12",{"_index":629,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["many.provoder.ts:15",{"_index":631,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["manytomany",{"_index":1008,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":1001,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":1009,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":981,"title":{},"body":{"entities/Post.html":{}}}],["map",{"_index":669,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":672,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":1160,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["matches",{"_index":365,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":950,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1597,"title":{},"body":{"index.html":{}}}],["max",{"_index":498,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength",{"_index":366,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{}}}],["maxlength(1024",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":370,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":471,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":1530,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":858,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptions",{"_index":421,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":992,"title":{},"body":{"entities/Post.html":{}}}],["metaoptions.ts",{"_index":530,"title":{},"body":{"classes/CreatePostMetaOptionsDto-1.html":{},"coverage.html":{}}}],["metaoptions.ts:8",{"_index":532,"title":{},"body":{"classes/CreatePostMetaOptionsDto-1.html":{}}}],["metaoptionscontroller",{"_index":882,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":113,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":902,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":886,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":1151,"title":{},"body":{"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["mime",{"_index":1225,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["min",{"_index":499,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minimum",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":367,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["minlength(3",{"_index":369,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":508,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["minlength(8)@isnotempty",{"_index":1140,"title":{},"body":{"classes/SignInDto.html":{}}}],["miscellaneous",{"_index":1534,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misingfirstname",{"_index":1500,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["missingemail",{"_index":1501,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["missingpassword",{"_index":1502,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1650,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1576,"title":{},"body":{"index.html":{}}}],["module",{"_index":99,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":101,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":815,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":812,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":613,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1593,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1455,"title":{},"body":{"injectables/UsersService.html":{}}}],["multipart/form",{"_index":1295,"title":{},"body":{"controllers/UploadsController.html":{}}}],["multiple",{"_index":319,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["mysql",{"_index":1014,"title":{},"body":{"entities/Post.html":{}}}],["myśliwiec",{"_index":1662,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name.replace(/\\s/g",{"_index":1271,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["need",{"_index":1101,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["needs",{"_index":971,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":1490,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestframework",{"_index":1666,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":668,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":811,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1511,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1289,"title":{},"body":{"controllers/UploadsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":412,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newurl",{"_index":945,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":957,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":956,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${previouspage",{"_index":958,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":955,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":954,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":618,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["newusers",{"_index":633,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":644,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":665,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":671,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":951,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1560,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["nodemailer",{"_index":1525,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1391,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1571,"title":{},"body":{"index.html":{}}}],["null",{"_index":439,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{}}}],["nullable",{"_index":867,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["number",{"_index":90,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numbers",{"_index":948,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["oauth2client",{"_index":772,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":779,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":766,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":441,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"miscellaneous/variables.html":{}}}],["object'})@isstring()@isnotempty",{"_index":531,"title":{},"body":{"classes/CreatePostMetaOptionsDto-1.html":{}}}],["objectliteral",{"_index":932,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occured",{"_index":1453,"title":{},"body":{"injectables/UsersService.html":{}}}],["offer",{"_index":1647,"title":{},"body":{"index.html":{}}}],["official",{"_index":1598,"title":{},"body":{"index.html":{}}}],["onbaording",{"_index":845,"title":{},"body":{"injectables/MailService.html":{}}}],["ondelete",{"_index":871,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":322,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1344,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1341,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":879,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":869,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":767,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1652,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":895,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":859,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:17",{"_index":865,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:23",{"_index":868,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":863,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:29",{"_index":875,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:35",{"_index":873,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":834,"title":{},"body":{"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":896,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":883,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:15",{"_index":885,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":501,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["options.dto.ts",{"_index":527,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":529,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-2.html":{}}}],["options.dto.ts:9",{"_index":535,"title":{},"body":{"classes/CreatePostMetaOptionsDto-2.html":{}}}],["options.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":894,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":888,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":899,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:17",{"_index":903,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":901,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":500,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":898,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["override",{"_index":844,"title":{},"body":{"injectables/MailService.html":{}}}],["overview",{"_index":1671,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1504,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":448,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":907,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":925,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":929,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":114,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":921,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":931,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":939,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":938,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":730,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":1043,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":1060,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1378,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":742,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:14",{"_index":745,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["params.dto.ts",{"_index":748,"title":{},"body":{"classes/GetUsersParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:13",{"_index":750,"title":{},"body":{"classes/GetUsersParamsDto.html":{}}}],["parseintpipe",{"_index":1044,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1638,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":974,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{}}}],["partialtype(createpostdto",{"_index":970,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":979,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{}}}],["pass",{"_index":825,"title":{},"body":{"modules/MailModule.html":{}}}],["passes",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password123",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":1045,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":968,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":1112,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":1120,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":1107,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":1116,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":1122,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":1118,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":1114,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":1103,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":1110,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":1351,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1397,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1374,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":976,"title":{"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{}},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":817,"title":{},"body":{"modules/MailModule.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["path.extname(file.originalname",{"_index":1273,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["per",{"_index":1367,"title":{},"body":{"controllers/UsersController.html":{}}}],["permanently",{"_index":1454,"title":{},"body":{"injectables/UsersService.html":{}}}],["permissions",{"_index":316,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["person",{"_index":463,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1527,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1596,"title":{},"body":{"index.html":{}}}],["please",{"_index":614,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["port",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["position",{"_index":1369,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":446,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":218,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":1025,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":468,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":489,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('create",{"_index":1353,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('file",{"_index":1299,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post('refresh",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useinterceptors(classserializerinterceptor)@auth(authtype.none",{"_index":1356,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":1342,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":1111,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":546,"title":{},"body":{"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":418,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":728,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["post.dto.ts:102",{"_index":457,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:111",{"_index":487,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":973,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:130",{"_index":444,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:14",{"_index":727,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["post.dto.ts:38",{"_index":490,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":451,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":478,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:67",{"_index":484,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:75",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:85",{"_index":465,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:94",{"_index":437,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":547,"title":{},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":1119,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":870,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":1115,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.provider",{"_index":1078,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.provider.ts",{"_index":538,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["post.provider.ts:16",{"_index":541,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.provider.ts:33",{"_index":543,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.publishon",{"_index":1121,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":1117,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":1113,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1124,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1109,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":1034,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postquery.limit",{"_index":1097,"title":{},"body":{"injectables/PostsService.html":{}}}],["postquery.page",{"_index":1098,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":1017,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":1075,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto.ts",{"_index":735,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto-1.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":738,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{}}}],["posts.dto.ts:8",{"_index":739,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{}}}],["posts/posts.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":1015,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":115,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":539,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["postsservice",{"_index":1047,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":479,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":1012,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":422,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":1011,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":916,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":952,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":864,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":612,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1578,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":1424,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["progressive",{"_index":1559,"title":{},"body":{"index.html":{}}}],["project",{"_index":1569,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":715,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":311,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["promisify",{"_index":1267,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["properties",{"_index":85,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provider",{"_index":600,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":1077,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["providers/find",{"_index":1418,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":759,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":813,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/meta",{"_index":887,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":923,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":1048,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/refresh",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/tags.service",{"_index":1188,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/upload",{"_index":1306,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/uploads.service",{"_index":1291,"title":{},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{}}}],["providers/users",{"_index":1421,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":1379,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":453,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":483,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":423,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":1046,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query'})@apiquery({name",{"_index":1365,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1385,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1387,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":732,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":959,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:14",{"_index":964,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:9",{"_index":963,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":634,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":648,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":636,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":641,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":643,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":658,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":651,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":637,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1621,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1659,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1587,"title":{},"body":{"index.html":{}}}],["real",{"_index":1635,"title":{},"body":{"index.html":{}}}],["record",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UploadsService.html":{}}}],["reference",{"_index":1174,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":1529,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtoken",{"_index":714,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":205,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1135,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(@body",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":247,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["registered",{"_index":1362,"title":{},"body":{"controllers/UsersController.html":{}}}],["release",{"_index":656,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["remove",{"_index":1270,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["repository",{"_index":376,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":949,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":936,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":597,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":638,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception(error",{"_index":623,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["required",{"_index":404,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1603,"title":{},"body":{"index.html":{}}}],["reset",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":324,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["resources",{"_index":1615,"title":{},"body":{"index.html":{}}}],["response",{"_index":1026,"title":{},"body":{"controllers/PostsController.html":{}}}],["response.interceptor",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":660,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:12",{"_index":663,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:15",{"_index":667,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["responsible",{"_index":1439,"title":{},"body":{"injectables/UsersService.html":{}}}],["result",{"_index":642,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1366,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":482,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":650,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["run",{"_index":1573,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1403,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["runs",{"_index":1590,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["ryunner",{"_index":1405,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["s3",{"_index":1254,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["salt",{"_index":341,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":603,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["save",{"_index":606,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadsService.html":{}}}],["scalable",{"_index":1564,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":481,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":424,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sdk",{"_index":1256,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["secret",{"_index":712,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["secure",{"_index":822,"title":{},"body":{"modules/MailModule.html":{}}}],["senduserwelcome",{"_index":837,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome(user",{"_index":841,"title":{},"body":{"injectables/MailService.html":{}}}],["sensitive",{"_index":610,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["sent",{"_index":781,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["serialize",{"_index":458,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":450,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":1298,"title":{},"body":{"controllers/UploadsController.html":{},"index.html":{}}}],["server})@post('file",{"_index":1283,"title":{},"body":{"controllers/UploadsController.html":{}}}],["service",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["setmetadata('authtype",{"_index":1390,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata(auth_type_key",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1570,"title":{},"body":{"index.html":{}}}],["side",{"_index":1565,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":525,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sign",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":211,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1157,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":248,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":695,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":699,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["simple",{"_index":1605,"title":{},"body":{"index.html":{}}}],["size",{"_index":1226,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["skip",{"_index":937,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["slug",{"_index":425,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":472,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["social/google",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["soft",{"_index":1178,"title":{},"body":{"entities/Tag.html":{}}}],["softdelete",{"_index":1181,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":1194,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":1185,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeleted",{"_index":1222,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove",{"_index":1205,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":1213,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":476,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/UploadToAwsProvider.html":{}}}],["spec.sample",{"_index":1497,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["special",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":743,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{}}}],["sponsors",{"_index":1655,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.create.ts",{"_index":1549,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.module.ts",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1536,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file",{"_index":1538,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1550,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":1540,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../poststatus.enum.ts",{"_index":1542,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":1543,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.create.ts",{"_index":1467,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1416,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{}}}],["src/auth/constants/auth.constants",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1472,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":1055,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1474,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1129,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1137,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1141,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1139,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":281,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:26",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":82,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:27",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:31",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":328,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:14",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:8",{"_index":337,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":692,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":598,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":801,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":804,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:7",{"_index":803,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1132,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1142,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":796,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":751,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":764,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":659,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":731,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1094,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":908,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1074,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":922,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1093,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":924,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:11",{"_index":927,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:17",{"_index":930,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module.ts",{"_index":808,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service",{"_index":599,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":836,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/providers/mail.service.ts:6",{"_index":840,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:9",{"_index":842,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1482,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":526,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":417,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":723,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":969,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":1545,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":1546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":1547,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":880,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":980,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:21",{"_index":991,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:28",{"_index":1006,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:36",{"_index":994,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:44",{"_index":999,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:52",{"_index":1000,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:58",{"_index":986,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:64",{"_index":997,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:71",{"_index":990,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:77",{"_index":996,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:83",{"_index":993,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:88",{"_index":984,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:94",{"_index":1004,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":1016,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:34",{"_index":1036,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":1029,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:65",{"_index":1042,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:70",{"_index":1032,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1073,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/create",{"_index":537,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":1080,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:142",{"_index":1088,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:22",{"_index":1084,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:51",{"_index":1085,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:55",{"_index":1090,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:70",{"_index":1092,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":503,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":548,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":1203,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:17",{"_index":1209,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:22",{"_index":1212,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:32",{"_index":1210,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:41",{"_index":1214,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":1207,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":1010,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":1161,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:16",{"_index":1167,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:24",{"_index":1168,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:32",{"_index":1171,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:38",{"_index":1165,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:44",{"_index":1170,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":1166,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":1169,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:60",{"_index":1163,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:63",{"_index":1172,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:67",{"_index":1164,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1180,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:21",{"_index":1183,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":1184,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:31",{"_index":1187,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":1076,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1199,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/uploads/enums/file",{"_index":1544,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/uploads/interfaces/upload",{"_index":1241,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["src/uploads/providers/upload",{"_index":1244,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts",{"_index":1310,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts:15",{"_index":1313,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/uploads.service.ts:31",{"_index":1314,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/upload.entity.ts",{"_index":1224,"title":{},"body":{"entities/Upload.html":{},"coverage.html":{}}}],["src/uploads/upload.entity.ts:15",{"_index":1228,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:22",{"_index":1231,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:29",{"_index":1232,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:37",{"_index":1235,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:44",{"_index":1230,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:51",{"_index":1233,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:54",{"_index":1227,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:57",{"_index":1236,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":1278,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.controller.ts:34",{"_index":1284,"title":{},"body":{"controllers/UploadsController.html":{}}}],["src/uploads/uploads.module.ts",{"_index":1304,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dtos/create",{"_index":347,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":741,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":977,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"coverage.html":{}}}],["src/users/interfaces/google",{"_index":799,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":372,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":676,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":1399,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1428,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:120",{"_index":1434,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:125",{"_index":1441,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:129",{"_index":1442,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:133",{"_index":1433,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:29",{"_index":1432,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:64",{"_index":1435,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:71",{"_index":1438,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:94",{"_index":1444,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":705,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":1332,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:16",{"_index":1335,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":1339,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:31",{"_index":1334,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:39",{"_index":1340,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":1337,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:49",{"_index":1343,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":1338,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1347,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:55",{"_index":1372,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":1357,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":1354,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:77",{"_index":1375,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1415,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":967,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1577,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1579,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":725,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{}}}],["started",{"_index":1558,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1568,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1464,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":283,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":426,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["status.enum.ts",{"_index":1541,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1641,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1589,"title":{},"body":{"index.html":{}}}],["story",{"_index":449,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1601,"title":{},"body":{"index.html":{}}}],["strict",{"_index":835,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto-1.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":654,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["sub",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["subject",{"_index":847,"title":{},"body":{"injectables/MailService.html":{}}}],["successful",{"_index":645,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["successfully",{"_index":1063,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":1041,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":1028,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":1062,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1622,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1325,"title":{},"body":{"injectables/UploadsService.html":{}}}],["svg",{"_index":1669,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":701,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1327,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1503,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":145,"title":{"entities/Tag.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":504,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":565,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:19",{"_index":572,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:29",{"_index":577,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:34",{"_index":568,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":574,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:45",{"_index":570,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":1200,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":1002,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1201,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":558,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["tags/tag.entity",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1179,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":116,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1208,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":540,"title":{"injectables/TagsService.html":{}},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":940,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["taken",{"_index":1148,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["tap",{"_index":670,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["team",{"_index":846,"title":{},"body":{"injectables/MailService.html":{}}}],["template",{"_index":828,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":831,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1582,"title":{},"body":{"index.html":{}}}],["test/.../bootstrap",{"_index":1551,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../drop",{"_index":1552,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../users.post.e2e",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/helpers/bootstrap",{"_index":1489,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/helpers/drop",{"_index":1493,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/users/users.post.e2e",{"_index":1496,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test:covdeployment",{"_index":1585,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1584,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1580,"title":{},"body":{"index.html":{}}}],["text",{"_index":985,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1654,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":297,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":305,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":674,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1262,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.creategooogleuserprovider.creategoogleuser(googleuser",{"_index":1460,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createpostprovider.create(createpostdto",{"_index":1095,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1447,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":635,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["this.extracttokenfromheader(request",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1459,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":1458,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatefilename(file",{"_index":1264,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":793,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":791,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":763,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepassword",{"_index":1156,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":619,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":718,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":709,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":775,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":777,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":711,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":721,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":713,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":707,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":843,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.senduserwelcome(newuser",{"_index":622,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.metaoptionsrepository.create",{"_index":905,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":906,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptionsdto",{"_index":890,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":778,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":783,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":1096,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository",{"_index":1099,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":560,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.postsrepository.delete(id",{"_index":1126,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":1106,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":561,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":1065,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":1069,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(postquery",{"_index":1061,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":1067,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.getallandoverride",{"_index":300,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":944,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":943,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":716,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":720,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":1216,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":1220,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1218,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":1217,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":1221,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":1191,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":1193,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":556,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":1100,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":1195,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.uploadsrepository.create(uploadfile",{"_index":1330,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsrepository.save(upload",{"_index":1331,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsservice.uploadfile(file",{"_index":1301,"title":{},"body":{"controllers/UploadsController.html":{}}}],["this.uploadtoawsprovider.fileupload(file",{"_index":1326,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1456,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":389,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":604,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findoneby",{"_index":682,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":620,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.save(user",{"_index":394,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.usersservice.creategoogleuser",{"_index":792,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.createmany(createmanyusersdto",{"_index":1396,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1394,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":1389,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(signindto.email",{"_index":1146,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.findonebygoogleid(googleid",{"_index":790,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.findonebyid(sub",{"_index":1136,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.usersservice.findonebyid(user.sub",{"_index":555,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["throw",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":461,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1636,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":995,"title":{},"body":{"entities/Post.html":{},"injectables/UploadToAwsProvider.html":{}}}],["title",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UploadsController.html":{}}}],["token.dto",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":797,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":798,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:6",{"_index":1131,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:16",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:23",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:44",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["tokens",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":693,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:16",{"_index":1133,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:23",{"_index":702,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:38",{"_index":698,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:39",{"_index":1134,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":696,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":912,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":914,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1660,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":647,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["transformer",{"_index":414,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":820,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":1272,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":1336,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":1003,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":407,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1665,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1537,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":383,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":897,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1079,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1202,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":1309,"title":{},"body":{"modules/UploadsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1426,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1319,"title":{},"body":{"injectables/UploadsService.html":{},"dependencies.html":{}}}],["types.enum",{"_index":1238,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["types.enum.ts",{"_index":1539,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types/multer",{"_index":1515,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1567,"title":{},"body":{"index.html":{}}}],["unable",{"_index":611,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unauthorised",{"_index":794,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('password",{"_index":1159,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('user",{"_index":691,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unauthorizedexception(error",{"_index":795,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Upload.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":1282,"title":{},"body":{"controllers/UploadsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":406,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":486,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":443,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":563,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1581,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1679,"title":{},"body":{"properties.html":{}}}],["unsuccessful",{"_index":649,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["unsupported",{"_index":1318,"title":{},"body":{"injectables/UploadsService.html":{}}}],["update",{"_index":1082,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":1091,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":975,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":972,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":861,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatedatecolumn",{"_index":874,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatepost",{"_index":1021,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":1066,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":1037,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":1038,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["upload",{"_index":1223,"title":{"entities/Upload.html":{}},"body":{"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["upload.entity",{"_index":1305,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["uploadedfile",{"_index":1286,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile",{"_index":1240,"title":{"interfaces/UploadFile.html":{}},"body":{"interfaces/UploadFile.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["uploadfile(@uploadedfile",{"_index":1300,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile(file",{"_index":1280,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadresult",{"_index":1260,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1268,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploads",{"_index":1279,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploads.controller",{"_index":1308,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads/uploads.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadscontroller",{"_index":1277,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadsmodule",{"_index":117,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsrepository",{"_index":1312,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadsservice",{"_index":1290,"title":{"injectables/UploadsService.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadtoawsprovider",{"_index":1243,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":467,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationProvider.html":{}}}],["url\"'})@maxlength(256",{"_index":477,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url\"'})@maxlength(512",{"_index":576,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":946,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":941,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":928,"title":{},"body":{"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":320,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UsersService.html":{}}}],["usefactory",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["useinterceptors",{"_index":1287,"title":{},"body":{"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1392,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1294,"title":{},"body":{"controllers/UploadsController.html":{}}}],["useinterceptors(undefined)@apiheaders(['undefined",{"_index":1281,"title":{},"body":{"controllers/UploadsController.html":{}}}],["user",{"_index":83,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["user.decorator",{"_index":1056,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1473,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":413,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":349,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto-1.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":356,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":360,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":354,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":358,"title":{},"body":{"classes/CreateGoogleUserDto.html":{}}}],["user.dto.ts:37",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":719,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{}}}],["user.entity",{"_index":384,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":854,"title":{},"body":{"injectables/MailService.html":{}}}],["user.id",{"_index":717,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.inerface",{"_index":387,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["user.inerface.ts",{"_index":800,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["user.password",{"_index":1158,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":982,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1417,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":373,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:17",{"_index":381,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:37",{"_index":595,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:8",{"_index":377,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user?.[field",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":703,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":400,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":1420,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":632,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":399,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:19",{"_index":408,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.service.ts",{"_index":1449,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/user.entity",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1346,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemany",{"_index":1446,"title":{},"body":{"injectables/UsersService.html":{}}}],["userscreatemanyprovider",{"_index":1398,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["usersmodule",{"_index":118,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":378,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":269,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":474,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":789,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["uuid",{"_index":1259,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":1258,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuidv4()}${extension",{"_index":1276,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1257,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["validatenested",{"_index":410,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":460,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationschema",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":368,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreatePostMetaOptionsDto-2.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":534,"title":{},"body":{"classes/CreatePostMetaOptionsDto-2.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":447,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":987,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["variable",{"_index":1470,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1680,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":780,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["version",{"_index":1677,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1629,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1619,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1632,"title":{},"body":{"index.html":{}}}],["void",{"_index":771,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":1370,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":1575,"title":{},"body":{"index.html":{}}}],["website",{"_index":1663,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":848,"title":{},"body":{"injectables/MailService.html":{}}}],["without",{"_index":475,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/GenerateTokensProvider.html":{}}}],["working",{"_index":1618,"title":{},"body":{"index.html":{}}}],["x",{"_index":1644,"title":{},"body":{"index.html":{}}}],["yes",{"_index":704,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["you'd",{"_index":1658,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1586,"title":{},"body":{"index.html":{}}}],["z0",{"_index":469,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":581,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":580,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":579,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    // Extract the request from the execution context\n    const request = context.switchToHttp().getRequest();\n    // Extract the token from the header\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration,\n      );\n      request[REQUEST_USER_KEY] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's email address\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  /**\n   * The ID of the user\n   */\n  sub: number;\n\n  /**\n   * User's email address\n   */\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { Module } from '@nestjs/common';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport { PostsModule } from './posts/posts.module';\nimport { Tag } from './tags/tag.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n/**\n * Importing Entities\n * */\nimport { User } from './users/user.entity';\nimport { UsersModule } from './users/users.module';\nimport { UploadsModule } from './uploads/uploads.module';\nimport { MailModule } from './mail/mail.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport enviromentValidation from './config/enviroment.validation';\nimport jwtConfig from './auth/config/jwt.config';\n\n// Get the current NODE_ENV\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      //envFilePath: ['.env.development', '.env'],\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: enviromentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        //entities: [User],\n        synchronize: configService.get('database.synchronize'),\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n    UploadsModule,\n    MailModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.None)@HttpCode(HttpStatus.OK)@Post('refresh-tokens')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\n\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /*\n     * Injecting Auth Service\n     */\n    private readonly authService: AuthService,\n  ) {}\n\n  @Post('sign-in')\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  public signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK) // changed since the default is 201\n  @Post('refresh-tokens')\n  refreshTokens(@Body() refreshTokenDto: RefreshTokenDto) {\n    return this.authService.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Module, forwardRef } from '@nestjs/common';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { JwtModule } from '@nestjs/jwt';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { UsersModule } from 'src/users/users.module';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\nimport jwtConfig from './config/jwt.config';\n\n@Module({\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SignInProvider } from './sign-in.provider';\nimport { Inject, Injectable, forwardRef } from '@nestjs/common';\n\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Inject the signInProvider\n     */\n    private readonly signInProvider: SignInProvider,\n\n    /**\n     * Inject refreshTokensProvider\n     */\n    private readonly refreshTokensProvider: RefreshTokensProvider,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    return await this.refreshTokensProvider.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\n\nimport { AUTH_TYPE_KEY } from 'src/auth/decorators/auth.decorator';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  // Set the default Auth Type\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  // Create authTypeGuardMap\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // Declare the default error\n    let error = new UnauthorizedException();\n\n    for (const instance of guards) {\n      // Decalre a new constant\n      const canActivate = await Promise.resolve(\n        // Here the AccessToken Guard Will be fired and check if user has permissions to acces\n        // Later Multiple AuthTypes can be used even if one of them returns true\n        // The user is Authorised to access the resource\n        instance.canActivate(context),\n      ).catch((err) => {\n        error = err;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\n\nimport { HashingProvider } from './hashing.provider';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  public async hashPassword(data: string | Buffer): Promise {\n    // Generate the salt\n    const salt = await bcrypt.genSalt();\n    return bcrypt.hash(data, salt);\n  }\n\n  public async comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGoogleUserDto.html":{"url":"classes/CreateGoogleUserDto.html","title":"class - CreateGoogleUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGoogleUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-google-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-google-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-google-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-google-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-google-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateGoogleUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GoogleUser } from '../interfaces/google-user.inerface';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n  constructor(\n    /**\n     * Inject usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async createGoogleUser(googleUser: GoogleUser) {\n    try {\n      const user = this.usersRepository.create({\n        firstName: googleUser.firstName,\n        lastName: googleUser.lastName,\n        googleId: googleUser.googleId,\n        email: googleUser.email,\n      });\n      return await this.usersRepository.save(user);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'Could not create a new user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsInt,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  ValidateNested,\n  isNotEmpty,\n} from 'class-validator';\n\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { CreateTagDto } from 'src/tags/dtos/create-tag.dto';\nimport { DeepPartial } from 'typeorm';\nimport { Type } from 'class-transformer';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from '../enums/postType.enum';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(256)\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsDate()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 2],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto-1.html":{"url":"classes/CreatePostMetaOptionsDto-1.html","title":"class - CreatePostMetaOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-metaoptions.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-metaoptions.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @ApiProperty({ type: 'object' })\n  @IsString()\n  @IsNotEmpty()\n  metaValue: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto-2.html":{"url":"classes/CreatePostMetaOptionsDto-2.html","title":"class - CreatePostMetaOptionsDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostProvider.html":{"url":"injectables/CreatePostProvider.html","title":"injectable - CreatePostProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/create-post.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/create-post.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/create-post.provider.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Injectable()\nexport class CreatePostProvider {\n  constructor(\n    /*\n     * Injecting Users Service\n     */\n    private readonly usersService: UsersService,\n    /**\n     * Inject postsRepository\n     */\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository,\n    /**\n     * Inject TagsService\n     */\n    private readonly tagsService: TagsService,\n  ) {}\n\n  public async create(createPostDto: CreatePostDto, user: ActiveUserData) {\n    let author = undefined;\n    let tags = undefined;\n\n    try {\n      // Find author from database based on authorId\n      author = await this.usersService.findOneById(user.sub);\n      // Find tags\n      tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n\n    if (createPostDto.tags.length !== tags.length) {\n      throw new BadRequestException('Please check your tag Ids');\n    }\n\n    // Create post\n    let post = this.postsRepository.create({\n      ...createPostDto,\n      author: author,\n      tags: tags,\n    });\n\n    try {\n      // return the post\n      return await this.postsRepository.save(post);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'Ensure post slug is unique and not a duplicate',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BcryptProvider } from './../../auth/providers/bcrypt.provider';\nimport {\n  BadRequestException,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  forwardRef,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { MailService } from 'src/mail/providers/mail.service';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    /**\n     * Inject BCrypt Provider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * Inject mailService\n     */\n    private readonly mailService: MailService,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n\n    try {\n      // Check is user exists with same email\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      // Might save the details of the exception\n      // Information which is sensitive\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    // Handle exception\n    if (existingUser) {\n      throw new BadRequestException(\n        'The user already exists, please check your email.',\n      );\n    }\n\n    // Create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the the datbase',\n        },\n      );\n    }\n\n    try {\n      await this.mailService.sendUserWelcome(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUsersManyProvoder.html":{"url":"injectables/CreateUsersManyProvoder.html","title":"injectable - CreateUsersManyProvoder","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUsersManyProvoder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-users-many.provoder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-users-many.provoder.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(CreateManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-users-many.provoder.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                CreateManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../user.entity';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n@Injectable()\nexport class CreateUsersManyProvoder {\n  constructor(private readonly dataSource: DataSource) {}\n\n  public async createMany(CreateManyUsersDto: CreateManyUsersDto) {\n    let newUsers: User[] = [];\n    let queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not collect to the database');\n    }\n\n    try {\n      for (let user of CreateManyUsersDto.users) {\n        let newUser = queryRunner.manager.create(User, user);\n        let result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n      // if successful commit transaction\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // if unsuccessful rollback transaction\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      // finally release connection\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, map, tap } from 'rxjs';\n\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(private readonly configService: ConfigService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-google-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    /**\n     * Inject usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.usersRepository.findOneBy({ googleId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n  constructor(\n    /**\n     * Inject usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async findOneByEmail(email: string) {\n    let user: User | undefined = undefined;\n\n    try {\n      // This will return null if the user is not found\n      user = await this.usersRepository.findOneBy({\n        email: email,\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not fetch the user',\n      });\n    }\n\n    if (!user) {\n      throw new UnauthorizedException('User does not exists');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:23\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      // Generate Access Token with Email\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        { email: user.email },\n      ),\n\n      // Generate Refresh token without email\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\n\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { Type } from 'class-transformer';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto-1.html":{"url":"classes/GetPostsBaseDto-1.html","title":"class - GetPostsBaseDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endData\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsOptional()\n  @IsDate()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDate()\n  endData?: string;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto.html":{"url":"classes/GetPostsDto.html","title":"class - GetPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\n\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { Type } from 'class-transformer';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto-1.html":{"url":"classes/GetPostsDto-1.html","title":"class - GetPostsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsOptional()\n  @IsDate()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDate()\n  endData?: string;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamsDto.html":{"url":"classes/GetUsersParamsDto.html","title":"class - GetUsersParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific ID', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-params.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamsDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific ID',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { Auth } from '../decorators/auth.decorator';\nimport { AuthType } from '../enums/auth-type.enum';\n\n@Auth(AuthType.None)\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    /**\n     * Inject googleAuthenticationService\n     */\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n    return this.googleAuthenticationService.authenticate(googleTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtConfiguration: ConfigType<>, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  OnModuleInit,\n  UnauthorizedException,\n  forwardRef,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { OAuth2Client } from 'google-auth-library';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from 'src/users/user.entity';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oauthClient: OAuth2Client;\n\n  constructor(\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    /**\n     * Inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const clientId = this.jwtConfiguration.googleClientId;\n    const clientSecret = this.jwtConfiguration.googleClientSecret;\n    this.oauthClient = new OAuth2Client(clientId, clientSecret);\n  }\n\n  async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      // Verify the Google Token Sent By User\n      const loginTicket = await this.oauthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n      // Extract the payload from Google Token\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n      // Find the user in the database using the googleId\n      const user = await this.usersService.findOneByGoogleId(googleId);\n\n      // If user id found generate the tokens\n      if (user) {\n        return await this.generateTokensProvider.generateTokens(user);\n      } else {\n        // If not create a new user and generate the tokens\n        const newUser = await this.usersService.createGoogleUser({\n          email: email,\n          firstName: firstName,\n          lastName: lastName,\n          googleId: googleId,\n        });\n        return await this.generateTokensProvider.generateTokens(newUser);\n      }\n\n      // throw Unauthorised exception if not Authorised\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MaxLength } from 'class-validator';\n\nexport class GoogleTokenDto {\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleUser.html":{"url":"interfaces/GoogleUser.html","title":"interface - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user.inerface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleUser {\n  email: string;\n  firstName: string;\n  lastName: string;\n  googleId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\n\nimport { ConfigService } from '@nestjs/config';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\nimport { MailService } from './providers/mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { join } from 'path';\n\n@Global()\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          host: config.get('appConfig.mailHost'),\n          secure: false,\n          port: 2525,\n          auth: {\n            user: config.get('appConfig.smtpUsername'),\n            pass: config.get('appConfig.smtpPassword'),\n          },\n        },\n        defaults: {\n          from: `\"My Blog\" `,\n        },\n        template: {\n          dir: join(__dirname, 'templates'),\n          adapter: new EjsAdapter({ inlineCssEnabled: true }),\n          options: {\n            strict: false,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendUserWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendUserWelcome\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendUserWelcome(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { User } from 'src/users/user.entity';\n\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  async sendUserWelcome(user: User): Promise {\n    await this.mailerService.sendMail({\n      to: user.email,\n      // override default from\n      from: '\"Onbaording Team\" ',\n      subject: 'Welcome to NestJs Blog',\n      // `.ejs` extension is appended automatically to template\n      template: './welcome',\n      // Context is available in email template\n      context: {\n        name: user.firstName,\n        email: user.email,\n        loginUrl: 'http://localhost:3000',\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { Post } from 'src/posts/post.entity';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { Body, Controller, Post } from '@nestjs/common';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(\n    /**\n     * Inject MetaOptionsService\n     * */\n    private readonly MetaOptionsService: MetaOptionsService,\n  ) {}\n\n  @Post()\n  public async create(\n    @Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.MetaOptionsService.create(createPostMetaOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MetaOption } from './meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n  exports: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\nimport { Injectable } from '@nestjs/common';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    /**\n     * Injecting metaOptions repository\n     */\n    @InjectRepository(MetaOption)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    let metaOption = this.metaOptionsRepository.create(\n      createPostMetaOptionsDto,\n    );\n    return await this.metaOptionsRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first?: string;\n    previous?: string;\n    current: string;\n    next?: string;\n    last?: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:11\n                            \n                        \n\n                \n                    \n                            Use Constructor to Inject Request\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ObjectLiteral } from 'typeorm';\nimport { Paginated } from '../interfaces/paginated.interface';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport * as url from 'url';\n\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * Use Constructor to Inject Request\n   * */\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n\n  public async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n  ): Promise> {\n    let results = await repository.find({\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      take: paginationQuery.limit,\n    });\n\n    /**\n     * Create the request URLs\n     */\n    const baseURL =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n    const newUrl = new URL(this.request.url, baseURL);\n\n    // Calculate page numbers\n    const totalItems = await repository.count();\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const previousPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    let finalResponse = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalItems,\n        currentPage: paginationQuery.page,\n        totalPages: Math.ceil(totalItems / paginationQuery.limit),\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${previousPage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  // Number of entries to return\n  limit?: number = 10;\n\n  @IsOptional()\n  @IsPositive()\n  // Number of entries to skip from start\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto-1.html":{"url":"classes/PatchUserDto-1.html","title":"class - PatchUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { CreatePostMetaOptionsDto } from '../meta-options/dtos/create-post-meta-options.dto';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { Tag } from 'src/tags/tag.entity';\nimport { User } from 'src/users/user.entity';\nimport { postStatus } from './enums/postStatus.enum';\nimport { postType } from './enums/postType.enum';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: postType,\n    nullable: false,\n    default: postType.POST,\n  })\n  postType: postType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: postStatus,\n    nullable: false,\n    default: postStatus.DRAFT,\n  })\n  status: postStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp', // 'datetime' in mysql\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true,\n  })\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, {\n    eager: true,\n  })\n  @JoinTable()\n  tags?: Tag[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string, postQuery: GetPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsDto } from './dtos/get-post.dto';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(\n    /*\n     *  Injecting Posts Service\n     */\n    private readonly postsService: PostsService,\n  ) {}\n\n  /*\n   * GET localhost:3000/posts/:userId\n   */\n  @Get('/:userId?')\n  public getPosts(\n    @Param('userId') userId: string,\n    @Query() postQuery: GetPostsDto,\n  ) {\n    return this.postsService.findAll(postQuery, userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully',\n  })\n  @Post()\n  public createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: ActiveUserData,\n  ) {\n    console.log(user);\n    return this.postsService.create(createPostDto, user);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  @Delete()\n  public deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePostProvider\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { Module } from '@nestjs/common';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { Post } from './post.entity';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from 'src/users/users.module';\nimport { CreatePostProvider } from './providers/create-post.provider';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService, CreatePostProvider],\n  imports: [\n    UsersModule,\n    TagsModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider, createPostProvider: CreatePostProvider)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createPostProvider\n                                                  \n                                                        \n                                                                        CreatePostProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Creating new posts\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostsDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\nimport { GetPostsDto } from '../dtos/get-post.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { CreatePostProvider } from './create-post.provider';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Inject postsRepository\n     */\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository,\n    /**\n     * inject metaOptionsRepository\n     */\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n    /**\n     * Inject TagsService\n     */\n    private readonly tagsService: TagsService,\n    /**\n     * Inject the paginationProvider\n     */\n    private readonly paginationProvider: PaginationProvider,\n    /**\n     * Inject createPostProvider\n     */\n    private readonly createPostProvider: CreatePostProvider,\n  ) {}\n\n  /**\n   * Creating new posts\n   */\n  public async create(createPostDto: CreatePostDto, user: ActiveUserData) {\n    return await this.createPostProvider.create(createPostDto, user);\n  }\n\n  public async findAll(\n    postQuery: GetPostsDto,\n    userId: string,\n  ): Promise> {\n    let posts = await this.paginationProvider.paginateQuery(\n      {\n        limit: postQuery.limit,\n        page: postQuery.page,\n      },\n      this.postsRepository,\n    );\n\n    return posts;\n  }\n\n  public async update(patchPostDto: PatchPostDto) {\n    let tags = undefined;\n    let post = undefined;\n\n    // Find the Tags\n    try {\n      tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    /**\n     * If tags were not found\n     * Need to be equal number of tags\n     */\n    if (!tags || tags.length !== patchPostDto.tags.length) {\n      throw new BadRequestException(\n        'Please check your tag Ids and ensure they are correct',\n      );\n    }\n\n    // Find the Post\n    try {\n      // Returns null if the post does not exist\n      post = await this.postsRepository.findOneBy({\n        id: patchPostDto.id,\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    if (!post) {\n      throw new BadRequestException('The post Id does not exist');\n    }\n\n    // Update the properties\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n\n    // Assign the new tags\n    post.tags = tags;\n\n    // Save the post and return\n    try {\n      await this.postsRepository.save(post);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n    return post;\n  }\n\n  public async delete(id: number) {\n    // Deleting the post\n    await this.postsRepository.delete(id);\n    // confirmation\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, usersService: UsersService, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport {\n  Inject,\n  Injectable,\n  UnauthorizedException,\n  forwardRef,\n} from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    // Verify the refresh token using jwtService\n    try {\n      const { sub } = await this.jwtService.verifyAsync\n      >(refreshTokenDto.refreshToken, {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      });\n      // Fetch the user from the database\n      const user = await this.usersService.findOneById(sub);\n\n      // Generate the tokens\n      return await this.generateTokensProvider.generateTokens(user);\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class SignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @MinLength(8)\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n  forwardRef,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Inject the hashingProvider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * Inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    // find user by email ID\n    let user = await this.usersService.findOneByEmail(signInDto.email);\n    // Throw exception if user is not found\n    // Above | Taken care by the findInByEmail method\n\n    let isEqual: boolean = false;\n\n    try {\n      // Compare the password to hash\n      isEqual = await this.hashingProvider.comparePassword(\n        signInDto.password,\n        user.password,\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not compare the password',\n      });\n    }\n\n    if (!isEqual) {\n      throw new UnauthorizedException('Password does not match');\n    }\n\n    // Generate access token\n    return await this.generateTokensProvider.generateTokens(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { Post } from 'src/posts/post.entity';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  // Add this decorartor and column enables soft delete\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(\n    /**\n     * Inject  tagsService\n     */\n    private readonly tagsService: TagsService,\n  ) {}\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  @Delete('soft-delete')\n  public softDelete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Tag } from './tag.entity';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { In, Repository } from 'typeorm';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { Injectable } from '@nestjs/common';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject tagsRepository\n     */\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  public async create(createTagDto: CreateTagDto) {\n    let tag = this.tagsRepository.create(createTagDto);\n    return await this.tagsRepository.save(tag);\n  }\n\n  public async findMultipleTags(tags: number[]) {\n    let results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete(id: number) {\n    await this.tagsRepository.delete(id);\n\n    return {\n      deleted: true,\n      id,\n    };\n  }\n\n  public async softRemove(id: number) {\n    await this.tagsRepository.softDelete(id);\n\n    return {\n      softDeleted: true,\n      id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Upload.html":{"url":"entities/Upload.html","title":"entity - Upload","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/upload.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 128, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: fileTypes, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:57\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { fileTypes } from './enums/file-types.enum';\n\n@Entity()\nexport class Upload {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  path: string;\n\n  @Column({\n    type: 'enum',\n    enum: fileTypes,\n    default: fileTypes.IMAGE,\n    nullable: false,\n  })\n  type: string;\n\n  @Column({\n    type: 'varchar',\n    length: 128,\n    nullable: false,\n  })\n  mime: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  size: number;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadFile.html":{"url":"interfaces/UploadFile.html","title":"interface - UploadFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/interfaces/upload-file.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UploadFile {\n  name: string;\n  path: string;\n  type: string;\n  mime: string;\n  size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fileupload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/upload-to-aws.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fileupload\n                        \n                    \n                \n            \n            \n                \n                        \n                    fileupload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as path from 'path';\n\nimport { Injectable, RequestTimeoutException } from '@nestjs/common';\n\nimport { ConfigService } from '@nestjs/config';\nimport { Express } from 'express';\nimport { S3 } from 'aws-sdk';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(private readonly configService: ConfigService) {}\n\n  public async fileupload(file: Express.Multer.File) {\n    const s3 = new S3();\n    try {\n      const uploadResult = await s3\n        .upload({\n          Bucket: this.configService.get('appConfig.awsBucketName'),\n          Body: file.buffer,\n          Key: this.generateFileName(file),\n          ContentType: file.mimetype,\n        })\n        .promise(); // Promisify the request\n\n      // Return the file name\n      return uploadResult.Key;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  private generateFileName(file: Express.Multer.File) {\n    // extract file name\n    let name = file.originalname.split('.')[0];\n    // Remove spaces in the file name\n    name.replace(/\\s/g, '').trim();\n    // extract file extension\n    let extension = path.extname(file.originalname);\n    // Generate a timestamp\n    let timeStamp = new Date().getTime().toString().trim();\n    // Return new fileName\n    return `${name}-${timeStamp}-${uuidv4()}${extension}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: Upload a new image to the server})@Post('file')\n                \n            \n\n                    \n                        \n                            Defined in src/uploads/uploads.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiHeaders, ApiOperation } from '@nestjs/swagger';\nimport {\n  Controller,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Express } from 'express';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { UploadsService } from './providers/uploads.service';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Auth(AuthType.None)\n@Controller('uploads')\nexport class UploadsController {\n  constructor(\n    /**\n     * inject uploadsService\n     */\n    private readonly uploadsService: UploadsService,\n  ) {}\n\n  // File is the field name\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiHeaders([\n    { name: 'Content-Type', description: 'multipart/form-data' },\n    { name: 'Authorization', description: 'Bearer Token' },\n  ])\n  @ApiOperation({\n    summary: `Upload a new image to the server`,\n  })\n  @Post('file')\n  public uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.uploadsService.uploadFile(file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadToAwsProvider\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Upload } from './upload.entity';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './providers/uploads.service';\n\n@Module({\n  controllers: [UploadsController],\n  providers: [UploadsService, UploadToAwsProvider],\n  imports: [TypeOrmModule.forFeature([Upload])],\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/uploads.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadToAwsProvider: UploadToAwsProvider, configService: ConfigService, uploadsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/uploads.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/uploads.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { UploadFile } from '../interfaces/upload-file.interface';\nimport { UploadToAwsProvider } from './upload-to-aws.provider';\nimport { fileTypes } from '../enums/file-types.enum';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Upload } from '../upload.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class UploadsService {\n  constructor(\n    /**\n     * Inject uploadToAwsProvider\n     */\n    private readonly uploadToAwsProvider: UploadToAwsProvider,\n    /**\n     * inject configService\n     */\n    private readonly configService: ConfigService,\n    /**\n     * inject uploadsRepository\n     */\n    @InjectRepository(Upload)\n    private uploadsRepository: Repository,\n  ) {}\n  public async uploadFile(file: Express.Multer.File) {\n    // throw error for unsupported file types\n    if (\n      !['image/gif', 'image/jpeg', 'image/jpg', 'image/png'].includes(\n        file.mimetype,\n      )\n    ) {\n      throw new BadRequestException('MIME type not supported');\n    }\n\n    try {\n      // Upload file to AWS S3 bucket\n      const path = await this.uploadToAwsProvider.fileupload(file);\n      // Generate a new record in upload table\n      const uploadFile: UploadFile = {\n        name: path,\n        path: `https://${this.configService.get('appConfig.awsCloudfrontUrl')}/${path}`,\n        type: fileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      };\n      // create an upload\n      const upload = this.uploadsRepository.create(uploadFile);\n      // save the details to database\n      return await this.uploadsRepository.save(upload);\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { Exclude } from 'class-transformer';\nimport { Post } from 'src/posts/post.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  @Exclude()\n  password?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n  })\n  @Exclude()\n  googleId?: string;\n\n  @OneToMany(() => Post, (post) => post.author)\n  posts?: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(ClassSerializerInterceptor)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiTags, ApiQuery, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting Users Service\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  // @SetMetadata('authType', 'none')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Auth(AuthType.None)\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Post('create-many')\n  public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n    return this.usersService.createMany(createManyUsersDto);\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\n\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\nimport { DataSource } from 'typeorm';\nimport { User } from '../user.entity';\n\n@Injectable()\nexport class UsersCreateManyProvider {\n  constructor(\n    /**\n     * Inject the datasource\n     */\n    private dataSource: DataSource,\n  ) {}\n\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    let newUsers: User[] = [];\n\n    // Create Query Runner Instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      // Connect the query ryunner to the datasource\n      await queryRunner.connect();\n      // Start the transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to the database');\n    }\n\n    try {\n      for (let user of createManyUsersDto.users) {\n        let newUser = queryRunner.manager.create(User, user);\n        let result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // since we have errors lets rollback the changes we made\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // you need to release a queryRunner which was manually instantiated\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException(\n          'Could not release the query runner connection',\n        );\n      }\n    }\n\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\n\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport { UsersService } from './providers/users.service';\nimport { FindOneByGoogleIdProvider } from './providers/find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    UsersCreateManyProvider,\n    CreateUserProvider,\n    FindOneUserByEmailProvider,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider,\n  ],\n  exports: [UsersService],\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n    forwardRef(() => AuthModule),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller class for '/users' API endpoint\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, usersCreateManyProvider: UsersCreateManyProvider, createUserProvider: CreateUserProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGooogleUserProvider: CreateGoogleUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGooogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Method to create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limt: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Public method responsible for handling GET request for '/users' endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Public method used to find one user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from './../dtos/create-user.dto';\nimport { DataSource, Repository } from 'typeorm';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  forwardRef,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\nimport { CreateUserProvider } from './create-user.provider';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { FindOneByGoogleIdProvider } from './find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './create-google-user.provider';\nimport { GoogleUser } from '../interfaces/google-user.inerface';\n\n/**\n * Controller class for '/users' API endpoint\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    /**\n     * Inject UsersCreateMany provider\n     */\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n    /**\n     * Inject Create Users Provider\n     */\n    private readonly createUserProvider: CreateUserProvider,\n\n    /**\n     * Inject findOneUserByEmailProvider\n     */\n    private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider,\n\n    /**\n     * Inject findOneByGoogleIdProvider\n     */\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n    /**\n     * Inject createGooogleUserProvider\n     */\n    private readonly createGooogleUserProvider: CreateGoogleUserProvider,\n  ) {}\n\n  /**\n   * Method to create a new user\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    return await this.createUserProvider.createUser(createUserDto);\n  }\n\n  /**\n   * Public method responsible for handling GET request for '/users' endpoint\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limt: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: 'The API endpoint does not exist',\n        fileName: 'users.service.ts',\n        lineNumber: 88,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        cause: new Error(),\n        description: 'Occured because the API endpoint was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Public method used to find one user using the ID of the user\n   */\n  public async findOneById(id: number) {\n    let user = undefined;\n\n    try {\n      user = await this.usersRepository.findOneBy({\n        id,\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the the datbase',\n        },\n      );\n    }\n\n    /**\n     * Handle the user does not exist\n     */\n    if (!user) {\n      throw new BadRequestException('The user id does not exist');\n    }\n\n    return user;\n  }\n\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyProvider.createMany(createManyUsersDto);\n  }\n\n  // Finds one user by email\n  public async findOneByEmail(email: string) {\n    return await this.findOneUserByEmailProvider.findOneByEmail(email);\n  }\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n  public async createGoogleUser(googleUser: GoogleUser) {\n    return await this.createGooogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.create.ts\n            \n            function\n            appCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-metaoptions.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-post.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-post.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/create-post.provider.ts\n            \n            injectable\n            CreatePostProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/interfaces/upload-file.interface.ts\n            \n            interface\n            UploadFile\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/uploads/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/providers/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/uploads/upload.entity.ts\n            \n            entity\n            Upload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-google-user.dto.ts\n            \n            class\n            CreateGoogleUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-params.dto.ts\n            \n            class\n            GetUsersParamsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user-dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user.inerface.ts\n            \n            interface\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-users-many.provoder.ts\n            \n            injectable\n            CreateUsersManyProvoder\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-google-id.provider.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                test/helpers/bootstrap-nest-application.helper.ts\n            \n            function\n            bootstrapNestApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/helpers/drop-database.helper.ts\n            \n            function\n            dropDatabase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            completeUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            misingFirstName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            missingEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            missingPassword\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/multer : ^1.4.12\n        \n            aws-sdk : ^2.1643.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.11.0\n        \n            joi : ^17.12.2\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            fileTypes   (src/.../file-types.enum.ts)\n                        \n                        \n                            postStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/uploads/enums/file-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        fileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n            \n        \n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appCreate   (src/.../app.create.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrapNestApplication   (test/.../bootstrap-nest-application.helper.ts)\n                        \n                        \n                            dropDatabase   (test/.../drop-database.helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.create.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appCreate\n                        \n                    \n                \n            \n            \n                \nappCreate(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    test/helpers/bootstrap-nest-application.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrapNestApplication\n                        \n                    \n                \n            \n            \n                \nbootstrapNestApplication()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    test/helpers/drop-database.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dropDatabase\n                        \n                    \n                \n            \n            \n                \ndropDatabase(config: ConfigService)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            completeUser   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            misingFirstName   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            missingEmail   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            missingPassword   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n    // If a user passes a field to the decorator use only that field\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    test/users/users.post.e2e-spec.sample-data.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        completeUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  firstName: faker.person.firstName(),\n  lastName: faker.person.lastName(),\n  email: faker.internet.email(),\n  password: 'Password123#',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        misingFirstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  lastName: faker.person.lastName(),\n  email: faker.internet.email(),\n  password: 'Password123#',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        missingEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  firstName: faker.person.firstName(),\n  lastName: faker.person.lastName(),\n  password: 'Password123#',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        missingPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  firstName: faker.person.firstName(),\n  lastName: faker.person.lastName(),\n  email: faker.internet.email(),\n}\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
