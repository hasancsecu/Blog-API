var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.888,1,2.364]],["body/guards/AccessTokenGuard.html",[1,2.913,2,2.721,3,0.12,4,0.107,5,0.107,6,4.52,7,3.929,8,3.02,9,0.251,10,1.138,11,1.649,12,5.464,13,1.9,14,4.949,15,1.269,16,2.721,17,5.41,18,4.147,19,4.197,20,0.583,21,3.473,22,1.375,23,0.014,24,1.279,25,0.444,26,0.945,27,4.303,28,4.52,29,3.473,30,3.305,31,1.138,32,3.094,33,4.949,34,4.443,35,3.473,36,1.316,37,2.755,38,0.302,39,1.243,40,0.578,41,3.605,42,0.547,43,1.665,44,2.044,45,2.721,46,2.498,47,2.044,48,2.721,49,2.721,50,2.721,51,3.473,52,0.12,53,0.103,54,2.32,55,1.316,56,2.498,57,4.949,58,3.473,59,3.158,60,3.473,61,4.612,62,3.473,63,3.473,64,2.169,65,1.771,66,1.591,67,4.303,68,1.069,69,3.02,70,3.473,71,3.02,72,1.591,73,1.138,74,1.665,75,3.473,76,3.473,77,0.008,78,0.008]],["title/interfaces/ActiveUserData.html",[79,2.682,80,2.121]],["body/interfaces/ActiveUserData.html",[3,0.183,4,0.163,5,0.163,9,0.383,23,0.014,25,0.505,36,1.894,52,0.183,77,0.011,78,0.011,79,3.537,80,3.463,81,4.149,82,3.537,83,1.699,84,4.605,85,1.682,86,3.57,87,5.353,88,6.557,89,6.557,90,2.453,91,2.755]],["title/controllers/AppController.html",[92,1.554,93,2.888]],["body/controllers/AppController.html",[3,0.2,4,0.177,5,0.177,23,0.014,38,0.294,42,0.909,52,0.2,53,0.171,55,1.535,77,0.012,78,0.012,92,2.674,93,4.969,94,2.424,95,5.017,96,4.623,97,5.017,98,4.15]],["title/modules/AppModule.html",[99,1.494,100,2.888]],["body/modules/AppModule.html",[1,2.504,3,0.098,4,0.087,5,0.087,7,1.766,23,0.014,25,0.217,38,0.336,39,1.011,42,0.445,43,1.354,44,1.663,47,1.663,52,0.098,53,0.084,59,1.42,74,1.354,77,0.007,78,0.007,83,1.015,93,3.679,94,1.787,96,4.012,97,2.456,99,1.903,100,5.615,101,1.354,102,1.354,103,1.492,104,1.492,105,1.354,106,2.702,107,1.492,108,2.456,109,2.456,110,2.456,111,4.012,112,4.286,113,4.286,114,4.012,115,4.286,116,4.012,117,3.777,118,2.247,119,1.492,120,1.42,121,2.213,122,3.011,123,3.332,124,3.803,125,3.698,126,4.254,127,1.887,128,2.825,129,2.032,130,2.825,131,2.825,132,3.059,133,2.825,134,2.213,135,1.42,136,1.572,137,2.825,138,2.825,139,2.825,140,1.492,141,2.825,142,2.825,143,1.887,144,1.139,145,2.825,146,2.659,147,2.825,148,2.825,149,4.254,150,2.825,151,4.254,152,2.825,153,4.254,154,2.825,155,2.825,156,3.059,157,2.825,158,2.213,159,2.825,160,2.825,161,2.213,162,2.825,163,4.46,164,2.456,165,2.825,166,2.825,167,4.254,168,2.825,169,2.825,170,2.825,171,2.825,172,2.825,173,2.456,174,2.825,175,2.825,176,2.825,177,2.456,178,2.825,179,2.825,180,2.825,181,1.766,182,2.825,183,2.456,184,2.825,185,2.825,186,2.825,187,1.663,188,2.825,189,2.456,190,2.456,191,3.698,192,3.698]],["title/injectables/AppService.html",[40,0.469,96,2.511]],["body/injectables/AppService.html",[3,0.194,4,0.172,5,0.172,9,0.405,10,1.56,20,0.566,23,0.014,31,1.287,36,1.804,38,0.238,40,0.792,42,0.881,52,0.194,53,0.166,73,1.287,77,0.012,78,0.012,96,4.24,193,1.66,194,4.865,195,7.586,196,5.596,197,5.596,198,3.738]],["title/controllers/AuthController.html",[92,1.554,199,2.888]],["body/controllers/AuthController.html",[3,0.142,4,0.126,5,0.126,9,0.297,10,1.277,13,1.172,15,1.051,20,0.561,22,1.324,23,0.014,24,1.231,25,0.427,26,0.91,31,1.277,38,0.309,42,0.645,52,0.142,53,0.121,55,1.09,73,1.277,77,0.009,78,0.009,92,1.586,94,1.721,199,3.992,200,3.562,201,2.561,202,3.325,203,4.349,204,1.736,205,4.349,206,3.21,207,4.546,208,1.476,209,4.097,210,4.826,211,4.097,212,3.21,213,4.546,214,5.551,215,4.097,216,4.097,217,2.28,218,4.097,219,3.562,220,1.308,221,3.936,222,3.562,223,3.21,224,3.562,225,2.561,226,3.562,227,2.946,228,3.21,229,2.736,230,4.097,231,2.059,232,2.946,233,5.551,234,4.349,235,4.097,236,4.097,237,4.097,238,2.736,239,3.562,240,4.097,241,4.097,242,4.097]],["title/modules/AuthModule.html",[99,1.494,111,2.511]],["body/modules/AuthModule.html",[3,0.124,4,0.11,5,0.11,23,0.014,38,0.333,42,0.563,43,1.713,44,2.103,47,2.103,52,0.124,53,0.106,77,0.009,78,0.009,94,2.122,99,2.179,101,1.713,102,1.713,103,1.888,104,1.888,105,1.713,106,3.093,107,3.093,111,4.945,117,2.973,118,2.667,119,1.888,120,1.796,122,2.103,123,2.8,124,2.387,134,2.8,189,3.107,190,3.107,191,3.107,192,3.107,199,4.212,221,4.815,222,3.107,243,3.107,244,3.107,245,3.107,246,4.073,247,3.88,248,4.358,249,4.358,250,4.358,251,3.574,252,4.212,253,2.973,254,3.574,255,3.632,256,3.574,257,3.574,258,3.574,259,3.107,260,3.107,261,3.574,262,3.373,263,3.574,264,3.574,265,3.574,266,3.574,267,3.107,268,2.8]],["title/injectables/AuthService.html",[40,0.469,221,2.511]],["body/injectables/AuthService.html",[3,0.132,4,0.117,5,0.117,9,0.276,10,1.215,11,2.035,13,1.734,15,1.355,20,0.613,22,1.447,23,0.014,24,1.345,25,0.467,26,0.994,31,1.215,38,0.303,39,2.17,40,0.617,42,0.601,52,0.132,53,0.113,55,1.613,68,1.626,73,1.215,77,0.009,78,0.009,193,1.131,203,4.14,204,1.962,205,4.14,206,4.14,207,4.299,212,4.14,213,4.299,221,3.304,223,2.987,228,2.987,229,2.546,231,1.916,249,4.65,250,4.65,253,2.244,259,3.315,262,2.546,269,3.315,270,2.987,271,3.342,272,3.813,273,3.813,274,1.891,275,3.813,276,3.813,277,2.384,278,2.987,279,2.987,280,2.546,281,3.813,282,3.813]],["title/guards/AuthenticationGuard.html",[0,2.888,132,2.888]],["body/guards/AuthenticationGuard.html",[0,2.381,1,4.123,2,4.397,3,0.115,4,0.102,5,0.102,7,2.07,9,0.24,10,1.1,11,1.605,12,6.091,13,1.943,15,1.226,20,0.483,22,1.141,23,0.014,24,1.06,25,0.432,26,0.784,27,4.157,28,4.421,30,2.211,31,1.1,32,2.989,38,0.289,40,0.558,41,2.989,42,0.521,45,2.593,46,2.381,52,0.115,53,0.098,54,2.211,55,1.807,59,3.09,64,1.451,65,1.711,68,1.019,73,0.761,74,2.691,77,0.008,78,0.008,83,1.141,85,0.849,127,2.211,129,2.381,132,3.439,202,1.748,225,2.07,227,2.381,238,3.194,283,2.878,284,5.613,285,4.782,286,4.782,287,3.311,288,6.795,289,3.311,290,3.311,291,3.746,292,2.878,293,3.746,294,2.593,295,3.311,296,4.782,297,1.232,298,3.311,299,3.311,300,3.311,301,4.157,302,3.311,303,3.311,304,3.311,305,3.311,306,3.311,307,3.311,308,3.311,309,2.695,310,2.878,311,3.311,312,3.311,313,3.311,314,2.878,315,2.878,316,3.311,317,2.211,318,3.311,319,3.311,320,2.381,321,3.311,322,2.878,323,3.311,324,1.949,325,3.311,326,3.311,327,3.311,328,3.311,329,3.311]],["title/injectables/BcryptProvider.html",[40,0.469,255,2.888]],["body/injectables/BcryptProvider.html",[3,0.147,4,0.131,5,0.131,9,0.308,10,1.309,11,2.102,20,0.575,22,1.357,23,0.014,24,1.262,25,0.438,26,0.933,31,1.309,32,4.283,36,2.055,38,0.273,40,0.664,42,0.669,52,0.147,53,0.126,54,2.838,59,2.136,68,1.308,73,1.309,77,0.01,78,0.01,193,1.261,204,2.027,246,3.167,255,4.092,330,3.695,331,5.577,332,4.947,333,3.695,334,6.391,335,5.956,336,4.249,337,4.284,338,4.947,339,4.249,340,4.457,341,3.695,342,3.056,343,6.414,344,4.249,345,4.249,346,4.249]],["title/classes/CreateGoogleUserDto.html",[53,0.119,347,2.682]],["body/classes/CreateGoogleUserDto.html",[3,0.155,4,0.138,5,0.138,9,0.324,20,0.707,23,0.014,25,0.538,26,1.147,36,2.052,38,0.191,52,0.155,53,0.174,77,0.01,78,0.01,85,1.511,86,3.016,208,1.86,347,3.936,348,1.431,349,5.227,350,4.045,351,3.222,352,4.736,353,4.398,354,4.736,355,3.895,356,3.895,357,3.895,358,3.895,359,4.481,360,4.481,361,3.895,362,3.895,363,4.617,364,3.353,365,2.825,366,4.118,367,3.222,368,2.992,369,2.992,370,1.543,371,4.617,372,5.725]],["title/injectables/CreateGoogleUserProvider.html",[40,0.469,373,2.511]],["body/injectables/CreateGoogleUserProvider.html",[3,0.148,4,0.131,5,0.131,9,0.309,10,1.311,11,1.837,13,1.219,15,1.462,20,0.576,22,1.36,23,0.014,24,1.264,25,0.439,26,0.934,31,0.98,38,0.304,40,0.666,42,0.671,52,0.148,53,0.126,55,1.133,64,1.868,65,1.525,66,1.952,68,1.312,72,1.952,73,0.98,77,0.01,78,0.01,83,1.36,144,1.718,193,1.264,204,1.771,274,1.525,309,2.499,347,4.775,350,3.817,373,3.564,374,4.62,375,3.339,376,4.956,377,2.846,378,3.287,379,4.262,380,3.807,381,4.956,382,4.262,383,3.065,384,2.372,385,2.251,386,2.372,387,1.525,388,1.868,389,2.372,390,2.846,391,2.846,392,4.262,393,3.705,394,4.262,395,4.262,396,1.467]],["title/classes/CreateManyUsersDto.html",[53,0.119,397,2.364]],["body/classes/CreateManyUsersDto.html",[3,0.165,4,0.147,5,0.147,9,0.345,20,0.482,23,0.014,25,0.571,38,0.305,52,0.165,53,0.201,74,3.253,77,0.01,78,0.01,83,1.137,85,1.574,208,1.268,297,1.774,348,1.523,349,4.413,364,2.942,370,1.642,389,2.654,397,3.612,398,3.837,399,4.146,400,3.777,401,3.601,402,4.146,403,5.336,404,4.808,405,5.336,406,4.769,407,4.146,408,4.769,409,5.336,410,5.336,411,4.099,412,1.922,413,2.519,414,4.146]],["title/classes/CreatePostDto.html",[53,0.119,415,2.364]],["body/classes/CreatePostDto.html",[3,0.072,4,0.064,5,0.064,9,0.151,20,0.664,23,0.014,25,0.56,26,1.12,30,2.248,36,1.784,38,0.264,52,0.072,53,0.125,74,2.319,77,0.006,78,0.006,85,1.083,90,1.159,135,1.692,208,1.745,220,2.218,309,1.475,348,0.668,364,2.716,365,2.855,366,2.848,367,1.504,368,1.397,369,1.397,370,0.72,387,0.748,396,2.391,403,2.926,404,2.637,405,2.926,407,1.819,409,2.926,410,2.926,411,3.542,412,0.843,413,1.105,414,2.926,415,1.981,416,5.832,417,1.397,418,4.926,419,3.671,420,3.308,421,4.853,422,3.671,423,3.037,424,3.542,425,2.82,426,3.316,427,5.179,428,4.155,429,4.587,430,2.092,431,2.092,432,3.366,433,3.366,434,4.455,435,2.092,436,2.092,437,2.556,438,2.637,439,2.092,440,4.611,441,1.873,442,2.092,443,2.092,444,3.366,445,4.207,446,4.839,447,1.981,448,2.926,449,2.092,450,2.092,451,3.025,452,3.671,453,3.366,454,3.366,455,2.092,456,2.092,457,3.366,458,4.207,459,3.366,460,3.366,461,2.092,462,2.092,463,2.092,464,2.092,465,1.819,466,3.308,467,2.092,468,4.207,469,4.207,470,2.637,471,2.926,472,2.926,473,2.926,474,2.637,475,2.926,476,2.092,477,2.092,478,4.155,479,2.926,480,2.926,481,2.926,482,2.092,483,2.092,484,2.637,485,2.092,486,2.092,487,2.092,488,2.092,489,2.092,490,4.284,491,2.248,492,2.092,493,2.092,494,2.421,495,2.637,496,2.926,497,2.092,498,2.092,499,1.397,500,1.504,501,1.308,502,1.639,503,1.639,504,2.092,505,1.819,506,1.819,507,2.092,508,1.819,509,2.926,510,1.819,511,2.092,512,1.819,513,1.819,514,2.092,515,2.092,516,2.092,517,2.092,518,2.092,519,1.819,520,2.092,521,1.164,522,1.819,523,2.421,524,2.092]],["title/classes/CreatePostMetaOptionsDto.html",[53,0.119,437,2.121]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.187,4,0.166,5,0.166,9,0.39,20,0.545,23,0.014,25,0.415,36,1.763,38,0.229,52,0.187,53,0.196,77,0.011,78,0.011,85,1.701,135,3.332,208,1.434,220,2.118,348,1.722,364,3.178,366,3.174,368,3.602,370,1.857,437,3.502,495,5.195,499,4.429,523,5.164,525,3.332,526,4.689,527,5.393,528,5.393]],["title/classes/CreatePostMetaOptionsDto-1.html",[53,0.099,437,1.772,521,1.868]],["body/classes/CreatePostMetaOptionsDto-1.html",[3,0.184,4,0.163,5,0.163,9,0.385,20,0.537,23,0.014,25,0.506,38,0.28,52,0.184,53,0.195,77,0.011,78,0.011,85,1.685,208,1.414,220,2.099,348,1.698,364,3.15,366,3.868,370,1.83,402,4.621,411,4.389,412,2.142,437,3.471,440,4.621,499,4.389,523,5.131,525,3.303,529,4.621,530,5.315,531,5.315]],["title/injectables/CreatePostProvider.html",[40,0.469,532,2.511]],["body/injectables/CreatePostProvider.html",[3,0.112,4,0.1,5,0.1,9,0.234,10,1.082,11,1.585,13,1.585,15,1.207,20,0.476,22,1.122,23,0.014,24,1.044,25,0.362,26,0.771,31,0.745,37,2.619,38,0.303,39,1.684,40,0.549,42,0.51,52,0.112,53,0.096,55,1.474,64,2.43,65,1.983,66,2.155,68,1.706,72,2.155,73,1.082,77,0.008,78,0.008,80,3.214,82,2.163,83,1.451,140,1.71,144,1.305,187,1.906,193,0.961,204,1.529,217,1.802,220,2.064,231,1.627,232,2.329,270,2.537,271,3.089,274,1.159,277,2.024,297,2.062,309,2.063,317,2.163,378,2.917,383,2.329,385,1.71,387,1.159,388,1.419,396,1.115,400,1.802,415,3.969,424,2.163,426,4.041,484,2.537,532,2.942,533,4.819,534,2.815,535,5.29,536,3.968,537,3.238,538,4.091,539,3.238,540,2.329,541,2.329,542,2.537,543,2.815,544,2.163,545,2.815,546,4.648,547,3.384,548,2.537,549,3.238,550,3.238,551,3.238,552,4.706,553,3.238,554,2.815,555,3.238,556,3.238,557,2.815,558,2.537,559,2.329,560,3.238]],["title/classes/CreateTagDto.html",[53,0.119,501,2.511]],["body/classes/CreateTagDto.html",[3,0.135,4,0.12,5,0.12,9,0.282,20,0.7,23,0.014,24,1.36,25,0.533,36,2.042,38,0.228,52,0.135,53,0.159,77,0.009,78,0.009,85,1.375,208,1.843,348,1.243,364,2.939,365,3.167,366,3.888,367,2.799,368,2.6,369,2.6,370,1.34,371,3.05,396,2.111,411,4.095,412,1.569,423,4.41,424,4.627,429,3.351,466,3.05,468,5.744,469,5.744,470,4.2,471,4.661,472,4.661,473,4.661,474,4.2,475,4.661,490,4.751,495,4.2,496,4.661,501,3.351,502,5.61,508,3.384,512,3.384,513,3.384,519,3.384,561,3.384,562,5.331,563,3.893,564,3.893,565,3.893,566,3.893,567,3.893,568,3.893,569,3.893,570,3.893,571,3.893,572,3.893,573,3.893]],["title/classes/CreateUserDto.html",[53,0.119,401,2.018]],["body/classes/CreateUserDto.html",[3,0.143,4,0.127,5,0.127,9,0.299,20,0.685,23,0.014,25,0.521,26,0.915,36,2.016,38,0.176,52,0.143,53,0.165,77,0.01,78,0.01,85,1.432,86,2.896,90,1.922,181,3.953,208,1.801,324,4.291,348,1.319,349,5.087,351,2.971,352,4.547,354,4.547,355,3.592,356,3.592,357,3.592,358,3.592,361,3.592,362,3.592,363,4.373,364,3.246,365,2.676,366,3.986,367,2.971,368,2.759,369,2.759,370,1.423,371,4.373,372,5.888,401,2.806,470,4.373,574,4.131,575,6.772,576,5.583,577,5.583,578,5.583,579,5.583,580,5.583,581,5.583,582,5.583,583,5.583,584,4.131,585,3.592,586,4.131]],["title/injectables/CreateUserProvider.html",[40,0.469,587,2.511]],["body/injectables/CreateUserProvider.html",[3,0.107,4,0.095,5,0.095,9,0.223,10,1.043,11,1.539,13,1.539,15,1.163,20,0.458,22,1.081,23,0.014,24,1.005,25,0.349,26,0.743,31,0.708,34,2.834,37,1.713,38,0.291,39,1.622,40,0.529,42,0.485,52,0.107,53,0.091,55,1.206,64,2.603,65,2.265,66,2.9,68,1.828,72,2.465,73,0.708,77,0.008,78,0.008,83,1.416,86,2.465,144,1.24,181,1.924,187,1.811,193,0.913,204,1.484,231,1.546,246,3.912,253,1.811,274,1.101,280,2.055,297,1.145,309,2.775,317,3.028,320,3.26,340,2.411,374,3.871,375,2.411,377,2.055,378,2.847,380,3.595,384,2.996,385,1.625,386,1.713,387,1.101,388,1.349,389,1.713,390,2.055,391,3.595,393,2.675,396,1.561,401,3.329,540,3.26,587,2.834,588,3.941,589,4.281,590,3.077,591,3.941,592,3.077,593,3.077,594,3.077,595,2.675,596,5.382,597,3.941,598,3.077,599,3.077,600,3.077,601,2.675,602,3.077,603,3.941,604,2.675,605,3.077,606,3.551,607,3.551,608,3.551,609,3.871,610,3.551,611,2.675,612,3.077,613,3.077,614,3.077,615,2.675,616,3.077,617,2.411]],["title/injectables/CreateUsersManyProvoder.html",[40,0.469,618,3.146]],["body/injectables/CreateUsersManyProvoder.html",[3,0.124,4,0.11,5,0.11,9,0.259,10,1.162,11,1.675,15,0.917,20,0.511,22,1.205,23,0.014,24,1.12,25,0.389,26,0.828,31,0.822,38,0.286,40,0.59,42,0.563,52,0.124,53,0.106,55,0.95,64,2.567,65,2.096,66,2.683,68,2.145,72,2.683,73,0.822,77,0.009,78,0.009,83,1.518,98,2.57,187,2.103,193,1.06,204,1.615,274,1.279,309,2.567,374,4.212,383,2.57,384,1.989,386,1.989,387,1.279,388,2.214,389,1.989,391,2.387,396,1.739,397,3.952,398,2.234,400,3.26,401,1.796,618,3.957,619,3.107,620,3.957,621,3.107,622,6.06,623,3.574,624,3.957,625,3.574,626,2.57,627,4.391,628,3.107,629,3.107,630,3.107,631,3.107,632,4.391,633,3.574,634,3.107,635,3.107,636,3.107,637,3.107,638,3.107,639,3.574,640,3.574,641,5.092,642,3.107,643,3.574,644,3.107,645,3.107,646,3.107,647,3.107,648,4.391,649,4.391,650,4.391,651,4.391,652,3.107]],["title/injectables/DataResponseInterceptor.html",[40,0.469,156,2.888]],["body/injectables/DataResponseInterceptor.html",[3,0.157,4,0.139,5,0.139,9,0.327,10,1.364,15,1.16,20,0.599,22,1.414,23,0.014,24,1.315,25,0.456,26,0.972,28,5.049,30,3.02,31,1.04,38,0.281,40,0.692,42,0.712,43,2.167,45,5.182,46,3.252,52,0.157,53,0.134,54,3.02,55,1.202,73,1.04,77,0.01,78,0.01,98,3.252,124,4.996,156,4.264,158,5.182,193,1.341,337,3.959,653,5.751,654,3.931,655,5.928,656,4.522,657,4.522,658,5.928,659,5.182,660,7.021,661,4.522,662,5.928,663,4.522,664,4.522,665,4.522,666,4.522,667,4.522,668,4.522]],["title/injectables/FindOneByGoogleIdProvider.html",[40,0.469,669,2.511]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.158,4,0.14,5,0.14,9,0.33,10,1.372,11,1.9,13,1.305,15,1.53,20,0.603,22,1.423,23,0.014,24,1.323,25,0.459,26,0.978,31,1.05,36,1.767,38,0.3,40,0.696,42,0.719,52,0.158,53,0.135,55,1.214,68,1.404,73,1.05,77,0.01,78,0.01,83,1.088,144,1.839,193,1.354,204,1.832,274,1.633,324,3.911,350,3.698,353,3.983,377,3.048,378,3.377,380,3.983,385,2.41,386,2.54,387,1.633,390,3.048,669,3.729,670,5.205,671,3.967,672,5.185,673,4.563,674,5.185,675,4.563,676,3.575]],["title/injectables/FindOneUserByEmailProvider.html",[40,0.469,677,2.511]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.139,4,0.124,5,0.124,9,0.291,10,1.26,11,1.783,13,1.149,15,1.405,20,0.554,22,1.307,23,0.014,24,1.215,25,0.422,26,0.898,31,0.924,36,1.658,37,3.05,38,0.285,39,1.438,40,0.64,41,2.513,42,0.633,52,0.139,53,0.119,55,1.069,64,2.402,65,1.961,66,1.841,68,1.237,72,1.841,73,1.26,77,0.009,78,0.009,83,1.86,86,2.855,144,1.62,193,1.192,204,1.719,274,1.438,309,1.762,324,3.67,377,2.684,378,3.21,380,4.164,384,2.237,385,2.123,386,2.237,387,1.438,390,2.684,396,1.384,438,3.149,597,3.494,617,3.149,670,4.884,676,3.149,677,3.426,678,3.494,679,4.764,680,4.019,681,4.764,682,4.019,683,3.149,684,3.494,685,4.019]],["title/injectables/GenerateTokensProvider.html",[40,0.469,247,2.235]],["body/injectables/GenerateTokensProvider.html",[3,0.117,4,0.104,5,0.104,9,0.245,10,1.118,11,1.958,13,1.39,15,1.246,16,2.653,17,5.525,18,4.468,19,4.149,20,0.575,22,1.482,23,0.014,24,1.261,25,0.478,26,0.932,31,1.118,38,0.291,39,2.034,40,0.567,42,0.533,43,1.623,44,1.993,47,1.993,52,0.117,53,0.1,55,1.292,56,2.435,59,1.702,61,3.246,67,5.401,68,1.496,73,1.118,77,0.008,78,0.008,80,1.788,83,1.633,86,2.604,87,2.435,90,2.358,193,1.004,204,1.888,247,2.705,268,2.653,274,1.739,278,2.653,293,2.653,315,4.225,342,3.495,474,2.653,544,2.261,686,4.867,687,2.653,688,4.86,689,4.86,690,3.386,691,4.86,692,3.386,693,4.86,694,6.212,695,4.867,696,3.386,697,3.807,698,3.386,699,2.435,700,2.944,701,3.386,702,2.944,703,2.944,704,2.944,705,2.944,706,2.944,707,2.944,708,4.225,709,3.386,710,3.386,711,3.386,712,3.386,713,2.944,714,3.386,715,3.386]],["title/classes/GetPostsBaseDto.html",[53,0.119,716,2.364]],["body/classes/GetPostsBaseDto.html",[3,0.165,4,0.147,5,0.147,9,0.345,20,0.62,23,0.014,25,0.522,26,1.174,38,0.305,52,0.165,53,0.212,77,0.01,78,0.01,85,1.574,208,1.632,348,1.523,365,3.253,370,1.642,412,1.922,413,2.519,417,3.185,451,4.479,491,4.532,716,3.994,717,4.532,718,5.9,719,4.88,720,6.137,721,4.769,722,4.769,723,4.413,724,3.416,725,2.981,726,3.185,727,2.519,728,2.807]],["title/classes/GetPostsBaseDto-1.html",[53,0.099,521,1.868,716,1.975]],["body/classes/GetPostsBaseDto-1.html",[3,0.168,4,0.15,5,0.15,9,0.352,20,0.628,23,0.014,25,0.478,26,1.183,36,1.919,38,0.291,52,0.168,53,0.203,77,0.011,78,0.011,85,1.594,208,1.653,348,1.553,365,3.283,370,1.674,412,1.96,491,4.574,716,4.031,717,4.574,719,4.925,723,4.469,724,3.459,725,3.04,726,3.247,727,2.568,728,2.862,729,3.809,730,5.954,731,6.214,732,4.862,733,4.862]],["title/classes/GetPostsDto.html",[53,0.119,727,2.121]],["body/classes/GetPostsDto.html",[3,0.179,4,0.159,5,0.159,23,0.014,25,0.398,38,0.314,52,0.179,53,0.218,77,0.011,78,0.011,348,1.65,365,3.376,370,1.779,412,2.083,413,2.729,417,3.451,451,4.037,491,4.704,716,4.146,717,3.451,718,4.493,719,3.716,723,5.066,724,3.921,725,3.23,726,3.451,727,3.411,728,3.801]],["title/classes/GetPostsDto-1.html",[53,0.099,521,1.868,727,1.772]],["body/classes/GetPostsDto-1.html",[3,0.183,4,0.162,5,0.162,23,0.014,36,1.74,38,0.303,52,0.183,53,0.211,77,0.011,78,0.011,348,1.686,365,3.409,370,1.817,412,2.127,491,4.749,716,4.186,717,3.525,719,3.796,723,5.114,724,3.958,725,3.299,726,3.525,727,3.456,728,3.851,729,4.135,730,4.588]],["title/classes/GetUsersParamDto.html",[53,0.119,734,2.682]],["body/classes/GetUsersParamDto.html",[3,0.172,4,0.153,5,0.153,9,0.36,20,0.503,23,0.014,25,0.533,26,1.034,38,0.295,52,0.172,53,0.205,77,0.011,78,0.011,83,1.504,85,1.617,90,2.384,91,3.155,208,1.323,348,1.589,365,3.023,370,1.714,396,1.714,400,3.51,412,2.006,413,2.628,428,3.899,429,3.943,490,4.535,494,4.535,734,4.212,735,4.941,736,4.327,737,5.483,738,4.977,739,4.977,740,4.327]],["title/classes/GetUsersParamsDto.html",[53,0.119,741,3.146]],["body/classes/GetUsersParamsDto.html",[3,0.172,4,0.153,5,0.153,9,0.36,20,0.503,23,0.014,25,0.533,26,1.034,38,0.295,52,0.172,53,0.205,77,0.011,78,0.011,83,1.504,85,1.617,90,2.384,91,3.155,208,1.323,348,1.589,365,3.023,370,1.714,396,1.714,400,3.51,412,2.006,413,2.628,428,3.899,429,3.943,490,4.535,494,4.535,735,4.941,737,5.483,740,4.327,741,4.941,742,4.327,743,4.977,744,4.977]],["title/controllers/GoogleAuthenticationController.html",[92,1.554,252,2.888]],["body/controllers/GoogleAuthenticationController.html",[3,0.159,4,0.141,5,0.141,9,0.332,10,1.377,11,1.906,13,1.313,15,1.178,20,0.464,22,1.095,23,0.014,24,1.018,25,0.353,26,0.753,31,1.056,38,0.312,42,0.723,52,0.159,53,0.136,55,1.221,68,1.413,73,1.056,77,0.01,78,0.01,92,1.777,94,1.929,201,2.87,202,2.425,204,1.838,208,1.221,217,2.556,220,1.913,224,3.992,225,2.87,226,3.992,227,3.302,229,3.067,234,3.597,248,4.166,252,4.307,267,3.992,274,1.643,745,5.206,746,3.992,747,4.591,748,5.988,749,5.206,750,3.992,751,5.017,752,4.591,753,4.591,754,4.591,755,3.992,756,4.591,757,4.591,758,4.591]],["title/injectables/GoogleAuthenticationService.html",[40,0.469,248,2.511]],["body/injectables/GoogleAuthenticationService.html",[3,0.114,4,0.101,5,0.101,9,0.238,10,1.093,11,1.597,13,1.937,15,1.218,18,3.417,19,4.089,20,0.619,22,1.133,23,0.014,24,1.054,25,0.43,26,0.779,31,1.093,38,0.304,39,1.174,40,0.555,41,2.051,42,0.517,43,1.573,47,1.931,48,2.571,52,0.114,53,0.097,54,2.191,55,1.485,56,2.36,59,3.077,64,1.438,65,1.7,66,1.503,68,1.719,72,1.503,73,1.093,77,0.008,78,0.008,83,1.46,85,1.218,86,2.176,87,2.36,193,0.973,202,1.733,204,1.54,229,2.191,247,3.889,248,2.97,253,1.931,262,2.191,271,3.277,274,1.174,277,2.051,280,2.191,309,1.438,350,1.826,352,3.417,353,3.173,354,3.417,391,2.191,686,2.571,699,2.36,749,4.131,750,4.131,751,4.339,755,2.853,759,5.649,760,2.853,761,5.585,762,6.774,763,3.281,764,4.751,765,3.281,766,3.281,767,2.853,768,5.585,769,2.853,770,3.281,771,3.281,772,4.751,773,3.281,774,3.281,775,3.281,776,3.281,777,3.281,778,3.281,779,3.281,780,3.281,781,3.281,782,3.281,783,3.281,784,2.571,785,3.281,786,3.281,787,2.853]],["title/classes/GoogleTokenDto.html",[53,0.119,751,2.682]],["body/classes/GoogleTokenDto.html",[3,0.194,4,0.172,5,0.172,9,0.405,20,0.566,23,0.014,25,0.431,36,1.804,38,0.238,52,0.194,53,0.201,61,4.874,77,0.012,78,0.012,85,1.739,208,1.488,348,1.787,364,3.498,370,1.927,751,4.53,788,5.897,789,4.384,790,5.596]],["title/injectables/HashingProvider.html",[40,0.469,246,2.235]],["body/injectables/HashingProvider.html",[3,0.163,4,0.145,5,0.145,9,0.341,10,1.4,20,0.615,22,1.452,23,0.014,24,1.35,25,0.468,26,0.998,31,1.4,32,4.458,36,2.096,38,0.2,40,0.711,42,0.742,52,0.163,53,0.139,77,0.01,78,0.01,193,1.397,246,3.388,331,5.864,332,5.292,333,4.093,334,6.575,335,5.864,337,4.505,338,5.292,791,4.093,792,7.696,793,4.708,794,4.708]],["title/modules/MailModule.html",[99,1.494,112,2.682]],["body/modules/MailModule.html",[3,0.141,4,0.125,5,0.125,11,1.165,23,0.014,38,0.309,39,1.458,42,0.642,43,1.953,52,0.141,53,0.121,65,1.458,74,1.953,77,0.009,78,0.009,83,0.972,99,2.336,101,1.953,102,1.953,103,2.152,104,2.152,105,1.953,106,3.316,107,3.316,112,4.96,118,2.921,119,2.152,120,2.048,122,2.398,124,4.193,173,3.542,177,3.542,183,3.542,198,3.694,202,2.152,434,2.93,441,3.078,589,4.924,795,3.542,796,3.542,797,3.542,798,4.074,799,5.531,800,4.074,801,4.074,802,3.192,803,3.542,804,4.074,805,5.531,806,4.074,807,4.074,808,4.074,809,4.074,810,4.074,811,4.074,812,4.074,813,4.074,814,4.074,815,4.074,816,4.074,817,3.542,818,4.074,819,4.074,820,4.074,821,4.074,822,4.074,823,3.542,824,4.074]],["title/injectables/MailService.html",[40,0.469,589,2.511]],["body/injectables/MailService.html",[3,0.159,4,0.142,5,0.142,9,0.333,10,1.38,11,1.909,15,1.181,20,0.607,22,1.431,23,0.014,24,1.48,25,0.462,26,0.983,30,3.076,31,1.059,38,0.284,40,0.701,42,0.725,52,0.159,53,0.136,55,1.225,68,1.417,77,0.01,78,0.01,83,1.749,86,2.109,98,3.312,193,1.366,198,4.007,204,1.84,434,3.312,589,3.751,699,3.312,713,5.217,802,3.608,817,4.004,825,4.004,826,6,827,4.606,828,7.518,829,4.606,830,6,831,4.606,832,4.606,833,4.606,834,6,835,4.606,836,4.606,837,4.606]],["title/entities/MetaOption.html",[838,2.121,839,2.235]],["body/entities/MetaOption.html",[3,0.142,4,0.126,5,0.126,9,0.297,20,0.713,23,0.014,25,0.56,36,1.476,38,0.236,52,0.142,53,0.121,77,0.009,78,0.009,85,1.424,90,1.912,91,2.645,136,4.048,146,2.561,208,1.876,220,2.449,387,1.466,441,3.09,451,4.219,458,4.826,523,4.528,525,3.655,838,2.932,839,3.09,840,3.562,841,5.474,842,5.474,843,5.474,844,4.097,845,4.528,846,4.097,847,2.946,848,3.992,849,4.097,850,3.562,851,5.551,852,4.826,853,4.097,854,4.097,855,5.474,856,4.097,857,3.992,858,3.562,859,5.551,860,4.826,861,3.21,862,3.21]],["title/controllers/MetaOptionsController.html",[92,1.554,863,2.888]],["body/controllers/MetaOptionsController.html",[3,0.159,4,0.142,5,0.142,9,0.333,10,1.38,11,1.909,13,1.317,15,1.181,20,0.466,22,1.099,23,0.014,24,1.021,25,0.354,26,0.755,31,1.059,38,0.284,39,1.648,42,0.725,52,0.159,53,0.136,55,1.225,73,1.059,77,0.01,78,0.01,92,1.783,94,1.935,135,3.016,136,3.34,201,2.879,204,1.84,208,1.225,217,3.34,220,2.258,274,1.648,297,2.483,388,2.019,437,3.971,500,3.312,525,3.016,823,5.217,863,4.315,864,4.004,865,4.004,866,4.606,867,4.421,868,4.004,869,4.004,870,4.606,871,4.606]],["title/modules/MetaOptionsModule.html",[99,1.494,113,2.682]],["body/modules/MetaOptionsModule.html",[3,0.164,4,0.145,5,0.145,23,0.014,38,0.314,42,0.744,52,0.164,53,0.14,77,0.01,78,0.01,94,2.562,99,2.513,101,2.264,102,2.264,103,2.495,104,2.495,105,2.264,106,3.568,107,3.568,113,5.144,118,3.221,119,2.495,120,2.374,122,2.78,135,3.065,136,2.629,143,3.154,144,1.904,525,2.374,839,2.629,863,4.858,867,5.035,868,4.106,869,4.106,872,4.106,873,4.106,874,4.106,875,4.723,876,3.154,877,4.723,878,4.723]],["title/injectables/MetaOptionsService.html",[40,0.469,867,2.511]],["body/injectables/MetaOptionsService.html",[3,0.151,4,0.135,5,0.135,9,0.317,10,1.334,11,1.861,13,1.251,15,1.488,20,0.586,22,1.384,23,0.014,24,1.286,25,0.446,26,0.951,31,1.006,38,0.307,40,0.677,42,0.689,52,0.151,53,0.13,68,1.346,73,1.006,77,0.01,78,0.01,135,2.915,144,1.763,193,1.298,204,1.795,220,1.397,231,2.199,274,1.565,297,2.158,378,3.457,385,2.311,387,1.565,388,1.918,420,3.427,437,3.915,500,3.146,525,3.271,839,3.229,865,5.043,867,3.627,876,2.922,879,5.658,880,3.804,881,4.375,882,4.375,883,5.043,884,4.375,885,3.804,886,4.375,887,4.375]],["title/interfaces/Paginated.html",[79,2.682,888,2.682]],["body/interfaces/Paginated.html",[3,0.174,4,0.155,5,0.155,9,0.364,23,0.014,25,0.601,36,2.003,52,0.174,77,0.011,78,0.011,79,3.358,81,3.938,85,1.628,90,2.516,135,3.672,161,3.938,337,4.88,659,3.938,695,5.449,888,4.239,889,4.371,890,6.352,891,7.306,892,4.371,893,4.371,894,4.371,895,4.371,896,4.371,897,4.371,898,4.371]],["title/modules/PaginationModule.html",[99,1.494,114,2.511]],["body/modules/PaginationModule.html",[3,0.178,4,0.158,5,0.158,23,0.014,38,0.274,42,0.811,52,0.178,53,0.152,77,0.011,78,0.011,99,2.616,101,2.468,102,2.468,103,2.72,104,2.72,105,2.468,106,3.714,107,3.714,114,4.91,118,3.403,119,2.72,120,2.588,899,4.477,900,4.477,901,4.477,902,5.095,903,5.149,904,5.149]],["title/injectables/PaginationProvider.html",[40,0.469,902,2.511]],["body/injectables/PaginationProvider.html",[3,0.111,4,0.099,5,0.099,9,0.233,10,1.077,11,1.579,13,0.92,15,1.416,20,0.474,22,1.317,23,0.014,24,1.039,25,0.425,26,0.768,31,0.74,32,2.928,34,4.609,38,0.303,39,1.976,40,0.547,42,0.507,49,2.52,52,0.111,53,0.095,55,0.856,59,3.381,65,1.151,68,1.441,73,0.74,77,0.01,78,0.008,127,2.149,135,1.617,161,2.52,193,0.954,204,1.523,297,1.197,337,2.149,378,3.329,387,1.676,447,1.894,466,3.669,521,3.376,659,2.52,695,2.52,724,3.376,726,2.149,888,2.149,890,2.797,892,2.797,893,4.802,894,2.797,895,4.802,896,2.797,897,2.797,898,2.797,902,2.928,905,2.797,906,5.523,907,3.217,908,3.217,909,4.072,910,3.217,911,3.217,912,4.684,913,3.217,914,3.217,915,3.217,916,3.217,917,3.217,918,2.797,919,7.116,920,6.447,921,2.797,922,3.217,923,4.684,924,3.217,925,3.217,926,3.217,927,3.217,928,3.217,929,3.217,930,3.217,931,4.684,932,3.217,933,3.217,934,4.684,935,3.217,936,3.217,937,3.217,938,3.217,939,3.217]],["title/classes/PaginationQueryDto.html",[53,0.119,724,2.235]],["body/classes/PaginationQueryDto.html",[3,0.164,4,0.146,5,0.146,9,0.343,20,0.618,23,0.014,25,0.521,26,1.172,38,0.26,52,0.164,53,0.2,73,1.09,77,0.01,78,0.01,85,1.567,90,2.609,208,1.625,238,4.082,348,1.513,365,3.243,370,1.632,413,2.503,447,3.982,521,3.402,724,3.402,725,4.23,918,4.119,940,4.119,941,5.3,942,4.788,943,5.314,944,6.112,945,4.738,946,4.738,947,6.765,948,5.314,949,3.712]],["title/classes/PatchPostDto.html",[53,0.119,950,2.682]],["body/classes/PatchPostDto.html",[3,0.175,4,0.155,5,0.155,9,0.365,20,0.51,23,0.014,25,0.388,38,0.296,52,0.175,53,0.188,77,0.011,78,0.011,85,1.631,90,2.19,91,3.168,208,1.341,220,2.031,297,1.877,348,1.611,364,3.049,370,1.737,396,1.737,411,4.248,412,2.033,415,2.969,417,3.369,465,4.386,494,4.574,541,3.628,728,3.744,950,4.248,951,5.53,952,6.361,953,6.361,954,5.044,955,5.044,956,3.952,957,4.386]],["title/classes/PatchUserDto.html",[53,0.119,958,2.511]],["body/classes/PatchUserDto.html",[3,0.2,4,0.177,5,0.177,23,0.014,38,0.294,52,0.2,53,0.171,77,0.012,78,0.012,83,1.376,297,2.147,348,1.843,389,3.212,401,2.9,412,2.326,728,4.066,956,4.521,958,4.319,959,4.521,960,5.017,961,6.007]],["title/classes/PatchUserDto-1.html",[53,0.099,521,1.868,958,2.098]],["body/classes/PatchUserDto-1.html",[3,0.2,4,0.177,5,0.177,23,0.014,38,0.294,52,0.2,53,0.171,77,0.012,78,0.012,297,2.147,348,1.843,351,4.15,389,3.212,401,2.9,728,4.066,956,4.521,958,4.319,959,4.521,961,6.007,962,5.017,963,5.017]],["title/entities/Post.html",[220,1.283,838,2.121]],["body/entities/Post.html",[3,0.085,4,0.075,5,0.075,9,0.177,20,0.719,23,0.014,25,0.588,26,1.166,36,1.829,37,2.121,38,0.269,52,0.085,53,0.072,74,3.593,77,0.007,78,0.007,83,1.446,85,0.977,90,1.312,91,1.966,135,1.915,136,1.362,140,3.202,146,1.53,208,1.892,220,1.495,238,3.528,387,0.876,418,4.069,419,4.069,420,4.485,421,5.129,422,4.069,423,3.366,424,3.126,425,3.126,426,2.926,427,4.069,437,1.293,441,3.644,451,2.383,478,4.485,499,1.635,500,1.76,505,2.128,506,2.128,509,5.692,525,1.23,546,3.366,559,2.741,699,1.76,838,2.013,839,2.94,845,3.366,847,4.708,848,5.348,850,2.128,857,4.837,860,3.313,862,2.986,876,1.635,964,2.128,965,2.447,966,3.811,967,6.063,968,2.447,969,4.593,970,2.447,971,4.75,972,4.75,973,3.313,974,2.447,975,2.447,976,3.811,977,2.447,978,2.447,979,3.811,980,2.447,981,2.447,982,3.313,983,2.447,984,2.447,985,2.128,986,3.811,987,2.447,988,2.447,989,3.313,990,2.447,991,3.811,992,3.313,993,3.811,994,2.447,995,2.447,996,2.447,997,2.447,998,2.447]],["title/controllers/PostsController.html",[92,1.554,999,2.888]],["body/controllers/PostsController.html",[3,0.1,4,0.089,5,0.089,9,0.209,10,0.995,13,0.827,15,0.741,20,0.582,22,1.374,23,0.014,24,1.277,25,0.443,26,0.944,31,1.325,36,1.38,38,0.294,42,0.455,52,0.1,53,0.086,55,0.769,65,1.549,73,1.325,77,0.007,78,0.007,80,3.042,82,1.931,83,1.471,90,1.786,91,1.818,92,1.119,94,1.214,201,1.807,204,2.038,208,1.532,217,2.409,220,2.204,231,1.453,232,2.079,239,5.008,388,1.267,396,1.983,412,1.165,415,3.81,425,2.891,434,4.142,541,3.731,544,1.931,697,4.064,727,3.042,950,4.324,957,3.763,999,3.113,1000,2.514,1001,3.113,1002,5.188,1003,4.328,1004,5.188,1005,4.328,1006,2.891,1007,4.328,1008,4.328,1009,4.328,1010,5.76,1011,4.328,1012,2.891,1013,2.891,1014,2.891,1015,3.243,1016,2.891,1017,2.891,1018,4.51,1019,4.328,1020,2.891,1021,2.891,1022,3.763,1023,4.328,1024,5.008,1025,2.891,1026,2.891,1027,2.514,1028,3.391,1029,3.763,1030,3.113,1031,3.243,1032,2.514,1033,4.51,1034,4.51,1035,2.514,1036,2.265,1037,2.079,1038,3.391,1039,2.265,1040,2.891,1041,2.891,1042,2.891,1043,2.891,1044,2.891,1045,2.891,1046,3.763,1047,3.763,1048,2.891,1049,2.891,1050,2.891,1051,2.891,1052,2.891]],["title/modules/PostsModule.html",[99,1.494,115,2.682]],["body/modules/PostsModule.html",[3,0.141,4,0.126,5,0.126,23,0.014,38,0.33,42,0.644,52,0.141,53,0.121,77,0.009,78,0.009,94,2.328,99,2.339,101,1.958,102,1.958,103,2.158,104,2.158,105,1.958,106,3.321,107,2.158,114,4.543,115,5.327,116,4.543,117,4.277,118,2.926,119,2.158,120,2.053,122,3.261,136,2.274,143,2.729,144,1.647,220,1.305,260,3.552,525,2.053,532,4.543,542,3.201,839,3.084,876,2.729,999,4.522,1031,4.543,1032,3.552,1053,3.552,1054,4.086,1055,3.552,1056,4.086,1057,4.086,1058,4.086,1059,4.086,1060,3.552,1061,3.552,1062,4.086]],["title/injectables/PostsService.html",[40,0.469,1031,2.511]],["body/injectables/PostsService.html",[3,0.068,4,0.061,5,0.061,9,0.143,10,0.738,11,1.923,13,1.471,15,0.823,20,0.52,22,1.227,23,0.014,24,1.141,25,0.396,26,0.843,31,1.183,32,2.006,34,2.537,36,1.079,37,1.786,38,0.295,39,1.841,40,0.375,42,0.311,52,0.068,53,0.058,55,1.368,64,2.255,65,2.168,66,2.526,68,1.697,72,1.858,73,1.183,74,0.945,77,0.005,78,0.005,80,2.469,82,1.317,83,1.227,85,0.506,90,1.61,91,1.964,136,1.098,140,1.042,144,0.795,187,2.388,193,0.585,204,1.854,217,1.098,220,2.057,271,0.903,274,1.452,277,1.233,297,1.509,309,2.417,317,1.317,320,2.918,378,2.786,384,2.602,385,1.042,387,0.706,388,0.865,396,1.397,415,3.028,426,3.788,438,1.545,447,1.161,484,1.545,525,0.991,532,3.788,535,3.528,536,3.372,538,2.79,540,2.308,541,2.918,542,1.545,543,1.715,544,1.317,545,1.715,547,2.308,554,1.715,557,1.715,558,1.545,601,1.715,606,3.179,607,3.179,608,3.179,609,3.362,610,3.179,683,1.545,697,3.179,727,2.469,839,1.098,876,1.317,883,4.065,885,1.715,888,1.317,902,3.788,941,1.545,950,3.436,1001,3.362,1015,2.006,1018,2.79,1031,2.006,1036,1.545,1037,1.418,1061,1.715,1063,1.715,1064,3.528,1065,4.057,1066,1.972,1067,1.972,1068,1.972,1069,3.209,1070,2.514,1071,1.972,1072,1.972,1073,1.972,1074,3.209,1075,1.972,1076,1.972,1077,1.972,1078,1.972,1079,1.972,1080,1.972,1081,1.972,1082,1.972,1083,1.972,1084,1.545,1085,1.972,1086,1.972,1087,1.972,1088,2.79,1089,1.972,1090,1.972,1091,1.715,1092,3.209,1093,1.972,1094,3.209,1095,1.972,1096,3.209,1097,1.972,1098,3.209,1099,1.972,1100,3.209,1101,1.972,1102,3.209,1103,1.972,1104,3.209,1105,1.972,1106,1.972,1107,1.715,1108,1.972,1109,1.972,1110,1.972,1111,1.715]],["title/classes/RefreshTokenDto.html",[53,0.119,207,2.511]],["body/classes/RefreshTokenDto.html",[3,0.192,4,0.171,5,0.171,9,0.402,20,0.562,23,0.014,25,0.428,36,1.795,38,0.236,52,0.192,53,0.2,77,0.012,78,0.012,85,1.732,207,4.221,208,1.477,348,1.774,364,3.236,366,3.974,370,1.913,708,6.324,789,4.351,1112,5.87,1113,5.554,1114,5.554]],["title/injectables/RefreshTokensProvider.html",[40,0.469,249,2.511]],["body/injectables/RefreshTokensProvider.html",[3,0.119,4,0.106,5,0.106,9,0.249,10,1.131,11,1.641,13,1.79,15,1.261,16,2.696,17,5.677,18,4.501,19,4.18,20,0.497,22,1.173,23,0.014,24,1.09,25,0.378,26,0.806,31,0.791,38,0.308,39,2.239,40,0.574,41,2.151,42,0.542,43,1.649,44,2.025,47,2.025,52,0.119,53,0.102,55,1.664,56,2.475,59,2.471,61,2.298,64,1.508,65,1.231,66,1.576,68,1.765,69,2.992,72,1.576,73,0.791,77,0.008,78,0.008,80,1.817,83,1.368,87,2.475,187,2.025,193,1.021,203,3.852,204,1.582,206,3.852,207,4.138,210,2.992,228,2.696,229,2.298,231,1.729,247,4.033,249,3.074,253,2.025,262,2.298,268,2.696,271,3.319,274,1.231,277,2.151,278,2.696,279,2.696,280,2.298,309,1.508,342,3.536,544,2.298,684,2.992,687,2.696,700,2.992,702,2.992,703,2.992,704,2.992,705,2.992,706,2.992,707,2.992,784,2.696,787,2.992,1115,4.987,1116,3.441,1117,3.441,1118,3.441,1119,2.696,1120,3.441,1121,3.441]],["title/classes/SignInDto.html",[53,0.119,213,2.511]],["body/classes/SignInDto.html",[3,0.183,4,0.163,5,0.163,9,0.383,20,0.663,23,0.014,25,0.505,36,1.979,38,0.225,52,0.183,53,0.194,77,0.011,78,0.011,85,1.682,86,3.262,181,4.453,208,1.744,213,4.1,348,1.692,363,5.137,364,3.414,369,3.537,370,1.824,585,4.605,1122,4.605,1123,5.296,1124,5.296,1125,5.296,1126,5.296]],["title/injectables/SignInProvider.html",[40,0.469,250,2.511]],["body/injectables/SignInProvider.html",[3,0.122,4,0.109,5,0.109,9,0.256,10,1.152,11,1.664,13,1.664,15,1.284,20,0.506,22,1.194,23,0.014,24,1.11,25,0.385,26,0.821,31,0.812,38,0.284,39,2.082,40,0.585,41,2.208,42,0.556,52,0.122,53,0.105,55,1.547,61,2.358,64,2.551,65,1.792,66,1.617,68,1.791,72,1.617,73,0.812,77,0.009,78,0.009,83,1.388,86,1.617,91,1.483,181,3.131,193,1.048,204,1.605,205,3.923,212,3.923,213,4.179,223,2.766,231,1.775,246,4.061,247,4.061,250,3.131,253,2.078,262,2.358,270,2.766,271,3.27,274,1.263,277,2.208,279,2.766,280,2.358,293,2.766,309,1.548,341,3.07,342,3.601,384,1.965,396,1.216,441,1.965,547,2.54,603,3.07,617,2.766,683,2.766,784,2.766,1127,5.059,1128,3.07,1129,3.531,1130,3.531,1131,3.531,1132,3.531,1133,3.531,1134,3.531,1135,3.531,1136,3.07,1137,5.819,1138,3.531,1139,5.008,1140,3.531,1141,3.531,1142,3.531,1143,3.531,1144,3.531,1145,3.531]],["title/entities/Tag.html",[140,2.121,838,2.121]],["body/entities/Tag.html",[3,0.108,4,0.096,5,0.096,9,0.226,20,0.74,23,0.014,24,1.204,25,0.593,36,1.947,38,0.195,52,0.108,53,0.092,74,3.509,77,0.008,78,0.008,85,1.175,90,1.578,91,2.28,140,2.42,146,1.952,208,1.947,220,2.126,387,1.117,396,1.869,423,3.904,424,3.625,441,3.329,451,4.162,559,4.301,562,4.72,838,2.42,841,4.72,842,4.72,843,4.72,845,3.904,847,4.58,848,5.265,852,3.984,855,4.72,857,4.948,858,4.72,861,2.446,862,3.59,969,5.2,971,5.216,972,5.216,973,3.984,982,3.984,985,2.715,989,3.984,992,3.984,1001,3.904,1015,1.952,1107,3.984,1146,2.715,1147,5.428,1148,3.122,1149,3.122,1150,3.122,1151,3.122,1152,3.122,1153,3.122,1154,3.122,1155,3.122,1156,3.122,1157,3.122,1158,3.122,1159,3.122,1160,3.122,1161,3.122,1162,3.122,1163,3.122]],["title/controllers/TagsController.html",[92,1.554,1164,2.888]],["body/controllers/TagsController.html",[3,0.138,4,0.123,5,0.123,9,0.289,10,1.256,13,1.143,15,1.025,20,0.629,22,1.483,23,0.014,24,1.379,25,0.479,26,1.019,31,1.43,38,0.265,39,1.43,42,0.63,52,0.138,53,0.118,55,1.063,73,1.43,77,0.009,78,0.009,90,2.486,91,2.806,92,1.547,94,1.679,201,2.499,204,2.104,208,1.653,217,2.225,220,1.986,297,2.031,388,1.752,426,2.499,501,4.513,503,3.132,536,3.719,1015,4.62,1028,4.871,1030,2.875,1070,3.132,1164,3.926,1165,3.476,1166,5.459,1167,3.476,1168,3.998,1169,3.998,1170,3.998,1171,5.459,1172,3.998,1173,3.476,1174,3.998,1175,3.998,1176,3.998,1177,3.998,1178,3.998,1179,3.998,1180,3.998]],["title/modules/TagsModule.html",[99,1.494,116,2.511]],["body/modules/TagsModule.html",[3,0.166,4,0.148,5,0.148,23,0.014,38,0.316,42,0.756,52,0.166,53,0.142,77,0.011,78,0.011,94,2.589,99,2.532,101,2.301,102,2.301,103,2.535,104,2.535,105,2.301,106,3.595,107,3.595,116,4.833,118,3.255,119,2.535,120,2.412,122,2.825,140,2.535,143,3.205,144,1.934,536,4.493,1164,4.895,1173,4.173,1181,4.173,1182,4.173,1183,4.173,1184,4.799,1185,4.173,1186,4.799,1187,4.799]],["title/injectables/TagsService.html",[40,0.469,536,2.235]],["body/injectables/TagsService.html",[3,0.119,4,0.105,5,0.105,9,0.248,10,1.127,11,2.186,13,0.98,15,1.257,20,0.668,22,1.576,23,0.014,24,1.465,25,0.509,26,1.083,31,1.436,38,0.281,39,1.226,40,0.572,42,0.54,52,0.119,53,0.101,55,0.911,68,1.922,73,1.436,74,2.349,77,0.011,78,0.008,90,2.537,91,2.776,140,2.588,144,1.38,193,1.016,204,2.108,274,2.234,297,1.823,378,2.993,385,1.809,387,1.226,388,1.501,426,2.141,501,4.131,503,2.683,536,2.727,1015,3.063,1070,3.839,1111,2.978,1167,4.26,1185,2.978,1188,2.978,1189,4.9,1190,4.9,1191,3.425,1192,3.425,1193,5.721,1194,3.425,1195,3.425,1196,4.9,1197,3.425,1198,4.9,1199,3.425,1200,3.425,1201,3.425,1202,3.425,1203,3.425,1204,3.425,1205,3.425,1206,3.425,1207,3.425]],["title/entities/User.html",[83,0.958,838,2.121]],["body/entities/User.html",[3,0.12,4,0.106,5,0.106,9,0.25,20,0.717,23,0.014,25,0.589,26,1.028,36,1.992,38,0.245,52,0.12,53,0.146,74,3.305,77,0.008,78,0.008,83,1.177,85,1.265,86,2.634,90,1.699,91,2.416,146,2.161,181,3.595,208,1.887,220,2.202,352,4.136,353,3.841,354,4.136,387,1.237,413,1.826,441,3.491,559,3.548,838,2.605,845,4.136,847,4.769,848,5.387,857,4.959,861,2.708,971,5.868,972,5.684,1001,4.136,1208,3.006,1209,7.256,1210,3.457,1211,3.457,1212,4.933,1213,3.457,1214,3.457,1215,3.457,1216,3.457,1217,3.457,1218,4.933,1219,3.457,1220,4.933,1221,5.751]],["title/controllers/UsersController.html",[92,1.554,1222,2.888]],["body/controllers/UsersController.html",[1,1.518,3,0.089,4,0.079,5,0.079,6,1.855,7,1.613,9,0.187,10,0.913,13,0.738,15,0.662,20,0.549,22,1.296,23,0.014,24,1.374,25,0.513,26,0.89,31,1.25,38,0.297,42,0.406,52,0.089,53,0.076,55,0.686,65,1.42,73,1.425,77,0.007,78,0.007,90,2.54,92,0.998,94,1.084,129,1.855,201,1.613,202,1.362,204,1.987,208,1.445,217,1.436,220,1.268,225,1.613,227,1.855,231,1.296,232,1.855,234,2.021,271,2.216,292,2.243,294,2.021,388,1.74,389,2.209,396,2.133,397,3.646,398,3.025,400,3.591,401,3.113,404,4.256,412,1.04,425,1.723,429,3.396,441,3.024,447,3.921,521,2.209,548,3.109,626,1.855,734,3.628,941,4.853,943,2.243,948,3.451,958,4.164,1015,1.613,1024,3.451,1027,3.451,1028,3.79,1029,4.206,1030,3.907,1033,3.451,1034,3.451,1035,2.243,1036,2.021,1037,1.855,1046,2.243,1047,3.451,1222,2.855,1223,2.243,1224,3.969,1225,3.969,1226,4.838,1227,3.969,1228,2.579,1229,3.969,1230,2.579,1231,2.579,1232,2.579,1233,2.579,1234,2.579,1235,2.579,1236,3.969,1237,3.969,1238,3.969,1239,2.579,1240,3.969,1241,2.579,1242,3.969,1243,3.969,1244,2.579,1245,3.969,1246,3.969,1247,3.451,1248,2.579,1249,3.451,1250,2.579,1251,2.579,1252,2.579,1253,2.579,1254,2.579,1255,2.579,1256,2.579,1257,2.579,1258,2.579,1259,2.579,1260,2.579,1261,2.243,1262,2.243,1263,4.838,1264,2.579,1265,2.579,1266,2.579,1267,2.243,1268,2.579,1269,2.579,1270,2.579,1271,2.579,1272,2.579,1273,2.579,1274,2.243,1275,2.579,1276,2.579,1277,2.579,1278,2.579,1279,2.579,1280,2.579]],["title/injectables/UsersCreateManyProvider.html",[40,0.469,1281,2.511]],["body/injectables/UsersCreateManyProvider.html",[3,0.12,4,0.107,5,0.107,9,0.251,10,1.136,11,1.647,13,0.991,15,1.267,20,0.5,22,1.179,23,0.014,24,1.096,25,0.38,26,0.81,31,0.797,38,0.267,39,1.24,40,0.577,42,0.546,52,0.12,53,0.103,59,1.742,64,2.524,65,2.06,66,2.637,68,2.124,72,2.637,73,0.797,77,0.008,78,0.008,83,1.497,187,2.04,193,1.028,204,1.588,274,1.24,297,2.335,309,2.524,310,3.013,383,2.492,384,2.75,386,1.929,387,1.24,388,1.519,391,2.314,396,1.193,397,3.906,398,2.166,620,3.871,621,3.013,622,6.312,624,3.871,626,2.492,627,4.296,628,4.296,629,3.013,630,3.013,631,3.013,632,3.013,634,3.013,635,3.013,636,3.013,637,3.013,638,3.013,641,4.296,642,3.013,644,3.013,645,3.013,646,3.013,647,3.013,648,3.013,649,3.013,650,4.296,651,3.013,652,3.013,949,2.715,1030,4.141,1084,2.715,1281,3.089,1282,5.007,1283,3.013,1284,3.465,1285,3.465,1286,4.941,1287,4.941,1288,3.465,1289,3.465,1290,3.465,1291,3.465,1292,3.465,1293,3.465,1294,3.465]],["title/modules/UsersModule.html",[99,1.494,117,2.364]],["body/modules/UsersModule.html",[1,2.044,3,0.12,4,0.107,5,0.107,6,2.498,7,2.171,23,0.014,38,0.337,42,0.547,43,1.665,44,2.044,47,2.044,48,2.721,52,0.12,53,0.103,77,0.008,78,0.008,83,1.18,94,2.079,99,2.145,101,1.665,102,1.665,103,1.834,104,1.834,105,1.665,106,3.045,107,3.045,111,3.094,117,4.661,118,2.614,119,1.834,120,1.746,122,2.044,123,2.721,125,3.02,127,2.32,129,2.498,134,2.721,143,2.32,144,1.4,253,2.913,271,3.51,297,1.292,324,2.913,350,2.755,373,4.317,386,1.933,587,4.317,669,4.317,677,4.317,1060,4.303,1222,4.147,1262,3.02,1281,4.317,1295,3.02,1296,3.02,1297,3.02,1298,3.473,1299,3.473,1300,4.303,1301,4.949,1302,3.02,1303,3.473,1304,3.473,1305,3.02,1306,3.02,1307,3.02,1308,3.02,1309,3.473,1310,3.473]],["title/injectables/UsersService.html",[40,0.469,271,1.839]],["body/injectables/UsersService.html",[3,0.064,4,0.057,5,0.057,9,0.134,10,0.702,11,2.047,13,1.619,15,0.782,19,3.009,20,0.598,22,1.411,23,0.014,24,1.311,25,0.455,26,0.969,31,1.302,34,2.43,36,1.424,37,1.032,38,0.295,39,1.916,40,0.356,42,0.292,43,0.889,52,0.064,53,0.115,55,1.505,64,1.704,65,1.916,66,1.397,68,1.648,72,0.849,73,1.232,77,0.005,78,0.005,83,1.652,86,1.397,90,2.11,91,2.092,92,1.181,124,1.238,144,0.747,193,0.55,204,2.072,219,1.612,231,0.932,271,1.397,274,1.916,297,1.992,309,1.975,320,1.333,322,2.652,324,2.931,347,3.577,350,2.164,353,1.238,373,3.697,376,2.652,377,1.238,378,2.159,380,2.596,381,2.652,384,1.698,385,0.979,386,1.032,387,0.663,388,1.704,389,1.698,390,1.238,396,1.339,397,2.931,398,1.159,400,3.151,401,2.503,425,1.238,447,2.288,540,1.333,547,3.24,587,3.539,588,2.652,591,2.652,595,2.652,606,1.452,607,1.452,608,1.452,609,1.333,610,1.452,611,1.612,615,1.612,620,2.39,624,2.39,626,1.333,669,2.816,672,2.652,674,2.652,676,1.452,677,3.697,679,2.652,681,2.652,734,3.009,767,1.612,1037,1.333,1064,3.38,1088,3.38,1091,1.612,1119,2.39,1136,4.656,1247,3.916,1249,2.652,1261,1.612,1281,3.539,1300,2.652,1302,1.612,1305,1.612,1306,1.612,1307,1.612,1308,1.612,1311,1.612,1312,5.355,1313,3.051,1314,3.887,1315,4.505,1316,1.854,1317,1.854,1318,1.854,1319,1.854,1320,1.854,1321,3.887,1322,1.854,1323,3.051,1324,3.051,1325,1.854,1326,1.854,1327,3.051,1328,1.854,1329,3.051,1330,1.854,1331,1.854,1332,1.854,1333,3.051,1334,1.854,1335,1.854,1336,1.854,1337,1.854,1338,1.854,1339,1.854,1340,1.854,1341,1.854,1342,1.854,1343,1.854,1344,1.854,1345,1.854,1346,1.854]],["title/coverage.html",[1347,4.29]],["body/coverage.html",[0,2.509,1,1.288,5,0.067,6,1.573,7,1.368,8,1.902,23,0.014,25,0.168,40,0.887,50,1.714,53,0.222,65,0.783,77,0.006,78,0.006,79,2.33,80,1.155,82,1.461,83,1.184,84,1.902,92,2.347,93,1.573,95,1.902,96,1.368,105,1.049,121,1.714,132,1.573,135,1.099,136,1.942,140,1.155,156,1.573,158,1.714,163,1.714,194,1.902,199,1.573,200,1.902,202,1.155,207,1.368,213,1.368,220,1.39,221,1.368,246,1.218,247,1.218,248,1.368,249,1.368,250,1.368,252,1.573,255,1.573,269,1.902,271,1.002,283,1.902,291,1.714,297,0.814,324,2.053,330,1.902,347,1.461,349,3.129,350,2.422,351,3.129,373,1.368,374,3.129,375,2.733,397,1.288,398,1.368,399,1.902,400,2.422,401,1.099,415,1.288,416,1.902,417,3.316,437,1.842,499,2.33,501,1.368,502,1.714,525,2.726,526,1.902,529,1.902,532,1.368,533,1.902,534,1.902,536,1.218,561,1.902,587,1.368,589,1.368,618,1.714,619,1.902,653,1.902,654,1.902,669,1.368,670,2.733,671,1.902,677,1.368,678,1.902,686,1.714,687,2.733,716,2.053,717,3.316,724,1.218,725,1.368,727,1.842,729,2.733,734,1.461,735,2.733,736,1.902,741,1.714,742,1.902,745,1.902,746,1.902,751,1.461,759,1.902,760,1.902,788,1.902,789,2.733,791,1.902,825,1.902,838,2.622,839,1.218,840,1.902,863,1.573,864,1.902,867,1.368,879,1.902,880,1.902,888,1.461,889,1.902,902,1.368,905,1.902,940,1.902,950,1.461,951,1.902,958,2.181,959,2.733,960,1.902,964,1.902,999,1.573,1000,1.902,1031,1.368,1038,1.714,1039,1.714,1063,1.902,1112,1.902,1115,1.902,1122,1.902,1127,1.902,1128,1.902,1146,1.902,1164,1.573,1165,1.902,1188,1.902,1208,1.902,1222,1.573,1223,1.902,1281,1.368,1282,1.902,1283,1.902,1311,1.902,1347,1.714,1348,1.902,1349,2.188,1350,2.188,1351,8.199,1352,7.198,1353,5.424,1354,6.794,1355,7.455,1356,1.902,1357,1.902,1358,3.033,1359,5.424,1360,5.78,1361,2.188,1362,2.188,1363,2.188,1364,2.188,1365,1.902,1366,2.188,1367,2.188,1368,2.188,1369,2.188,1370,3.488,1371,2.188,1372,2.188,1373,2.188,1374,2.188]],["title/dependencies.html",[102,2.315,1375,2.918]],["body/dependencies.html",[23,0.014,42,0.773,43,2.354,44,2.89,46,3.532,49,3.847,53,0.185,77,0.011,78,0.011,102,2.354,127,3.28,144,1.979,198,3.28,202,2.594,340,3.847,350,2.733,370,1.691,387,1.757,412,1.979,413,2.594,769,4.269,802,3.847,962,4.269,963,4.269,1376,4.911,1377,4.911,1378,4.911,1379,6.88,1380,4.911,1381,4.911,1382,4.911,1383,4.911,1384,4.911,1385,4.911,1386,4.911,1387,4.911,1388,4.911,1389,4.911,1390,4.911,1391,4.911,1392,4.911,1393,4.911,1394,4.911,1395,4.911,1396,4.911,1397,4.911,1398,4.911,1399,4.911,1400,4.911,1401,4.911,1402,4.911]],["title/miscellaneous/enumerations.html",[1403,2.098,1404,4.198]],["body/miscellaneous/enumerations.html",[9,0.33,23,0.014,77,0.01,78,0.01,220,2.25,225,3.729,294,3.575,421,5.52,447,4.147,448,6.126,452,6.126,478,5.52,479,6.126,480,6.126,481,6.126,510,6.126,942,6.389,1274,3.967,1403,2.853,1404,3.967,1405,4.563,1406,7.046,1407,4.563,1408,5.964,1409,5.964,1410,4.563,1411,4.563,1412,4.563,1413,5.964,1414,4.563]],["title/miscellaneous/functions.html",[1403,2.098,1415,4.198]],["body/miscellaneous/functions.html",[9,0.451,23,0.012,77,0.012,78,0.012,105,3.66,1365,5.417,1403,3.895,1415,5.417,1416,6.231]],["title/index.html",[9,0.243,1417,3.356,1418,3.356]],["body/index.html",[4,0.097,23,0.013,77,0.008,78,0.008,120,3.359,198,4.727,314,2.744,317,4.463,378,1.513,396,1.087,429,3.758,445,2.744,546,2.269,548,2.472,558,2.472,604,2.744,609,3.321,803,2.744,921,2.744,949,2.472,1022,2.744,1084,2.472,1119,2.472,1267,5.81,1347,2.472,1348,4.015,1419,3.156,1420,3.156,1421,5.462,1422,4.618,1423,3.156,1424,3.156,1425,3.156,1426,3.156,1427,4.618,1428,5.462,1429,3.156,1430,3.156,1431,6.011,1432,3.156,1433,7.078,1434,3.156,1435,6.903,1436,3.156,1437,3.156,1438,4.618,1439,3.156,1440,4.618,1441,3.156,1442,5.462,1443,3.156,1444,4.618,1445,3.156,1446,3.156,1447,3.156,1448,3.156,1449,3.156,1450,6.011,1451,3.156,1452,4.618,1453,3.156,1454,3.156,1455,4.618,1456,6.011,1457,4.618,1458,3.156,1459,4.618,1460,6.683,1461,6.011,1462,3.156,1463,4.618,1464,3.156,1465,3.156,1466,3.156,1467,3.156,1468,6.011,1469,3.156,1470,3.156,1471,3.156,1472,3.156,1473,4.618,1474,3.156,1475,3.156,1476,3.156,1477,3.156,1478,3.156,1479,4.618,1480,3.156,1481,3.156,1482,3.156,1483,4.618,1484,3.156,1485,3.156,1486,5.226,1487,3.156,1488,3.156,1489,3.156,1490,3.156,1491,3.156,1492,3.156,1493,3.156,1494,3.156,1495,4.618,1496,3.156,1497,3.156,1498,3.156,1499,3.156,1500,5.462,1501,3.156,1502,3.156,1503,3.156,1504,3.156,1505,4.618,1506,3.156,1507,3.156,1508,3.156,1509,3.156,1510,4.618,1511,3.156,1512,3.156,1513,3.156,1514,4.618,1515,4.618,1516,3.156,1517,3.156,1518,3.156,1519,3.156,1520,3.156,1521,3.156,1522,3.156,1523,3.156,1524,3.156,1525,3.156,1526,3.156,1527,3.156,1528,3.156,1529,3.156,1530,3.156,1531,2.744]],["title/modules.html",[101,2.625]],["body/modules.html",[23,0.011,77,0.011,78,0.011,100,3.936,101,2.623,111,3.421,112,3.655,113,3.655,114,3.421,115,3.655,116,3.421,117,3.221,1486,6.983,1532,8.031,1533,8.031,1534,8.031]],["title/overview.html",[1535,4.761]],["body/overview.html",[2,2.396,23,0.014,77,0.008,78,0.008,81,2.396,94,1.285,96,3.353,99,1.138,100,5.623,101,1.466,102,1.466,103,1.615,104,1.615,105,1.466,106,1.615,107,1.615,108,2.659,109,2.659,110,2.659,111,4.8,112,4.413,113,4.413,114,4.273,115,5.044,116,4.273,117,4.577,118,2.383,119,1.615,120,1.537,146,1.912,193,0.907,221,4.273,243,2.659,244,2.659,245,2.659,246,3.295,247,2.985,248,3.353,249,3.353,250,3.353,271,3.13,348,0.977,373,3.353,522,3.923,532,3.353,536,3.804,587,3.353,589,4.273,669,3.353,677,3.353,795,2.659,796,2.659,797,2.659,867,4.273,872,2.659,873,2.659,874,2.659,899,2.659,900,2.659,901,2.659,902,4.273,1031,3.353,1053,2.659,1055,2.659,1181,2.659,1182,2.659,1183,2.659,1281,3.353,1295,2.659,1296,2.659,1297,2.659,1535,2.659,1536,3.058,1537,3.058,1538,3.058,1539,3.058,1540,3.058]],["title/properties.html",[85,1.238,1375,2.918]],["body/properties.html",[23,0.014,77,0.012,78,0.012,85,1.578,396,2.119,546,4.425,1531,5.35,1541,6.153,1542,6.153,1543,6.153]],["title/miscellaneous/variables.html",[1403,2.098,1544,4.198]],["body/miscellaneous/variables.html",[9,0.339,23,0.014,25,0.467,28,3.365,34,2.925,36,1.612,37,2.604,50,4.749,59,3.046,71,4.067,73,1.076,77,0.01,78,0.01,80,3.202,83,1.697,121,3.665,163,4.749,164,4.067,202,3.202,225,3.79,238,4.922,291,4.749,301,5.27,909,4.067,942,5.773,1038,4.749,1039,3.665,1356,4.067,1357,5.27,1358,4.067,1403,2.925,1544,4.067,1545,4.678,1546,6.062,1547,4.678,1548,4.678,1549,4.678,1550,7.113,1551,4.678,1552,4.678,1553,4.678,1554,4.678,1555,4.678,1556,4.678,1557,4.678]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1351,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1542,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1388,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1400,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1402,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1387,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1352,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1354,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1355,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1359,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1370,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":454,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":521,"title":{"classes/CreatePostMetaOptionsDto-1.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto-1.html":{},"classes/PatchUserDto-1.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1377,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":1364,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1369,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":943,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1379,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1385,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1381,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":973,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":1244,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":740,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":743,"title":{},"body":{"classes/GetUsersParamsDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":738,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16",{"_index":1368,"title":{},"body":{"coverage.html":{}}}],["16t07:46:32+0000",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isdate()@isoptional",{"_index":455,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1393,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":522,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["2.0.2",{"_index":1378,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":1382,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1540,"title":{},"body":{"overview.html":{}}}],["200",{"_index":1024,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["2024",{"_index":453,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["22",{"_index":1539,"title":{},"body":{"overview.html":{}}}],["2525",{"_index":812,"title":{},"body":{"modules/MailModule.html":{}}}],["256",{"_index":982,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.1.10",{"_index":1390,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1380,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1538,"title":{},"body":{"overview.html":{}}}],["4/9",{"_index":1372,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1371,"title":{},"body":{"coverage.html":{}}}],["5.1.1",{"_index":1386,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":989,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6.9.13",{"_index":1395,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1537,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1384,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1401,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1536,"title":{},"body":{"overview.html":{}}}],["8.11.5",{"_index":1397,"title":{},"body":{"dependencies.html":{}}}],["88",{"_index":1337,"title":{},"body":{"injectables/UsersService.html":{}}}],["9",{"_index":469,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["9.11.0",{"_index":1391,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1209,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["above",{"_index":1132,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["abstract",{"_index":792,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["acces",{"_index":319,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["access",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["accesstoken",{"_index":315,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["activeuser",{"_index":1038,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":80,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":821,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":1160,"title":{},"body":{"entities/Tag.html":{}}}],["address",{"_index":89,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["allowing",{"_index":1474,"title":{},"body":{"index.html":{}}}],["already",{"_index":612,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["amazing",{"_index":1520,"title":{},"body":{"index.html":{}}}],["api",{"_index":1247,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["apioperation",{"_index":1033,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1007,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":411,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@matches(/^[a",{"_index":571,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":567,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":465,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":444,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":487,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":402,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{}}}],["apipropertyoptional",{"_index":490,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":569,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":563,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":565,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{}}}],["apipropertyoptional({type",{"_index":439,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":1263,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":1034,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":1035,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":1042,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1265,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":667,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app.controller",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["app_interceptor",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":93,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1267,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1239,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1427,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":100,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":96,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":403,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["assign",{"_index":1106,"title":{},"body":{"injectables/PostsService.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":702,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["auth(authtype.none)@httpcode(httpstatus.ok)@post('refresh",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":747,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guards/access",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":199,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":749,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":757,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":750,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":748,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":746,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:15",{"_index":753,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":760,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:18",{"_index":764,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:28",{"_index":766,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:34",{"_index":765,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":132,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":305,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":111,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":546,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":549,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["authorised",{"_index":325,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authservice",{"_index":221,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":300,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":284,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":301,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":306,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1463,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1521,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":540,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('please",{"_index":555,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["badrequestexception('the",{"_index":1091,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":548,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":923,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":340,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":346,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":344,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":345,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":255,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1411,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["blog",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":1513,"title":{},"body":{"index.html":{}}}],["body",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreatePostProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1138,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1534,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1532,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1422,"title":{},"body":{"index.html":{}}}],["calculate",{"_index":928,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["callhandler",{"_index":660,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["care",{"_index":1134,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["cascade",{"_index":862,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":853,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["catch((err",{"_index":328,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":1338,"title":{},"body":{"injectables/UsersService.html":{}}}],["changed",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["changes",{"_index":1291,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["channel",{"_index":1488,"title":{},"body":{"index.html":{}}}],["character",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":580,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":317,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["class",{"_index":53,"title":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":348,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1260,"title":{},"body":{"controllers/UsersController.html":{}}}],["clicks",{"_index":1473,"title":{},"body":{"index.html":{}}}],["clientid",{"_index":770,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":772,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cloud",{"_index":1458,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":795,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":797,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":796,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":872,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":873,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":874,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":899,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":900,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":901,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1053,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1054,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1055,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1181,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1182,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1183,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1295,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1296,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1297,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collect",{"_index":633,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["column",{"_index":857,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":847,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1480,"title":{},"body":{"index.html":{}}}],["commit",{"_index":640,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["common/interceptors/data",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1139,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":331,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":647,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":1376,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":808,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.mailhost",{"_index":810,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtppassword",{"_index":815,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtpusername",{"_index":813,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["config/enviroment.validation",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["config/profile.config",{"_index":1308,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1310,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UsersService.html":{}}}],["confirmation",{"_index":1110,"title":{},"body":{"injectables/PostsService.html":{}}}],["conflictexception",{"_index":383,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":646,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('error",{"_index":394,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["conflictexception(error",{"_index":552,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["connect",{"_index":1287,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connecting",{"_index":610,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["connection",{"_index":651,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["const",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":312,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(request",{"_index":916,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(configservice",{"_index":656,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(datasource",{"_index":621,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor(jwtconfiguration",{"_index":763,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(mailerservice",{"_index":827,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(metaoptionsrepository",{"_index":881,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(postsrepository",{"_index":1066,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["constructor(reflector",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":907,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":1191,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersrepository",{"_index":377,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/SignInProvider.html":{}}}],["content",{"_index":418,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["content'})@isstring()@isoptional",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":304,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":303,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":92,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["controller('auth",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":756,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":870,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":1041,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1174,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1264,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["correct",{"_index":1087,"title":{},"body":{"injectables/PostsService.html":{}}}],["courses",{"_index":1494,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1347,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":297,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":1175,"title":{},"body":{"controllers/TagsController.html":{}}}],["create(createpostdto",{"_index":538,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":865,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":1167,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["created",{"_index":1011,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdate",{"_index":841,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":843,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["creategoogleuser",{"_index":376,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuser(creategoogleuserdto",{"_index":381,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuserdto",{"_index":347,"title":{"classes/CreateGoogleUserDto.html":{}},"body":{"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creategoogleuserprovider",{"_index":373,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createmany",{"_index":620,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createmanyusersdto",{"_index":624,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":1224,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1278,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1228,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":397,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUsersManyProvoder.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":634,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["createparamdecorator",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1002,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":1006,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":415,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.tags.length",{"_index":553,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostmetaoptionsdto",{"_index":437,"title":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createpostprovider",{"_index":532,"title":{"injectables/CreatePostProvider.html":{}},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":1008,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtagdto",{"_index":501,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":588,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":591,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":401,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":600,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":587,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1225,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":1276,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":1231,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusersmanyprovoder",{"_index":618,"title":{"injectables/CreateUsersManyProvoder.html":{}},"body":{"injectables/CreateUsersManyProvoder.html":{},"coverage.html":{}}}],["creating",{"_index":1069,"title":{},"body":{"injectables/PostsService.html":{}}}],["ctx",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":894,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":337,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data.interface",{"_index":544,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["data.interface.ts",{"_index":84,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["databaseconfig",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":156,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":622,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["datbase",{"_index":615,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":451,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["datetime",{"_index":997,"title":{},"body":{"entities/Post.html":{}}}],["decalre",{"_index":311,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["declarations",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":308,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["decorartor",{"_index":1161,"title":{},"body":{"entities/Tag.html":{}}}],["decorator",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["deeper",{"_index":1490,"title":{},"body":{"index.html":{}}}],["deeppartial",{"_index":504,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["default",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaults",{"_index":816,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultvaluepipe",{"_index":1255,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1271,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1269,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":1015,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{}}}],["delete('soft",{"_index":1171,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":1177,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":1070,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":1111,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":1147,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":858,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["deletepost",{"_index":1003,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":1051,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1014,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleting",{"_index":1108,"title":{},"body":{"injectables/PostsService.html":{}}}],["dependencies",{"_index":102,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1450,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1462,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1455,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1472,"title":{},"body":{"index.html":{}}}],["description",{"_index":396,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":602,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["development",{"_index":1436,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1501,"title":{},"body":{"index.html":{}}}],["dir",{"_index":818,"title":{},"body":{"modules/MailModule.html":{}}}],["discord",{"_index":1487,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1489,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1348,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":479,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto.ts",{"_index":960,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["dtos/create",{"_index":388,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1037,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/google",{"_index":755,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/pagination",{"_index":915,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":1036,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/refresh",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin.dto",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["duplicate",{"_index":560,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["e2e",{"_index":1445,"title":{},"body":{"index.html":{}}}],["each",{"_index":414,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":967,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1423,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1454,"title":{},"body":{"index.html":{}}}],["eight",{"_index":579,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejs",{"_index":1389,"title":{},"body":{"dependencies.html":{}}}],["ejsadapter",{"_index":805,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":86,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":1302,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":678,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:11",{"_index":680,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:20",{"_index":682,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["enables",{"_index":1162,"title":{},"body":{"entities/Tag.html":{}}}],["encrypted",{"_index":335,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddata",{"_index":730,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto-1.html":{}}}],["enddate",{"_index":718,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["endpoint",{"_index":1312,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":558,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["enterprise",{"_index":1504,"title":{},"body":{"index.html":{}}}],["entities",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":838,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":948,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["enum",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1404,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/poststatus.enum",{"_index":505,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":506,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["enviromentvalidation",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":1085,"title":{},"body":{"injectables/PostsService.html":{}}}],["err",{"_index":329,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["error",{"_index":309,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["errors",{"_index":1289,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["even",{"_index":323,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["example",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":603,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{}}}],["exclude",{"_index":1221,"title":{},"body":{"entities/User.html":{}}}],["execution",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1088,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":1023,"title":{},"body":{"controllers/PostsController.html":{}}}],["existinguser",{"_index":596,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":597,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["experience",{"_index":1492,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":694,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":728,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{}}}],["extract",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["false",{"_index":441,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":781,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fast",{"_index":1466,"title":{},"body":{"index.html":{}}}],["featured",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimage",{"_index":562,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":419,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["features",{"_index":1476,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":684,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["fetched",{"_index":1240,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1236,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1468,"title":{},"body":{"index.html":{}}}],["field",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filename",{"_index":1334,"title":{},"body":{"injectables/UsersService.html":{}}}],["finally",{"_index":649,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["finalresponse",{"_index":934,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":547,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1064,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":1320,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(postquery",{"_index":1072,"title":{},"body":{"injectables/PostsService.html":{}}}],["findinbyemail",{"_index":1135,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["findmultipletags",{"_index":1189,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":1196,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":679,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":681,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid",{"_index":672,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid(googleid",{"_index":674,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleidprovider",{"_index":669,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebygoogleidrovider",{"_index":1315,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":1313,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1327,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyemailprovider",{"_index":677,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finds",{"_index":1343,"title":{},"body":{"injectables/UsersService.html":{}}}],["fired",{"_index":316,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":896,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":352,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{}}}],["focus",{"_index":1475,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1507,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":683,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{}}}],["framework",{"_index":1421,"title":{},"body":{"index.html":{}}}],["full",{"_index":1503,"title":{},"body":{"index.html":{}}}],["function",{"_index":1366,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1415,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1471,"title":{},"body":{"index.html":{}}}],["generate",{"_index":342,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":688,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":691,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":247,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1266,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":1235,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":1019,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":1004,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":1017,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbasedto",{"_index":716,"title":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"coverage.html":{}}}],["getpostsdto",{"_index":727,"title":{"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getting",{"_index":1417,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":1249,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":1226,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":1234,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":734,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getusersparamsdto",{"_index":741,"title":{"classes/GetUsersParamsDto.html":{}},"body":{"classes/GetUsersParamsDto.html":{},"coverage.html":{}}}],["given_name",{"_index":780,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":799,"title":{},"body":{"modules/MailModule.html":{}}}],["google",{"_index":350,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":252,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":248,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":353,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["googletokendto",{"_index":751,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":779,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["graph",{"_index":1497,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1517,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handle",{"_index":611,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["handling",{"_index":1324,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":1491,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1481,"title":{},"body":{"index.html":{}}}],["hash",{"_index":1140,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":341,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":246,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":338,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":1253,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":197,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1495,"title":{},"body":{"index.html":{}}}],["here",{"_index":314,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["host",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3000",{"_index":837,"title":{},"body":{"injectables/MailService.html":{}}}],["httpcode",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://nestjs.com",{"_index":1528,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":1158,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":461,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":91,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id.provider",{"_index":1306,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":671,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:13",{"_index":675,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":673,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["identifier",{"_index":1349,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":484,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["idtoken",{"_index":778,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["image",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implements",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["importing",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":1204,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.provider",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1128,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:14",{"_index":1129,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:31",{"_index":1130,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":604,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["infrastructure",{"_index":1478,"title":{},"body":{"index.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(profileconfig.key",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":385,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":885,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":545,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":1200,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":390,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["inlinecssenabled",{"_index":822,"title":{},"body":{"modules/MailModule.html":{}}}],["install",{"_index":1470,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1434,"title":{},"body":{"index.html":{}}}],["instance",{"_index":310,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["instance.canactivate(context",{"_index":327,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instantiated",{"_index":1294,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["interact",{"_index":1498,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":655,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":658,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":79,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":81,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":700,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["interfaces/paginated.interface",{"_index":914,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":723,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{}}}],["ip",{"_index":1254,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":409,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isdate",{"_index":491,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{}}}],["isdate()@isoptional",{"_index":720,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":363,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1123,"title":{},"body":{"classes/SignInDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":355,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isenum",{"_index":492,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":1137,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":494,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":493,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":495,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":364,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":527,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":1113,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isoptional",{"_index":365,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@isdate",{"_index":731,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{}}}],["isoptional()@isjson",{"_index":463,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":944,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":947,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":366,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isstring()@isnotempty",{"_index":359,"title":{},"body":{"classes/CreateGoogleUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":357,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":574,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":361,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["issuer",{"_index":704,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isurl",{"_index":496,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":405,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":892,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1510,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1512,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1392,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":803,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":819,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":859,"title":{},"body":{"entities/MetaOption.html":{}}}],["jointable",{"_index":991,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":458,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwtconfig",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"modules/UsersModule.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtmodule",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["kamil",{"_index":1525,"title":{},"body":{"index.html":{}}}],["key",{"_index":1451,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":898,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":354,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/User.html":{}}}],["later",{"_index":320,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":1484,"title":{},"body":{"index.html":{}}}],["legend",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":972,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lets",{"_index":1290,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["letter",{"_index":581,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":472,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["library",{"_index":769,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1531,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1515,"title":{},"body":{"index.html":{}}}],["limit",{"_index":941,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["limt",{"_index":1321,"title":{},"body":{"injectables/UsersService.html":{}}}],["linenumber",{"_index":1336,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":1509,"title":{},"body":{"index.html":{}}}],["links",{"_index":890,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1237,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":891,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3000/posts/:userid",{"_index":1043,"title":{},"body":{"controllers/PostsController.html":{}}}],["loginticket",{"_index":776,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":782,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":836,"title":{},"body":{"injectables/MailService.html":{}}}],["looking",{"_index":1457,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1506,"title":{},"body":{"index.html":{}}}],["made",{"_index":1292,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["mail/mail.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":801,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":807,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":828,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":112,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":589,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["makes",{"_index":1464,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1477,"title":{},"body":{"index.html":{}}}],["manually",{"_index":1293,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many",{"_index":398,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUsersManyProvoder.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["many.provider",{"_index":1305,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":1283,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:12",{"_index":1284,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:20",{"_index":1285,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provoder.ts",{"_index":619,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"coverage.html":{}}}],["many.provoder.ts:12",{"_index":623,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["many.provoder.ts:15",{"_index":625,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["manytomany",{"_index":992,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":985,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":993,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":965,"title":{},"body":{"entities/Post.html":{}}}],["map",{"_index":663,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":666,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":1145,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["matches",{"_index":367,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":931,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1460,"title":{},"body":{"index.html":{}}}],["max",{"_index":497,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength",{"_index":368,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":508,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":372,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":470,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":1399,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":839,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptions",{"_index":420,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["metaoptions.post",{"_index":976,"title":{},"body":{"entities/Post.html":{}}}],["metaoptions.ts",{"_index":529,"title":{},"body":{"classes/CreatePostMetaOptionsDto-1.html":{},"coverage.html":{}}}],["metaoptions.ts:8",{"_index":531,"title":{},"body":{"classes/CreatePostMetaOptionsDto-1.html":{}}}],["metaoptionscontroller",{"_index":863,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":113,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":883,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":867,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":523,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":1136,"title":{},"body":{"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":498,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minimum",{"_index":578,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":369,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["minlength(3",{"_index":371,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":507,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["minlength(8)@isnotempty",{"_index":1125,"title":{},"body":{"classes/SignInDto.html":{}}}],["miscellaneous",{"_index":1403,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1514,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1438,"title":{},"body":{"index.html":{}}}],["module",{"_index":99,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":101,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":802,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":806,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":608,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1456,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1341,"title":{},"body":{"injectables/UsersService.html":{}}}],["multiple",{"_index":321,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["mysql",{"_index":998,"title":{},"body":{"entities/Post.html":{}}}],["myśliwiec",{"_index":1526,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1084,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["needs",{"_index":953,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":1428,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1530,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":662,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":198,"title":{},"body":{"injectables/AppService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":962,"title":{},"body":{"classes/PatchUserDto-1.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1383,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":412,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newurl",{"_index":926,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":938,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":937,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${previouspage",{"_index":939,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":936,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":935,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":391,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["newusers",{"_index":627,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":638,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":659,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":665,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":932,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1420,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["nodemailer",{"_index":1394,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1274,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1433,"title":{},"body":{"index.html":{}}}],["null",{"_index":438,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{}}}],["nullable",{"_index":848,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":90,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numbers",{"_index":929,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["oauth2client",{"_index":768,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":775,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":761,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":440,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{}}}],["object'})@isstring()@isnotempty",{"_index":530,"title":{},"body":{"classes/CreatePostMetaOptionsDto-1.html":{}}}],["objectliteral",{"_index":913,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occured",{"_index":1339,"title":{},"body":{"injectables/UsersService.html":{}}}],["offer",{"_index":1511,"title":{},"body":{"index.html":{}}}],["official",{"_index":1461,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":852,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":324,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1220,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1217,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":860,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":850,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":762,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1516,"title":{},"body":{"index.html":{}}}],["option.entity",{"_index":876,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":840,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:17",{"_index":846,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:23",{"_index":849,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":844,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:29",{"_index":856,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:35",{"_index":854,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":823,"title":{},"body":{"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":877,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":864,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:15",{"_index":866,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":500,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["options.dto.ts",{"_index":526,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":528,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":875,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":869,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":880,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:17",{"_index":884,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":882,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":499,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":879,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1535,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1375,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":447,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":888,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":906,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":910,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":114,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":902,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":912,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":920,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":919,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":724,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":1027,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":1044,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1261,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":736,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:14",{"_index":739,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["params.dto.ts",{"_index":742,"title":{},"body":{"classes/GetUsersParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:13",{"_index":744,"title":{},"body":{"classes/GetUsersParamsDto.html":{}}}],["parseintpipe",{"_index":1028,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1502,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":956,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{}}}],["partialtype(createpostdto",{"_index":952,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":961,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{}}}],["pass",{"_index":814,"title":{},"body":{"modules/MailModule.html":{}}}],["passes",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["patch",{"_index":1029,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":950,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":1095,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":1103,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":1090,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":1099,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":1105,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":1101,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":1097,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":1086,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":1093,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":1227,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1280,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1250,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":958,"title":{"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{}},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":804,"title":{},"body":{"modules/MailModule.html":{}}}],["payload",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["per",{"_index":1243,"title":{},"body":{"controllers/UsersController.html":{}}}],["permanently",{"_index":1340,"title":{},"body":{"injectables/UsersService.html":{}}}],["permissions",{"_index":318,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["person",{"_index":462,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1396,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1459,"title":{},"body":{"index.html":{}}}],["please",{"_index":609,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["port",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["position",{"_index":1245,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":445,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":220,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":1009,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":467,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":488,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('create",{"_index":1229,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('refresh",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@auth(authtype.none",{"_index":752,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["post()@auth(authtype.none)@useinterceptors(classserializerinterceptor",{"_index":1232,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":1218,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":1094,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":541,"title":{},"body":{"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":417,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":722,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["post.dto.ts:102",{"_index":456,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:111",{"_index":486,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":955,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:130",{"_index":443,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:14",{"_index":721,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["post.dto.ts:38",{"_index":489,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:46",{"_index":450,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":477,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:67",{"_index":483,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:75",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:85",{"_index":464,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:94",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":542,"title":{},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":1102,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":851,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":1098,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.provider",{"_index":1061,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.provider.ts",{"_index":534,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["post.provider.ts:16",{"_index":537,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.provider.ts:33",{"_index":539,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.publishon",{"_index":1104,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":1100,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":1096,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1107,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1092,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":1018,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postquery.limit",{"_index":1080,"title":{},"body":{"injectables/PostsService.html":{}}}],["postquery.page",{"_index":1081,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":1001,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":1058,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto.ts",{"_index":729,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto-1.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":732,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{}}}],["posts.dto.ts:8",{"_index":733,"title":{},"body":{"classes/GetPostsBaseDto-1.html":{}}}],["posts/posts.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":999,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":115,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":535,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["postsservice",{"_index":1031,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":478,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":996,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":421,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":995,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":897,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":933,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":845,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":607,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1440,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":1307,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":1314,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1419,"title":{},"body":{"index.html":{}}}],["project",{"_index":1431,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["promise.all",{"_index":709,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":313,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":85,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provider",{"_index":595,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":1060,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["providers/find",{"_index":1301,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":754,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":800,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/meta",{"_index":868,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":904,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":1032,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/refresh",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/tags.service",{"_index":1173,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users",{"_index":1304,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":1262,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":452,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":482,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":422,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["put",{"_index":1252,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":1030,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query'})@apiquery({name",{"_index":1241,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1268,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1270,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":726,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":940,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:14",{"_index":946,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:9",{"_index":945,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":628,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":642,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":630,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":635,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":637,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":652,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":645,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":631,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1485,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1523,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1449,"title":{},"body":{"index.html":{}}}],["real",{"_index":1499,"title":{},"body":{"index.html":{}}}],["record",{"_index":298,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reference",{"_index":1159,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":1398,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtoken",{"_index":708,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":207,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1120,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(@body",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":249,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["registered",{"_index":1238,"title":{},"body":{"controllers/UsersController.html":{}}}],["release",{"_index":650,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["repository",{"_index":378,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":930,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":917,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":384,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":632,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception(error",{"_index":617,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["required",{"_index":404,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1467,"title":{},"body":{"index.html":{}}}],["reset",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resource",{"_index":326,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["resources",{"_index":1479,"title":{},"body":{"index.html":{}}}],["response",{"_index":1010,"title":{},"body":{"controllers/PostsController.html":{}}}],["response.interceptor",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":654,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:11",{"_index":657,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:13",{"_index":661,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["responsible",{"_index":1323,"title":{},"body":{"injectables/UsersService.html":{}}}],["result",{"_index":636,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1242,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":481,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":644,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["run",{"_index":1435,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1286,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["runs",{"_index":1453,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["ryunner",{"_index":1288,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["salt",{"_index":343,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":598,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["save",{"_index":601,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{}}}],["saving",{"_index":395,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["scalable",{"_index":1424,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":480,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":423,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["secret",{"_index":706,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["secure",{"_index":811,"title":{},"body":{"modules/MailModule.html":{}}}],["sendwelcomemail",{"_index":826,"title":{},"body":{"injectables/MailService.html":{}}}],["sendwelcomemail(user",{"_index":830,"title":{},"body":{"injectables/MailService.html":{}}}],["sensitive",{"_index":605,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["serialize",{"_index":457,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":449,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":1425,"title":{},"body":{"index.html":{}}}],["service",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["setmetadata",{"_index":1258,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata('authtype",{"_index":1273,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata(auth_type_key",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1432,"title":{},"body":{"index.html":{}}}],["side",{"_index":1426,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sign",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":213,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1142,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":250,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":689,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":693,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["simple",{"_index":1469,"title":{},"body":{"index.html":{}}}],["skip",{"_index":918,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["slug",{"_index":424,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":471,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["social/google",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["soft",{"_index":1163,"title":{},"body":{"entities/Tag.html":{}}}],["softdelete",{"_index":1166,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":1179,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":1170,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeleted",{"_index":1207,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove",{"_index":1190,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":1198,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":475,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":737,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{}}}],["sponsors",{"_index":1519,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1405,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1416,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":1408,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../poststatus.enum.ts",{"_index":1407,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":1410,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":196,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1299,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{}}}],["src/auth/constants/auth.constants",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1356,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":1039,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1358,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1112,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1122,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1126,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1124,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":283,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:26",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":82,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:27",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:31",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":330,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:14",{"_index":336,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:8",{"_index":339,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":686,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":593,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":791,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":794,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:7",{"_index":793,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1115,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1127,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":788,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":745,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":759,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":653,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":725,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1077,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":889,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1057,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":903,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1076,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":905,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:11",{"_index":908,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:17",{"_index":911,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module.ts",{"_index":798,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service",{"_index":594,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":825,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/providers/mail.service.ts:6",{"_index":829,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:9",{"_index":831,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1365,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":525,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":416,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":717,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":951,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":1413,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":1412,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":1414,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":861,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":964,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:21",{"_index":975,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:28",{"_index":990,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:36",{"_index":978,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:44",{"_index":983,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:52",{"_index":984,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:58",{"_index":970,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:64",{"_index":981,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:71",{"_index":974,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:77",{"_index":980,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:83",{"_index":977,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:88",{"_index":968,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:94",{"_index":988,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":1000,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:34",{"_index":1020,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":1013,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:64",{"_index":1026,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:69",{"_index":1016,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1056,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/create",{"_index":533,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":1063,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:142",{"_index":1071,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:22",{"_index":1067,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:51",{"_index":1068,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:55",{"_index":1073,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:70",{"_index":1075,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":502,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":543,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":1188,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:17",{"_index":1194,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:22",{"_index":1197,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:32",{"_index":1195,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:41",{"_index":1199,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":1192,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":994,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":1146,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:16",{"_index":1152,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:24",{"_index":1153,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:32",{"_index":1156,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:38",{"_index":1150,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:44",{"_index":1155,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":1151,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":1154,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:60",{"_index":1148,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:63",{"_index":1157,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:67",{"_index":1149,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1165,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:21",{"_index":1168,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":1169,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:31",{"_index":1172,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":1059,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1184,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":349,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":735,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":959,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":374,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":670,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":1282,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1311,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:121",{"_index":1318,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:126",{"_index":1325,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:130",{"_index":1326,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:134",{"_index":1317,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:28",{"_index":1316,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:65",{"_index":1319,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:72",{"_index":1322,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:95",{"_index":1328,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":699,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":1208,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:16",{"_index":1211,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":1215,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:31",{"_index":1210,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:39",{"_index":1216,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":1213,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:49",{"_index":1219,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":1214,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1223,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:62",{"_index":1248,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:74",{"_index":1233,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:79",{"_index":1230,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:84",{"_index":1251,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1298,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":949,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1439,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1441,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":719,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{}}}],["started",{"_index":1418,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1430,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1350,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":425,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["status.enum.ts",{"_index":1409,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1505,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1452,"title":{},"body":{"index.html":{}}}],["story",{"_index":448,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1465,"title":{},"body":{"index.html":{}}}],["strict",{"_index":824,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto-1.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":648,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["sub",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["subject",{"_index":833,"title":{},"body":{"injectables/MailService.html":{}}}],["successful",{"_index":639,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["successfully",{"_index":1047,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":1025,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":1012,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":1046,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1486,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1533,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":695,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1374,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1373,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":140,"title":{"entities/Tag.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":503,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":561,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:19",{"_index":568,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:29",{"_index":573,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:34",{"_index":564,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":570,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:45",{"_index":566,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":1185,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":986,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":426,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1186,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":554,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["tags/tag.entity",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1164,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":116,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1193,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":536,"title":{"injectables/TagsService.html":{}},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":921,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["taken",{"_index":1133,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["tap",{"_index":664,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["template",{"_index":817,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":820,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1444,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1447,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1446,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1442,"title":{},"body":{"index.html":{}}}],["text",{"_index":969,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1518,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":299,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":307,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":668,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.creategoogleuserprovider.creategoogleuser",{"_index":1346,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createpostprovider.create(createpostdto",{"_index":1078,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":629,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["this.extracttokenfromheader(request",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebygoogleidrovider.findonebygoogleid(googleid",{"_index":1345,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":1344,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":786,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":784,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":758,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepassword",{"_index":1141,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":614,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":712,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":703,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":771,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":773,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":705,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":715,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":707,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":701,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":832,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendwelcomemail(newuser",{"_index":616,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.metaoptionsrepository.create",{"_index":886,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":887,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptionsdto",{"_index":871,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":774,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":777,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":1079,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository",{"_index":1082,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":556,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.postsrepository.delete(id",{"_index":1109,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":1089,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":557,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":1048,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":1052,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(postquery",{"_index":1045,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":1050,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.getallandoverride",{"_index":302,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":925,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":924,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":710,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":714,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":1201,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":1205,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1203,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":1202,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":1206,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":1176,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":1178,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":551,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":1083,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremove(id",{"_index":1180,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1342,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":613,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.create(creategoogleuserdto",{"_index":392,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":599,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findoneby",{"_index":676,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":393,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["this.usersservice.creategoogleuser",{"_index":785,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.createmany(createmanyusersdto",{"_index":1279,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1277,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":1272,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(signindto.email",{"_index":1131,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.findonebygoogleid(googleid",{"_index":783,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.findonebyid(sub",{"_index":1121,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.usersservice.findonebyid(user.sub",{"_index":550,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["throw",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":460,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1500,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":979,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GoogleTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["token.dto",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":789,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":790,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:6",{"_index":1114,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:16",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:23",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:44",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["tokens",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":687,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:16",{"_index":1116,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:23",{"_index":696,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:38",{"_index":692,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:39",{"_index":1117,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":690,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":893,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":895,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1524,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":641,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["transformer",{"_index":413,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":809,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":1212,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":987,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":407,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1529,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateGoogleUserDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1406,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":387,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":878,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1062,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1187,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1309,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":963,"title":{},"body":{"classes/PatchUserDto-1.html":{},"dependencies.html":{}}}],["typescript",{"_index":1429,"title":{},"body":{"index.html":{}}}],["unable",{"_index":606,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('password",{"_index":1144,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('user",{"_index":685,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unauthorizedexception(error",{"_index":787,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":406,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":485,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":442,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":559,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1443,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1543,"title":{},"body":{"properties.html":{}}}],["unsuccessful",{"_index":643,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{}}}],["update",{"_index":1065,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":1074,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":957,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":954,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":842,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":855,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":1005,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":1049,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":1021,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":1022,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":466,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationProvider.html":{}}}],["url\"'})@maxlength(256",{"_index":476,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url\"'})@maxlength(512",{"_index":572,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":927,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":922,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":909,"title":{},"body":{"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":322,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UsersService.html":{}}}],["usefactory",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["useguards",{"_index":1257,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1259,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1275,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":83,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["user.decorator",{"_index":1040,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1357,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":389,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"classes/PatchUserDto.html":{},"classes/PatchUserDto-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":351,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto-1.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":358,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":362,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":356,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":360,"title":{},"body":{"classes/CreateGoogleUserDto.html":{}}}],["user.dto.ts:37",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":713,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{}}}],["user.entity",{"_index":386,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":835,"title":{},"body":{"injectables/MailService.html":{}}}],["user.id",{"_index":711,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.password",{"_index":1143,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":966,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1300,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":375,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:12",{"_index":379,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:16",{"_index":590,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:18",{"_index":382,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:33",{"_index":592,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user?.[field",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":697,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":400,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUsersManyProvoder.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":1303,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":626,"title":{},"body":{"injectables/CreateUsersManyProvoder.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":399,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:19",{"_index":408,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.service.ts",{"_index":1335,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/user.entity",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1222,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemany",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["userscreatemanyprovider",{"_index":1281,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["usersmodule",{"_index":117,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":380,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":271,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":473,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":1119,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["validatenested",{"_index":410,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":459,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1256,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":370,"title":{},"body":{"classes/CreateGoogleUserDto.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreatePostMetaOptionsDto-1.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsBaseDto-1.html":{},"classes/GetPostsDto.html":{},"classes/GetPostsDto-1.html":{},"classes/GetUsersParamDto.html":{},"classes/GetUsersParamsDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":942,"title":{},"body":{"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":446,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":971,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1353,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1544,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":1118,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["version",{"_index":1541,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1493,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1483,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1496,"title":{},"body":{"index.html":{}}}],["void",{"_index":767,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["want",{"_index":1246,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":1437,"title":{},"body":{"index.html":{}}}],["website",{"_index":1527,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":834,"title":{},"body":{"injectables/MailService.html":{}}}],["without",{"_index":474,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/GenerateTokensProvider.html":{}}}],["working",{"_index":1482,"title":{},"body":{"index.html":{}}}],["x",{"_index":1508,"title":{},"body":{"index.html":{}}}],["yes",{"_index":698,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["you'd",{"_index":1522,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1448,"title":{},"body":{"index.html":{}}}],["z0",{"_index":468,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":577,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":576,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":575,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    // Extract the request from the execution context\n    const request = context.switchToHttp().getRequest();\n    // Extract the token from the header\n    const token = this.extractTokenFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration,\n      );\n      request[REQUEST_USER_KEY] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's email address\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of the user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  /**\n   * The ID of the user\n   */\n  sub: number;\n\n  /**\n   * User's email address\n   */\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { Module } from '@nestjs/common';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport { PostsModule } from './posts/posts.module';\nimport { Tag } from './tags/tag.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n/**\n * Importing Entities\n * */\nimport { User } from './users/user.entity';\nimport { UsersModule } from './users/users.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport enviromentValidation from './config/enviroment.validation';\nimport jwtConfig from './auth/config/jwt.config';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { MailModule } from './mail/mail.module';\n\n// Get the current NODE_ENV\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      //envFilePath: ['.env.development', '.env'],\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: enviromentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        //entities: [User],\n        synchronize: configService.get('database.synchronize'),\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n    MailModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    { provide: APP_INTERCEPTOR, useClass: DataResponseInterceptor },\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello From NestJS!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.None)@HttpCode(HttpStatus.OK)@Post('refresh-tokens')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\n\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /*\n     * Injecting Auth Service\n     */\n    private readonly authService: AuthService,\n  ) {}\n\n  @Post('sign-in')\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  public signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK) // changed since the default is 201\n  @Post('refresh-tokens')\n  refreshTokens(@Body() refreshTokenDto: RefreshTokenDto) {\n    return this.authService.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Module, forwardRef } from '@nestjs/common';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { JwtModule } from '@nestjs/jwt';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { UsersModule } from 'src/users/users.module';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\nimport jwtConfig from './config/jwt.config';\n\n@Module({\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SignInProvider } from './sign-in.provider';\nimport { Inject, Injectable, forwardRef } from '@nestjs/common';\n\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Inject the signInProvider\n     */\n    private readonly signInProvider: SignInProvider,\n\n    /**\n     * Inject refreshTokensProvider\n     */\n    private readonly refreshTokensProvider: RefreshTokensProvider,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    return await this.refreshTokensProvider.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\n\nimport { AUTH_TYPE_KEY } from 'src/auth/decorators/auth.decorator';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Observable } from 'rxjs';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  // Set the default Auth Type\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  // Create authTypeGuardMap\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()],\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n    // Declare the default error\n    let error = new UnauthorizedException();\n\n    for (const instance of guards) {\n      // Decalre a new constant\n      const canActivate = await Promise.resolve(\n        // Here the AccessToken Guard Will be fired and check if user has permissions to acces\n        // Later Multiple AuthTypes can be used even if one of them returns true\n        // The user is Authorised to access the resource\n        instance.canActivate(context),\n      ).catch((err) => {\n        error = err;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\n\nimport { HashingProvider } from './hashing.provider';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  public async hashPassword(data: string | Buffer): Promise {\n    // Generate the salt\n    const salt = await bcrypt.genSalt();\n    return bcrypt.hash(data, salt);\n  }\n\n  public async comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGoogleUserDto.html":{"url":"classes/CreateGoogleUserDto.html","title":"class - CreateGoogleUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGoogleUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-google-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-google-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-google-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-google-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-google-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateGoogleUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(createGoogleUserDto: CreateGoogleUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGoogleUserDto\n                                            \n                                                            CreateGoogleUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { CreateGoogleUserDto } from '../dtos/create-google-user.dto';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async createGoogleUser(createGoogleUserDto: CreateGoogleUserDto) {\n    try {\n      let newUser = this.usersRepository.create(createGoogleUserDto);\n      return await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new ConflictException('Error saving user', {\n        description: error,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsInt,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  ValidateNested,\n  isNotEmpty,\n} from 'class-validator';\n\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { CreateTagDto } from 'src/tags/dtos/create-tag.dto';\nimport { DeepPartial } from 'typeorm';\nimport { Type } from 'class-transformer';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from '../enums/postType.enum';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(256)\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsDate()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 2],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto-1.html":{"url":"classes/CreatePostMetaOptionsDto-1.html","title":"class - CreatePostMetaOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-metaoptions.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-metaoptions.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @ApiProperty({ type: 'object' })\n  @IsString()\n  @IsNotEmpty()\n  metaValue: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostProvider.html":{"url":"injectables/CreatePostProvider.html","title":"injectable - CreatePostProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/create-post.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/create-post.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/create-post.provider.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Injectable()\nexport class CreatePostProvider {\n  constructor(\n    /*\n     * Injecting Users Service\n     */\n    private readonly usersService: UsersService,\n    /**\n     * Inject postsRepository\n     */\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository,\n    /**\n     * Inject TagsService\n     */\n    private readonly tagsService: TagsService,\n  ) {}\n\n  public async create(createPostDto: CreatePostDto, user: ActiveUserData) {\n    let author = undefined;\n    let tags = undefined;\n\n    try {\n      // Find author from database based on authorId\n      author = await this.usersService.findOneById(user.sub);\n      // Find tags\n      tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n\n    if (createPostDto.tags.length !== tags.length) {\n      throw new BadRequestException('Please check your tag Ids');\n    }\n\n    // Create post\n    let post = this.postsRepository.create({\n      ...createPostDto,\n      author: author,\n      tags: tags,\n    });\n\n    try {\n      // return the post\n      return await this.postsRepository.save(post);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'Ensure post slug is unique and not a duplicate',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(512)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImage: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  forwardRef,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { MailService } from 'src/mail/providers/mail.service';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    /**\n     * Inject BCrypt Provider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n\n    private readonly mailService: MailService,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n\n    try {\n      // Check is user exists with same email\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      // Might save the details of the exception\n      // Information which is sensitive\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    // Handle exception\n    if (existingUser) {\n      throw new BadRequestException(\n        'The user already exists, please check your email.',\n      );\n    }\n\n    // Create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the the datbase',\n        },\n      );\n    }\n\n    try {\n      await this.mailService.sendWelcomeMail(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUsersManyProvoder.html":{"url":"injectables/CreateUsersManyProvoder.html","title":"injectable - CreateUsersManyProvoder","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUsersManyProvoder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-users-many.provoder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-users-many.provoder.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(CreateManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-users-many.provoder.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                CreateManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../user.entity';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n@Injectable()\nexport class CreateUsersManyProvoder {\n  constructor(private readonly dataSource: DataSource) {}\n\n  public async createMany(CreateManyUsersDto: CreateManyUsersDto) {\n    let newUsers: User[] = [];\n    let queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not collect to the database');\n    }\n\n    try {\n      for (let user of CreateManyUsersDto.users) {\n        let newUser = queryRunner.manager.create(User, user);\n        let result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n      // if successful commit transaction\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // if unsuccessful rollback transaction\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      // finally release connection\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(private readonly configService: ConfigService) {}\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-google-id.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.usersRepository.findOneBy({ googleId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n  constructor(\n    /**\n     * Inject usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async findOneByEmail(email: string) {\n    let user: User | undefined = undefined;\n\n    try {\n      // This will return null if the user is not found\n      user = await this.usersRepository.findOneBy({\n        email: email,\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not fetch the user',\n      });\n    }\n\n    if (!user) {\n      throw new UnauthorizedException('User does not exists');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:23\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      // Generate Access Token with Email\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        { email: user.email },\n      ),\n\n      // Generate Refresh token without email\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\n\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { Type } from 'class-transformer';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto-1.html":{"url":"classes/GetPostsBaseDto-1.html","title":"class - GetPostsBaseDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endData\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsOptional()\n  @IsDate()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDate()\n  endData?: string;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto.html":{"url":"classes/GetPostsDto.html","title":"class - GetPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\n\nimport { IntersectionType } from '@nestjs/swagger';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { Type } from 'class-transformer';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto-1.html":{"url":"classes/GetPostsDto-1.html","title":"class - GetPostsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsOptional()\n  @IsDate()\n  startDate?: string;\n\n  @IsOptional()\n  @IsDate()\n  endData?: string;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\n\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamsDto.html":{"url":"classes/GetUsersParamsDto.html","title":"class - GetUsersParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific ID', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-params.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamsDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific ID',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { Auth } from '../decorators/auth.decorator';\nimport { AuthType } from '../enums/auth-type.enum';\n\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  @Auth(AuthType.None)\n  public async authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n    return await this.googleAuthenticationService.authenticate(googleTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oAuthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, usersService: UsersService, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oAuthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  OnModuleInit,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\nimport { User } from 'src/users/user.entity';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oAuthClient: OAuth2Client;\n\n  constructor(\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const clientId = this.jwtConfiguration.googleClientId;\n    const clientSecret = this.jwtConfiguration.googleClientSecret;\n    this.oAuthClient = new OAuth2Client(clientId, clientSecret);\n  }\n\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      const logInTicket = await this.oAuthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = logInTicket.getPayload();\n\n      let user: User = await this.usersService.findOneByGoogleId(googleId);\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      }\n\n      let newUser = await this.usersService.createGoogleUser({\n        email,\n        googleId,\n        firstName,\n        lastName,\n      });\n\n      return this.generateTokensProvider.generateTokens(newUser);\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class GoogleTokenDto {\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailService } from './providers/mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'path';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\n\n@Global()\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          host: config.get('appConfig.mailHost'),\n          secure: false,\n          port: 2525,\n          auth: {\n            user: config.get('appConfig.smtpUserName'),\n            pass: config.get('appConfig.smtpPassword'),\n          },\n        },\n        defaults: {\n          from: `My Blog `,\n        },\n        template: {\n          dir: join(__dirname, 'templates'),\n          adapter: new EjsAdapter({ inlineCssEnabled: true }),\n          options: {\n            strict: false,\n          },\n        },\n      }),\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendWelcomeMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendWelcomeMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWelcomeMail(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { User } from 'src/users/user.entity';\n\n@Injectable()\nexport class MailService {\n  constructor(private readonly mailerService: MailerService) {}\n\n  public async sendWelcomeMail(user: User) {\n    await this.mailerService.sendMail({\n      to: user.email,\n      subject: 'Welcome to nestjs blog',\n      template: './welcome',\n      context: {\n        email: user.email,\n        name: user.firstName,\n        loginUrl: 'http://localhost:3000',\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { Post } from 'src/posts/post.entity';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { Body, Controller, Post } from '@nestjs/common';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(\n    /**\n     * Inject MetaOptionsService\n     * */\n    private readonly MetaOptionsService: MetaOptionsService,\n  ) {}\n\n  @Post()\n  public async create(\n    @Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.MetaOptionsService.create(createPostMetaOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MetaOption } from './meta-option.entity';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n  exports: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\nimport { Injectable } from '@nestjs/common';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    /**\n     * Injecting metaOptions repository\n     */\n    @InjectRepository(MetaOption)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    let metaOption = this.metaOptionsRepository.create(\n      createPostMetaOptionsDto,\n    );\n    return await this.metaOptionsRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first?: string;\n    previous?: string;\n    current: string;\n    next?: string;\n    last?: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:11\n                            \n                        \n\n                \n                    \n                            Use Constructor to Inject Request\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ObjectLiteral } from 'typeorm';\nimport { Paginated } from '../interfaces/paginated.interface';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport * as url from 'url';\n\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * Use Constructor to Inject Request\n   * */\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n\n  public async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n  ): Promise> {\n    let results = await repository.find({\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      take: paginationQuery.limit,\n    });\n\n    /**\n     * Create the request URLs\n     */\n    const baseURL =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n    const newUrl = new URL(this.request.url, baseURL);\n\n    // Calculate page numbers\n    const totalItems = await repository.count();\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const previousPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    let finalResponse = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalItems,\n        currentPage: paginationQuery.page,\n        totalPages: Math.ceil(totalItems / paginationQuery.limit),\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${previousPage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  // Number of entries to return\n  limit?: number = 10;\n\n  @IsOptional()\n  @IsPositive()\n  // Number of entries to skip from start\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto-1.html":{"url":"classes/PatchUserDto-1.html","title":"class - PatchUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { CreatePostMetaOptionsDto } from '../meta-options/dtos/create-post-meta-options.dto';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { Tag } from 'src/tags/tag.entity';\nimport { User } from 'src/users/user.entity';\nimport { postStatus } from './enums/postStatus.enum';\nimport { postType } from './enums/postType.enum';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: postType,\n    nullable: false,\n    default: postType.POST,\n  })\n  postType: postType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: postStatus,\n    nullable: false,\n    default: postStatus.DRAFT,\n  })\n  status: postStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp', // 'datetime' in mysql\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true,\n  })\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, {\n    eager: true,\n  })\n  @JoinTable()\n  tags?: Tag[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string, postQuery: GetPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsDto } from './dtos/get-post.dto';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(\n    /*\n     *  Injecting Posts Service\n     */\n    private readonly postsService: PostsService,\n  ) {}\n\n  /*\n   * GET localhost:3000/posts/:userId\n   */\n  @Get('/:userId?')\n  public getPosts(\n    @Param('userId') userId: string,\n    @Query() postQuery: GetPostsDto,\n  ) {\n    return this.postsService.findAll(postQuery, userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully',\n  })\n  @Post()\n  public createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: ActiveUserData,\n  ) {\n    return this.postsService.create(createPostDto, user);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  @Delete()\n  public deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePostProvider\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { Module } from '@nestjs/common';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { Post } from './post.entity';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from 'src/users/users.module';\nimport { CreatePostProvider } from './providers/create-post.provider';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService, CreatePostProvider],\n  imports: [\n    UsersModule,\n    TagsModule,\n    PaginationModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, metaOptionsRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider, createPostProvider: CreatePostProvider)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createPostProvider\n                                                  \n                                                        \n                                                                        CreatePostProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Creating new posts\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostsDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\nimport { GetPostsDto } from '../dtos/get-post.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\nimport { CreatePostProvider } from './create-post.provider';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Inject postsRepository\n     */\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository,\n    /**\n     * inject metaOptionsRepository\n     */\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n    /**\n     * Inject TagsService\n     */\n    private readonly tagsService: TagsService,\n    /**\n     * Inject the paginationProvider\n     */\n    private readonly paginationProvider: PaginationProvider,\n    /**\n     * Inject createPostProvider\n     */\n    private readonly createPostProvider: CreatePostProvider,\n  ) {}\n\n  /**\n   * Creating new posts\n   */\n  public async create(createPostDto: CreatePostDto, user: ActiveUserData) {\n    return await this.createPostProvider.create(createPostDto, user);\n  }\n\n  public async findAll(\n    postQuery: GetPostsDto,\n    userId: string,\n  ): Promise> {\n    let posts = await this.paginationProvider.paginateQuery(\n      {\n        limit: postQuery.limit,\n        page: postQuery.page,\n      },\n      this.postsRepository,\n    );\n\n    return posts;\n  }\n\n  public async update(patchPostDto: PatchPostDto) {\n    let tags = undefined;\n    let post = undefined;\n\n    // Find the Tags\n    try {\n      tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    /**\n     * If tags were not found\n     * Need to be equal number of tags\n     */\n    if (!tags || tags.length !== patchPostDto.tags.length) {\n      throw new BadRequestException(\n        'Please check your tag Ids and ensure they are correct',\n      );\n    }\n\n    // Find the Post\n    try {\n      // Returns null if the post does not exist\n      post = await this.postsRepository.findOneBy({\n        id: patchPostDto.id,\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    if (!post) {\n      throw new BadRequestException('The post Id does not exist');\n    }\n\n    // Update the properties\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n\n    // Assign the new tags\n    post.tags = tags;\n\n    // Save the post and return\n    try {\n      await this.postsRepository.save(post);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n    return post;\n  }\n\n  public async delete(id: number) {\n    // Deleting the post\n    await this.postsRepository.delete(id);\n    // confirmation\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, usersService: UsersService, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport {\n  Inject,\n  Injectable,\n  UnauthorizedException,\n  forwardRef,\n} from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    // Verify the refresh token using jwtService\n    try {\n      const { sub } = await this.jwtService.verifyAsync\n      >(refreshTokenDto.refreshToken, {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      });\n      // Fetch the user from the database\n      const user = await this.usersService.findOneById(sub);\n\n      // Generate the tokens\n      return await this.generateTokensProvider.generateTokens(user);\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class SignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @MinLength(8)\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n  forwardRef,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Inject the hashingProvider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * Inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    // find user by email ID\n    let user = await this.usersService.findOneByEmail(signInDto.email);\n    // Throw exception if user is not found\n    // Above | Taken care by the findInByEmail method\n\n    let isEqual: boolean = false;\n\n    try {\n      // Compare the password to hash\n      isEqual = await this.hashingProvider.comparePassword(\n        signInDto.password,\n        user.password,\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not compare the password',\n      });\n    }\n\n    if (!isEqual) {\n      throw new UnauthorizedException('Password does not match');\n    }\n\n    // Generate access token\n    return await this.generateTokensProvider.generateTokens(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport { Post } from 'src/posts/post.entity';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n\n  // https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  // Add this decorartor and column enables soft delete\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(\n    /**\n     * Inject  tagsService\n     */\n    private readonly tagsService: TagsService,\n  ) {}\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  @Delete()\n  public delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  @Delete('soft-delete')\n  public softDelete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Tag } from './tag.entity';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { In, Repository } from 'typeorm';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { Injectable } from '@nestjs/common';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject tagsRepository\n     */\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  public async create(createTagDto: CreateTagDto) {\n    let tag = this.tagsRepository.create(createTagDto);\n    return await this.tagsRepository.save(tag);\n  }\n\n  public async findMultipleTags(tags: number[]) {\n    let results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete(id: number) {\n    await this.tagsRepository.delete(id);\n\n    return {\n      deleted: true,\n      id,\n    };\n  }\n\n  public async softRemove(id: number) {\n    await this.tagsRepository.softDelete(id);\n\n    return {\n      softDeleted: true,\n      id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { Post } from 'src/posts/post.entity';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  @Exclude()\n  password?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n  })\n  @Exclude()\n  googleId?: string;\n\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.None)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Put,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  UseGuards,\n  SetMetadata,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiTags, ApiQuery, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting Users Service\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  // @SetMetadata('authType', 'none')\n  @Auth(AuthType.None)\n  @UseInterceptors(ClassSerializerInterceptor)\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Post('create-many')\n  public createManyUsers(@Body() createManyUsersDto: CreateManyUsersDto) {\n    return this.usersService.createMany(createManyUsersDto);\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\n\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\nimport { DataSource } from 'typeorm';\nimport { User } from '../user.entity';\n\n@Injectable()\nexport class UsersCreateManyProvider {\n  constructor(\n    /**\n     * Inject the datasource\n     */\n    private dataSource: DataSource,\n  ) {}\n\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    let newUsers: User[] = [];\n\n    // Create Query Runner Instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      // Connect the query ryunner to the datasource\n      await queryRunner.connect();\n      // Start the transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to the database');\n    }\n\n    try {\n      for (let user of createManyUsersDto.users) {\n        let newUser = queryRunner.manager.create(User, user);\n        let result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // since we have errors lets rollback the changes we made\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // you need to release a queryRunner which was manually instantiated\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException(\n          'Could not release the query runner connection',\n        );\n      }\n    }\n\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\n\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token/access-token.guard';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport { UsersService } from './providers/users.service';\nimport { FindOneByGoogleIdProvider } from './providers/find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    UsersCreateManyProvider,\n    CreateUserProvider,\n    FindOneUserByEmailProvider,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider,\n  ],\n  exports: [UsersService],\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n    forwardRef(() => AuthModule),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller class for '/users' API endpoint\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, profileConfiguration: ConfigType<>, usersCreateManyProvider: UsersCreateManyProvider, createUserProvider: CreateUserProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider, findOneByGoogleIdrovider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdrovider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(createGoogleUserDto: CreateGoogleUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGoogleUserDto\n                                            \n                                                            CreateGoogleUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Method to create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limt: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Public method responsible for handling GET request for '/users' endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Public method used to find one user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CreateUserDto } from './../dtos/create-user.dto';\nimport { Repository } from 'typeorm';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\nimport { CreateUserProvider } from './create-user.provider';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { FindOneByGoogleIdProvider } from './find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './create-google-user.provider';\nimport { CreateGoogleUserDto } from '../dtos/create-google-user.dto';\n\n/**\n * Controller class for '/users' API endpoint\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n\n    /**\n     * Inject UsersCreateMany provider\n     */\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n    /**\n     * Inject Create Users Provider\n     */\n    private readonly createUserProvider: CreateUserProvider,\n\n    /**\n     * Inject findOneUserByEmailProvider\n     */\n    private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider,\n    /**\n     * Inject findOneByGoogleIdrovider\n     */\n    private readonly findOneByGoogleIdrovider: FindOneByGoogleIdProvider,\n    /**\n     * Inject createGoogleUserProvider\n     */\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n  ) {}\n\n  /**\n   * Method to create a new user\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    return await this.createUserProvider.createUser(createUserDto);\n  }\n\n  /**\n   * Public method responsible for handling GET request for '/users' endpoint\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limt: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: 'The API endpoint does not exist',\n        fileName: 'users.service.ts',\n        lineNumber: 88,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        cause: new Error(),\n        description: 'Occured because the API endpoint was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Public method used to find one user using the ID of the user\n   */\n  public async findOneById(id: number) {\n    let user = undefined;\n\n    try {\n      user = await this.usersRepository.findOneBy({\n        id,\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the the datbase',\n        },\n      );\n    }\n\n    /**\n     * Handle the user does not exist\n     */\n    if (!user) {\n      throw new BadRequestException('The user id does not exist');\n    }\n\n    return user;\n  }\n\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyProvider.createMany(createManyUsersDto);\n  }\n\n  // Finds one user by email\n  public async findOneByEmail(email: string) {\n    return await this.findOneUserByEmailProvider.findOneByEmail(email);\n  }\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.findOneByGoogleIdrovider.findOneByGoogleId(googleId);\n  }\n\n  public async createGoogleUser(createGoogleUserDto: CreateGoogleUserDto) {\n    return await this.createGoogleUserProvider.createGoogleUser(\n      createGoogleUserDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-metaoptions.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-post.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-post.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/create-post.provider.ts\n            \n            injectable\n            CreatePostProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-google-user.dto.ts\n            \n            class\n            CreateGoogleUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-params.dto.ts\n            \n            class\n            GetUsersParamsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user-dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-users-many.provoder.ts\n            \n            injectable\n            CreateUsersManyProvoder\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-google-id.provider.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.11.0\n        \n            joi : ^17.12.2\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorator.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n    // If a user passes a field to the decorator use only that field\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
